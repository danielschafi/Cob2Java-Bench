{
  "cobol_file": {
    "file_name": "successful_snippet_9ccaa5a0.cob",
    "content": "       identification division.\n       program-id. hailstones.\n       remarks. cobc -x hailstones.cob.\n\n       data division.\n       working-storage section.\n       01 most                 constant as 1000000.\n       01 coverage             constant as 100000.\n       01 stones               usage binary-long.\n       01 n                    usage binary-long.\n       01 storm                usage binary-long.\n\n       01 show-arg             pic 9(6).\n       01 show-default         pic 99 value 27.\n       01 show-sequence        usage binary-long.\n       01 longest              usage binary-long occurs 2 times.\n\n       01 filler.\n          05 hail              usage binary-long\n                               occurs 0 to most depending on stones.\n       01 show                 pic z(10).\n       01 low-range            usage binary-long.\n       01 high-range           usage binary-long.\n       01 range                usage binary-long.\n\n\n       01 remain               usage binary-long.\n       01 unused               usage binary-long.\n\n       procedure division.\n       accept show-arg from command-line\n       if show-arg less than 1 or greater than coverage then\n           move show-default to show-arg\n       end-if\n       move show-arg to show-sequence\n\n       move 1 to longest(1)\n       perform hailstone varying storm\n                         from 1 by 1 until storm > coverage\n       display \"Longest at: \" longest(2) \" with \" longest(1) \" elements\"\n       goback.\n\n      *> **************************************************************\n       hailstone.\n       move 0 to stones\n       move storm to n\n       perform until n equal 1\n           if stones > most then\n               display \"too many hailstones\" upon syserr\n               stop run\n           end-if\n\n           add 1 to stones\n           move n to hail(stones)\n           divide n by 2 giving unused remainder remain\n           if remain equal 0 then\n               divide 2 into n\n           else\n               compute n = 3 * n + 1\n           end-if\n       end-perform\n       add 1 to stones\n       move n to hail(stones)\n\n       if stones > longest(1) then\n           move stones to longest(1)\n           move storm to longest(2)\n       end-if\n\n       if storm equal show-sequence then\n           display show-sequence \": \" with no advancing\n           perform varying range from 1 by 1 until range > stones\n               move 5 to low-range\n               compute high-range = stones - 4\n               if range < low-range or range > high-range then\n                   move hail(range) to show\n                   display function trim(show) with no advancing\n                   if range < stones then\n                       display \", \" with no advancing\n                   end-if\n               end-if\n               if range = low-range and stones > 8 then\n                   display \"..., \" with no advancing\n               end-if\n           end-perform\n           display \": \" stones \" elements\"\n       end-if\n       .\n\n       end program hailstones.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "000001\n000005\n000010\n000025\n000050\n000100\n000250\n000500"
  }
}