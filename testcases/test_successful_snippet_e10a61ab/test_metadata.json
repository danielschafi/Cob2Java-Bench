{
  "cobol_file": {
    "file_name": "successful_snippet_e10a61ab.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TIC-TAC-TOBOL.\n       \n       ENVIRONMENT DIVISION.\n           INPUT-OUTPUT SECTION.\n               FILE-CONTROL.\n                   SELECT FD-WINMASKS ASSIGN TO \"SMACK.DAT\"\n                       ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n           FILE SECTION.\n               FD FD-WINMASKS.\n                   01 FD-WINMASK PIC X(9).\n\n           WORKING-STORAGE SECTION.\n      *        Strings with conditions\n               01 WS-PLAYER PIC A(1).\n                   88 HUMAN-PLAYER VALUE \"X\".\n                   88 COMPUTER-PLAYER VALUE \"O\".\n               01 WS-STATE PIC A(5).\n                   88 GAME-OVER VALUES \"WIN\", \"LOSE\", \"STALE\".\n               01 WS-MOVE-OUTCOME PIC A(5).\n                   88 MOVE-COMPLETE VALUES \"WIN\", \"LOSE\", \"FAIL\".\n      *        Numbers with conditions\n               01 WS-MASK-DETECTED PIC 9(1).\n                   88 WIN-DETECTED VALUES 3, 4, 5, 6, 7, 8, 9.\n               01 WS-COMPUTER-MOVED PIC 9(1).\n                   88 COMPUTER-MOVED VALUE 1.\n               01 WS-EOF PIC 9(1).\n                   88 EOF VALUE 1.\n               01 WS-SWAP-PLAYERS PIC 9(1).\n                   88 SWAP-PLAYERS VALUE 1.\n      *        Alphanumerixxx\n               01 WS-NEXT-MOVE PIC X(2).\n                   88 FINISHED-PLAYING VALUES \"N\", \"n\".\n      *        The main game grid\n               01 WS-GAME-GRID.\n                   05 WS-GAME-GRID-ROW OCCURS 3 TIMES.\n                       10 WS-GAME-GRID-COL OCCURS 3 TIMES.\n                           15 WS-CELL PIC X(1).\n      *        Constants\n               01 WS-COLOR-GREEN PIC 9(1) VALUE 2.\n               01 WS-COLOR-BLACK PIC 9(1) VALUE 0.\n               01 WS-COLOR-WHITE PIC 9(1) VALUE 7.\n               01 WS-COLOR-BLUE PIC 9(1) VALUE 3.\n               01 WS-COLOR-RED PIC 9(1) VALUE 4.\n      *        Numerixxx\n               01 WS-FG-CELL PIC 9(1).\n               01 WS-FG PIC 9(1).\n               01 WS-BG PIC 9(1).\n               01 WS-COL PIC 9(1).\n               01 WS-ROW PIC 9(1).\n               01 WS-WINS PIC 9(2).\n               01 WS-MOVES PIC 9(2).\n               01 WS-GAMES PIC 9(2).\n               01 WS-COMPUTER-MOVE PIC 9(1).\n               01 WS-DETECT-LOOP-COUNT PIC 9(1).\n      *        Stringy bois        \n               01 WS-MESSAGE PIC X(128).\n               01 WS-INSTRUCTION PIC X(16).\n               01 WS-FLAT-GAME-GRID PIC X(9).\n\n           SCREEN SECTION.\n           01 BOARD-SCREEN.\n               05 BLANK SCREEN\n                   BACKGROUND-COLOR WS-COLOR-BLACK\n                   FOREGROUND-COLOR WS-COLOR-WHITE.\n               05 LINE 1 COLUMN 1 VALUE IS \"   +---+---+---+   \"\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG.\n               05 LINE 2 COLUMN 1 VALUE IS \" A |   |   |   |   \"\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG.\n               05 LINE 3 COLUMN 1 VALUE IS \"   +---+---+---+   \"\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG.\n               05 LINE 4 COLUMN 1 VALUE IS \" B |   |   |   |   \"\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG.\n               05 LINE 5 COLUMN 1 VALUE IS \"   +---+---+---+   \"\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG.\n               05 LINE 6 COLUMN 1 VALUE IS \" C |   |   |   |   \"\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG.\n               05 LINE 7 COLUMN 1 VALUE IS \"   +---+---+---+   \"\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG.\n               05 LINE 8 COLUMN 1 VALUE IS \"     1   2   3     \"\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG.\n               05 LINE 2 COLUMN 6 PIC A(1) FROM WS-CELL(1,1)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 2 COLUMN 10 PIC A(1) FROM WS-CELL(1,2)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 2 COLUMN 14 PIC A(1) FROM WS-CELL(1,3)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 4 COLUMN 6 PIC A(1) FROM WS-CELL(2,1)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 4 COLUMN 10 PIC A(1) FROM WS-CELL(2,2)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 4 COLUMN 14 PIC A(1) FROM WS-CELL(2,3)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 6 COLUMN 6 PIC A(1) FROM WS-CELL(3,1)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 6 COLUMN 10 PIC A(1) FROM WS-CELL(3,2)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 6 COLUMN 14 PIC A(1) FROM WS-CELL(3,3)\n                   BACKGROUND-COLOR WS-BG FOREGROUND-COLOR WS-FG-CELL.\n               05 LINE 10 COLUMN 2 VALUE IS \"Message: \".\n                   05 MSG PIC X(128) FROM WS-MESSAGE.\n               05 LINE 11 COLUMN 2 PIC X(16) FROM WS-INSTRUCTION.\n                   05 NEXT-MOVE PIC X(2) USING WS-NEXT-MOVE.\n               05 LINE 13 COLUMN 2 VALUE IS \"Stats: \".\n               05 LINE 14 COLUMN 2 VALUE IS \" > Moves played = \".\n                   05 MOVES PIC 9(1) FROM WS-MOVES.\n               05 LINE 15 COLUMN 2 VALUE IS \" > Games won = \".\n                   05 WINS PIC 9(2) FROM WS-WINS.\n               05 LINE 15 COLUMN 19 VALUE IS \"/\".\n                   05 GAMES PIC 9(2) FROM WS-GAMES.\n\n       PROCEDURE DIVISION.\n           MOVE \"X\" TO WS-PLAYER\n           PERFORM GAME-LOOP-PARAGRAPH\n               WITH TEST AFTER UNTIL FINISHED-PLAYING\n           STOP RUN.\n\n           GAME-LOOP-PARAGRAPH.\n               INITIALIZE WS-GAME-GRID\n               INITIALIZE WS-STATE\n               INITIALIZE WS-MOVES\n               MOVE \"Make a move like 'A2'\" TO WS-MESSAGE\n               PERFORM GAME-FRAME-PARAGRAPH\n                   WITH TEST AFTER UNTIL GAME-OVER\n               ADD 1 TO WS-GAMES END-ADD\n               EVALUATE WS-STATE\n               WHEN \"WIN\"\n                   ADD 1 TO WS-WINS END-ADD\n                   MOVE WS-COLOR-BLACK TO WS-FG\n                   MOVE WS-COLOR-BLACK TO WS-FG-CELL\n                   MOVE WS-COLOR-GREEN TO WS-BG\n               WHEN \"STALE\"\n                   MOVE WS-COLOR-BLACK TO WS-FG\n                   MOVE WS-COLOR-BLACK TO WS-FG-CELL\n                   MOVE WS-COLOR-BLUE TO WS-BG\n               WHEN OTHER\n                   MOVE WS-COLOR-BLACK TO WS-FG\n                   MOVE WS-COLOR-BLACK TO WS-FG-CELL\n                   MOVE WS-COLOR-RED TO WS-BG\n               END-EVALUATE\n               MOVE \"One more (y/n)? \" TO WS-INSTRUCTION\n               MOVE \"y\" TO WS-NEXT-MOVE\n               DISPLAY BOARD-SCREEN END-DISPLAY\n               ACCEPT BOARD-SCREEN END-ACCEPT\n           .\n\n           GAME-FRAME-PARAGRAPH.\n               MOVE \"Move to square: \" TO WS-INSTRUCTION\n               MOVE WS-COLOR-GREEN TO WS-FG\n               MOVE WS-COLOR-WHITE TO WS-FG-CELL\n               MOVE WS-COLOR-BLACK TO WS-BG\n               INITIALIZE WS-MOVE-OUTCOME\n               \n               IF COMPUTER-PLAYER\n      *            Generate some bullshit move for the computer\n                   INITIALIZE WS-COMPUTER-MOVED\n                   PERFORM UNTIL COMPUTER-MOVED\n                       COMPUTE WS-ROW = FUNCTION RANDOM * 3 + 1\n                       END-COMPUTE\n                       COMPUTE WS-COL = FUNCTION RANDOM * 3 + 1\n                       END-COMPUTE\n                       IF WS-CELL(WS-ROW,WS-COL) IS EQUAL TO \" \"\n                       THEN\n                           SET WS-COMPUTER-MOVED TO 1\n                           MOVE WS-PLAYER TO WS-CELL(WS-ROW,WS-COL)\n                       END-IF\n                   END-PERFORM\n               ELSE\n      *            Prompt for input from the user\n                   INITIALIZE WS-NEXT-MOVE\n                   DISPLAY BOARD-SCREEN END-DISPLAY\n                   ACCEPT BOARD-SCREEN END-ACCEPT\n    \n      *            Crappily parse the user input\n                   EVALUATE FUNCTION UPPER-CASE(WS-NEXT-MOVE(1:1))\n                       WHEN \"A\" SET WS-ROW TO 1\n                       WHEN \"B\" SET WS-ROW TO 2\n                       WHEN \"C\" SET WS-ROW TO 3\n                       WHEN OTHER MOVE \"FAIL\" TO WS-MOVE-OUTCOME\n                   END-EVALUATE\n                   SET WS-COL TO WS-NEXT-MOVE(2:1)\n\n      *            Check move is a valid square\n                   IF\n                       WS-MOVE-OUTCOME IS NOT EQUAL TO \"FAIL\"\n                       AND WS-COL IS GREATER THAN 0\n                       AND WS-COL IS LESS THAN 4\n                       AND WS-CELL(WS-ROW,WS-COL) = \" \"\n                   THEN\n                       MOVE WS-PLAYER TO WS-CELL(WS-ROW,WS-COL)\n                   ELSE\n                       MOVE \"FAIL\" TO WS-MOVE-OUTCOME\n                   END-IF\n               END-IF\n               \n      *        Convert the grid to the same format as the winmask\n               MOVE WS-GAME-GRID TO WS-FLAT-GAME-GRID\n               IF HUMAN-PLAYER\n                   INSPECT WS-FLAT-GAME-GRID REPLACING ALL \"X\" BY \"1\"\n                   INSPECT WS-FLAT-GAME-GRID REPLACING ALL \"O\" BY \"0\"\n               ELSE\n                   INSPECT WS-FLAT-GAME-GRID REPLACING ALL \"X\" BY \"0\"\n                   INSPECT WS-FLAT-GAME-GRID REPLACING ALL \"O\" BY \"1\"\n               END-IF\n               INSPECT WS-FLAT-GAME-GRID REPLACING ALL \" \" BY \"0\"\n               \n      *        Check for winning condition\n               INITIALIZE WS-EOF\n               OPEN INPUT FD-WINMASKS\n               PERFORM UNTIL EOF OR MOVE-COMPLETE\n                   READ FD-WINMASKS NEXT RECORD\n                       AT END\n                           SET WS-EOF TO 1\n                       NOT AT END\n                           PERFORM VALIDATE-WIN-PARAGRAPH\n                   END-READ\n               END-PERFORM\n               CLOSE FD-WINMASKS\n\n      *        Must be stalemaaaaaaaate\n               IF NOT MOVE-COMPLETE AND WS-MOVES IS EQUAL TO 8\n                   MOVE \"STALE\" TO WS-MOVE-OUTCOME\n               END-IF\n                \n      *        Handle the result\n               INITIALIZE WS-SWAP-PLAYERS\n               EVALUATE WS-MOVE-OUTCOME\n               WHEN \"WIN\"\n                   MOVE \"WINNER! (^_^)\" TO WS-MESSAGE\n                   MOVE \"WIN\" TO WS-STATE\n                   SET WS-SWAP-PLAYERS TO 1\n               WHEN \"LOSE\"\n                   MOVE \"YOU DIED (x_x)\" TO WS-MESSAGE\n                   MOVE \"LOSE\" TO WS-STATE\n                   SET WS-SWAP-PLAYERS TO 1\n               WHEN \"STALE\"\n                   MOVE \"Stalemate! (>_<)\" TO WS-MESSAGE\n                   MOVE \"STALE\" TO WS-STATE\n               WHEN \"FAIL\"\n                   MOVE \"Invalid move... (o_O)\" TO WS-MESSAGE\n               WHEN OTHER\n                   MOVE \"Enter a move\" TO WS-MESSAGE\n                   SET WS-SWAP-PLAYERS TO 1\n                   ADD 1 TO WS-MOVES END-ADD\n               END-EVALUATE\n\n      *        Swap whose turn it is if the move was valid\n               IF SWAP-PLAYERS\n                   IF HUMAN-PLAYER\n                       MOVE \"O\" TO WS-PLAYER\n                   ELSE\n                       MOVE \"X\" TO WS-PLAYER\n                   END-IF\n               END-IF\n           .\n\n           VALIDATE-WIN-PARAGRAPH.\n               INITIALIZE WS-MASK-DETECTED\n               SET WS-DETECT-LOOP-COUNT TO 1\n               PERFORM 9 TIMES\n                   IF\n                       FD-WINMASK(WS-DETECT-LOOP-COUNT:1)\n                       IS EQUAL TO\n                       WS-FLAT-GAME-GRID(WS-DETECT-LOOP-COUNT:1)\n                       AND IS EQUAL TO 1\n                   THEN\n                       ADD 1 TO WS-MASK-DETECTED END-ADD\n                   END-IF\n                   ADD 1 TO WS-DETECT-LOOP-COUNT END-ADD\n               END-PERFORM\n               IF WIN-DETECTED\n                   IF HUMAN-PLAYER\n                       MOVE \"WIN\" TO WS-MOVE-OUTCOME\n                   ELSE\n                       MOVE \"LOSE\" TO WS-MOVE-OUTCOME\n                   END-IF\n               END-IF\n           .\n"
  },
  "input_files": [
    {
      "file_name": "SMACK.DAT",
      "content": "Game in progress - Computer analyzing position                                                                  051015\nCurrent board state saved - Your turn next                                                                      030812\nExcellent move! Computer is thinking...                                                                         071520\nYou're getting better at this game!                                                                             041218\nComputer has made its move - Check the board                                                                    080925\nTie game - Well played on both sides                                                                            091522\nVictory! You've won this round                                                                                  N 0928\nComputer wins this time - Try again?                                                                            N 1835\nGame statistics updated successfully                                                                            020615\nNew game started - You go first                                                                                 041010"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "Welcome to Tic-Tac-Toe! Make your move by entering a position (1-9). Good luck and have fun playing against the computer!        A1105\nThe board is set. Choose your next position carefully. The computer is thinking... Will you win this round? Let's find out!       B2208\nGreat move! The game is getting interesting. The computer has made its move. What will you do next? Think strategically!          C3312\nYou're doing well! Keep up the good work. The computer is a tough opponent. Can you outsmart it? Make your next move count!      D4415\nExcellent strategy! The game is almost over. Who will win? The tension is building. Make your final move and see what happens!   E5520\nNice game! Would you like to play again? The computer is ready for another round. Enter your choice to continue or quit the game.F6625\nThanks for playing! You've completed several games. Your skills are improving. The computer enjoyed the challenge. See you soon! G7730\nGame over! Final results are in. You've played well against the computer. Better luck next time if you didn't win. Goodbye now!  H8835"
  }
}