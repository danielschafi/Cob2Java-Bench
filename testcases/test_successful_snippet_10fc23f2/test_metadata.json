{
  "cobol_file": {
    "file_name": "successful_snippet_10fc23f2.cob",
    "content": "*> $ brew install open-cobol\n*> $ cobc -I/Users/$USER/homebrew/include -L/Users/$USER/homebrew/lib -free -x -o envelopes_cbl envelopes.cbl\n\nidentification division.\nprogram-id. envelopes.\n\ndata division.\n  working-storage section.\n  *> Constants\n  01 ws-num-trials pic 9(5) value 10000.\n  01 ws-prior-lower-max pic 9(3) value 100.\n  *> Variables\n  01 ws-cutoff pic 9(3).\n  01 ws-total comp-2.\n  01 ws-trial-num pic 9(5).\n  01 ws-expected-value comp-2.\n  01 ws-lower-value comp-2.\n  01 ws-higher-value comp-2.\n  *> RNG support\n  01 ws-rng comp-2.\n  01 ws-tmp pic 9(4).\n\nprocedure division.\n  main.\n  *> Approximates the expected value for each integral cutoff value.\n  perform multi-trial varying ws-cutoff \n      from 0 by 1 until ws-cutoff > 2 * ws-prior-lower-max.\n  stop run.\n\n  multi-trial.\n  *> Runs many trials at a given cutoff to approximate the expected value.\n  move zero to ws-total.\n  perform single-trial varying ws-trial-num \n      from 1 by 1 until ws-trial-num > ws-num-trials.\n  divide ws-total by ws-num-trials giving ws-expected-value.\n  display 'cutoff='ws-cutoff', expected_value='ws-expected-value.\n\n  single-trial.\n  *> Runs a single trial where an envelope is chosen.  If the chosen envelope \n  *> has a value < cutoff, the function will switch envelopes, otherwise it \n  *> will keep the envelope it has chosen. Returns the value of the envelope \n  *> it ultimately selects.\n  perform rng.\n  multiply ws-rng by ws-prior-lower-max giving ws-lower-value.\n  multiply ws-lower-value by 2 giving ws-higher-value.\n  perform rng.\n  if ws-rng < 0.5 then \n    if ws-lower-value >= ws-cutoff then\n      add ws-lower-value to ws-total\n    else\n      add ws-higher-value to ws-total\n    end-if\n  else\n    if ws-higher-value >= ws-cutoff then\n      add ws-higher-value to ws-total\n    else\n      add ws-lower-value to ws-total\n    end-if  \n  end-if.\n\n  rng.\n  *> function random produces a non-uniform distribution.\n  *> So ignore the first 5 digits it produces.\n  compute ws-rng = function random.\n  compute ws-tmp = ws-rng * 10000.\n  compute ws-rng = ws-rng * 10000 - ws-tmp.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}