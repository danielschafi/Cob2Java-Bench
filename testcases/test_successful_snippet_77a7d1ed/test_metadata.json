{
  "cobol_file": {
    "file_name": "successful_snippet_77a7d1ed.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. WARO.\n       DATA DIVISION.\n         WORKING-STORAGE SECTION.\n         01 GREETING PIC A(10) VALUE 'WARO COBOL'.\n         01 I PIC 9(2).\n         01 J PIC 9(2).\n         01 X PIC 9(2).\n         01 Y PIC 9(2).\n         01 HIGH-BID PIC 9(2).\n         01 HIGH-POINTS PIC 9(2).\n         01 IDX-ROUND-WINNER PIC 9(1).\n         01 IDX-GAME-WINNER PIC 9(1).\n         78 NUM-CARDS-HAND VALUE 4.\n         78 NUM-CARDS-DECK VALUE 16.\n         78 STRATEGY-NEXT VALUE 1.\n         78 STRATEGY-MAX VALUE 2.\n         78 STRATEGY-NEAREST VALUE 3.\n\n         *> Players should probably be parallel arrays/tables:\n         *> e.g. PLAYER-NAMES PIC X(6) OCCURS NUM-PLAYERS TIMES.\n         *> e.g. PLAYER-BIDS  PIC 9(2) OCCURS NUM-PLAYERS TIMES.\n         *> and not splayed out as below. \n         *> This is a toy example!\n         01 PLAYER1-REC.\n            02 PLAYER1-NAME PIC X(6) VALUE '  Bach'.      \n            02 PLAYER1-BID PIC 9(2).\n            02 PLAYER1-POINTS PIC 9(2).\n            02 PLAYER1-STRATEGY PIC 9(1) VALUE STRATEGY-NEXT.\n            02 PLAYER1-HAND PIC 9(2) OCCURS NUM-CARDS-HAND TIMES.\n         01 PLAYER2-REC.\n            02 PLAYER2-NAME PIC X(6) VALUE 'Chopin'.      \n            02 PLAYER2-BID PIC 9(2).\n            02 PLAYER2-POINTS PIC 9(2).\n            02 PLAYER2-STRATEGY PIC 9(1) VALUE STRATEGY-MAX.\n            02 PLAYER2-HAND PIC 9(2) OCCURS NUM-CARDS-HAND TIMES.\n         01 PLAYER3-REC.\n            02 PLAYER3-NAME PIC X(6) VALUE 'Mozart'.      \n            02 PLAYER3-BID PIC 9(2).\n            02 PLAYER3-POINTS PIC 9(2).\n            02 PLAYER3-STRATEGY PIC 9(1) VALUE STRATEGY-NEAREST.\n            02 PLAYER3-HAND PIC 9(2) OCCURS NUM-CARDS-HAND TIMES.\n         01 KITTY-REC.\n            02 PRIZE-CARD PIC 9(2).\n            02 KITTY-CARDS PIC 9(2) OCCURS NUM-CARDS-HAND TIMES.\n         01 DECK-REC.\n            02 DECK-CARDS PIC 9(2) OCCURS NUM-CARDS-DECK TIMES.\n       PROCEDURE DIVISION.\n       BEGIN.\n         DISPLAY \"TRACER : \" GREETING.\n         PERFORM INIT-DECK VARYING I FROM 1 BY 1 UNTIL I>NUM-CARDS-DECK.\n         CALL 'knuth-shuffle' USING DECK-REC.\n         CALL 'log-deck' USING DECK-REC.\n         PERFORM ASSIGN-CARD \n           VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS-DECK.\n         CALL 'log-kitty' USING KITTY-REC.\n         CALL 'log-player' USING PLAYER1-REC.\n         CALL 'log-player' USING PLAYER2-REC.\n         CALL 'log-player' USING PLAYER3-REC.\n\n         PERFORM PLAY-ROUND\n           VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS-HAND.\n\n         PERFORM PICK-GAME-WINNER.\n         DISPLAY \"TRACER Ready.\"\n       STOP RUN.\n\n       *> Player with most points win the game.\n       PICK-GAME-WINNER.\n         MOVE PLAYER1-POINTS TO HIGH-POINTS.\n         MOVE 1 TO IDX-GAME-WINNER.   \n \n         IF PLAYER2-POINTS > HIGH-POINTS\n           MOVE PLAYER2-POINTS TO HIGH-POINTS\n           MOVE 2 TO IDX-GAME-WINNER   \n         END-IF.\n         \n         IF PLAYER3-POINTS > HIGH-POINTS\n           MOVE PLAYER3-POINTS TO HIGH-POINTS\n           MOVE 3 TO IDX-GAME-WINNER  \n         END-IF.\n\n         IF IDX-GAME-WINNER = 1\n           DISPLAY \"TRACER WINNER: \" PLAYER1-NAME\n         ELSE IF IDX-GAME-WINNER = 2\n           DISPLAY \"TRACER WINNER: \" PLAYER2-NAME\n         ELSE IF IDX-GAME-WINNER = 3\n           DISPLAY \"TRACER WINNER: \" PLAYER3-NAME\n         ELSE \n           DISPLAY \"TRACER SEVERE ERROR I-G-W: \" IDX-GAME-WINNER\n         END-IF.\n\n       PLAY-ROUND.\n         MOVE KITTY-CARDS (I) TO PRIZE-CARD.\n         DISPLAY \"TRACER round \" I \" prize: \" PRIZE-CARD.\n         CALL 'player-turn' USING PRIZE-CARD, PLAYER1-REC.\n         CALL 'player-turn' USING PRIZE-CARD, PLAYER2-REC.\n         CALL 'player-turn' USING PRIZE-CARD, PLAYER3-REC.\n         PERFORM PICK-ROUND-WINNER.\n         PERFORM AWARD-WINNER.\n         CALL 'log-player' USING PLAYER1-REC.\n         CALL 'log-player' USING PLAYER2-REC.\n         CALL 'log-player' USING PLAYER3-REC.\n\n       *> Winner gets the prize card points.\n       AWARD-WINNER.\n         IF IDX-ROUND-WINNER = 1\n           ADD PRIZE-CARD TO PLAYER1-POINTS\n         ELSE IF IDX-ROUND-WINNER = 2\n           ADD PRIZE-CARD TO PLAYER2-POINTS\n         ELSE IF IDX-ROUND-WINNER = 3\n           ADD PRIZE-CARD TO PLAYER3-POINTS\n         ELSE\n           DISPLAY \"TRACER SEVERE ERROR I-R-W: \" IDX-ROUND-WINNER\n         END-IF.\n\n       *> Player with highest bid wins the round.\n       PICK-ROUND-WINNER.\n         MOVE PLAYER1-BID TO HIGH-BID.\n         MOVE 1 TO IDX-ROUND-WINNER.   \n \n         IF PLAYER2-BID > HIGH-BID\n           MOVE PLAYER2-BID TO HIGH-BID\n           MOVE 2 TO IDX-ROUND-WINNER   \n         END-IF.\n         \n         IF PLAYER3-BID > HIGH-BID\n           MOVE PLAYER3-BID TO HIGH-BID\n           MOVE 3 TO IDX-ROUND-WINNER  \n         END-IF.\n  \n       *> example values as I iterates:\n       *> I: 1 2 3 4 5 6 7 8 9 ...\n       *> J: 0 1 2 3 4 5 6 7 8 ...\n       *> X: 0 0 0 0 1 1 1 1 2 ...\n       *> Y: 1 2 3 4 1 2 3 4 1 ... \n       ASSIGN-CARD.\n         COMPUTE J = I - 1.\n         DIVIDE NUM-CARDS-HAND INTO J GIVING X REMAINDER Y.\n         ADD 1 TO Y.\n\n         IF X = 0 \n           MOVE DECK-CARDS (I) TO KITTY-CARDS (Y)\n         ELSE IF X = 1\n           MOVE DECK-CARDS (I) TO PLAYER1-HAND (Y)\n         ELSE IF X = 2\n           MOVE DECK-CARDS (I) TO PLAYER2-HAND (Y)\n         ELSE IF X = 3\n           MOVE DECK-CARDS (I) TO PLAYER3-HAND (Y)\n         ELSE\n           DISPLAY \"TRACER SEVERE ERROR I: \" I\n         END-IF.\n\n       INIT-DECK.\n         MOVE I TO DECK-CARDS (I).\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}