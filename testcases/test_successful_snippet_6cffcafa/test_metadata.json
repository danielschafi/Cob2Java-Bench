{
  "cobol_file": {
    "file_name": "successful_snippet_6cffcafa.cob",
    "content": "identification division.\nprogram-id. middle3.\nenvironment division.\ndata division.\nworking-storage section.\n01  num                 pic 9(9). \n    88 num-too-small    values are -99 thru 99.\n01  num-disp            pic ---------9.\n\n01  div                 pic 9(9).\n01  mod                 pic 9(9).\n01  mod-disp            pic 9(3).\n\n01  digit-counter       pic 999.\n01  digit-div           pic 9(9).\n    88  no-more-digits  value 0.\n01  digit-mod           pic 9(9).\n    88  is-even         value 0.\n\n01  multiplier          pic 9(9).\n\n01  value-items.\n    05  filler  pic s9(9) value 123.\n    05  filler  pic s9(9) value 12345.\n    05  filler  pic s9(9) value 1234567.\n    05  filler  pic s9(9) value 987654321.\n    05  filler  pic s9(9) value 10001.\n    05  filler  pic s9(9) value -10001.\n    05  filler  pic s9(9) value -123.\n    05  filler  pic s9(9) value -100.\n    05  filler  pic s9(9) value 100.\n    05  filler  pic s9(9) value -12345.\n    05  filler  pic s9(9) value 1.\n    05  filler  pic s9(9) value 2.\n    05  filler  pic s9(9) value -1.\n    05  filler  pic s9(9) value -10.\n    05  filler  pic s9(9) value 2002.\n    05  filler  pic s9(9) value -2002.\n    05  filler  pic s9(9) value 0.\n    \n01  value-array redefines value-items.\n    05  items   pic s9(9)  occurs 17 times indexed by item.\n\n01  result  pic x(20).\n\nprocedure division.\n10-main.\n    perform with test after varying item from 1 by 1 until items(item) = 0\n        move items(item) to num\n        move items(item) to num-disp\n        perform 20-check\n        display num-disp \" --> \" result\n    end-perform.\n    stop run.\n    \n20-check.\n    if num-too-small\n        move \"Number too small\" to result\n        exit paragraph\n    end-if.\n\n    perform 30-count-digits.\n    divide digit-counter by 2 giving digit-div remainder digit-mod.\n    if is-even\n        move \"Even number of digits\" to result\n        exit paragraph\n    end-if.\n    \n    \n    \n    \n        \n    if digit-counter > 3\n        compute multiplier rounded = 10 ** (((digit-counter - 5) / 2) + 1) \n        divide num by multiplier giving num\n        divide num by 1000 giving div remainder mod\n        move mod to mod-disp\n    else\n        move num to mod-disp\n    end-if.\n    move mod-disp to result.\n    exit paragraph.\n    \n30-count-digits.\n    move zeroes to digit-counter.\n    move num to digit-div.\n    perform with test before until no-more-digits\n        divide digit-div by 10 giving digit-div remainder digit-mod\n        add 1 to digit-counter\n    end-perform.\n    exit paragraph.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}