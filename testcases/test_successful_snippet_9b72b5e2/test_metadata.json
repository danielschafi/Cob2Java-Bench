{
  "cobol_file": {
    "file_name": "successful_snippet_9b72b5e2.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AOC-2020-07-1.\n       AUTHOR. ANNA KOSIERADZKA.\n      \n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT INPUTFILE ASSIGN TO \"d07.input\"\n           ORGANIZATION IS LINE SEQUENTIAL.\n           \n       DATA DIVISION.\n       FILE SECTION.\n         FD INPUTFILE\n         RECORD IS VARYING IN SIZE FROM 1 to 128\n         DEPENDING ON REC-LEN.\n         01 INPUTRECORD PIC X(128).\n\n       WORKING-STORAGE SECTION.\n         01 FILE-STATUS PIC 9 VALUE 0.\n         01 REC-LEN PIC 9(2) COMP.\n         01 WS-BUFFER PIC X(32) OCCURS 32 TIMES. \n         01 WS-BAG PIC X(32).\n         01 WS-BAGS OCCURS 594 TIMES.\n           05 WS-BAG-COLOR PIC X(32).\n           05 WS-BAG-DONE PIC 9 VALUE 0.\n           05 WS-BAG-BAGS-NUMBER PIC 99 VALUE 0.\n           05 WS-BAG-BAGS PIC X(32) OCCURS 32 TIMES.\n        01 WS-BAGS-QUEUE PIC X(32) OCCURS 9999 TIMES.\n\n       LOCAL-STORAGE SECTION.\n         01 N UNSIGNED-INT VALUE 0.\n         01 RESULT UNSIGNED-INT VALUE 0.\n         01 BAG-IDX UNSIGNED-INT VALUE 1.\n         01 I UNSIGNED-INT VALUE 1.\n         01 J UNSIGNED-INT VALUE 1.\n         01 K UNSIGNED-INT VALUE 1.\n         01 STRING-PTR UNSIGNED-INT VALUE 1.\n         01 Q1 UNSIGNED-INT VALUE 1.\n         01 Q2 UNSIGNED-INT VALUE 1.\n\n       PROCEDURE DIVISION.\n       001-MAIN.\n           OPEN INPUT INPUTFILE.\n           PERFORM 002-READ UNTIL FILE-STATUS = 1.\n           CLOSE INPUTFILE.\n           PERFORM 005-WALK-GRAPH.\n           PERFORM 008-COUNT-RESULT.\n           DISPLAY Q2.\n           DISPLAY RESULT.\n           STOP RUN.\n\n       002-READ.\n            READ INPUTFILE\n                AT END MOVE 1 TO FILE-STATUS\n                NOT AT END PERFORM 003-PARSE-RECORD\n            END-READ.\n       \n       003-PARSE-RECORD.\n           ADD 1 TO N.\n           MOVE 1 TO STRING-PTR.\n\n           PERFORM VARYING J FROM 1 BY 1 UNTIL J > 32\n             UNSTRING INPUTRECORD DELIMITED BY SPACE\n               INTO WS-BUFFER(J)\n               WITH POINTER STRING-PTR\n           END-PERFORM.\n\n           STRING\n               WS-BUFFER(1) DELIMITED BY SPACE\n               ' ' DELIMITED BY SIZE\n               WS-BUFFER(2) DELIMITED BY SPACE\n               INTO WS-BAG-COLOR(I)\n           END-STRING.\n       \n           IF NOT WS-BUFFER(5) = \"no\" THEN\n              PERFORM 004-PARSE-SUB-BAGS\n           END-IF.\n           ADD 1 TO I.\n           \n       004-PARSE-SUB-BAGS.\n      * 1, 2 are color, 3=bags, 4=contains\n           MOVE 1 TO K.\n           PERFORM VARYING J FROM 5 BY 4 UNTIL J > 32\n            IF NOT WS-BUFFER(J)(1:1) = \" \" THEN\n               STRING\n                 WS-BUFFER(J + 1) DELIMITED BY SPACE\n                 ' ' DELIMITED BY SIZE\n                 WS-BUFFER(J + 2) DELIMITED BY SPACE\n                 INTO WS-BAG-BAGS(I, K)\n               END-STRING\n               ADD 1 TO K\n            END-IF\n           END-PERFORM.\n           COMPUTE WS-BAG-BAGS-NUMBER(I) = K - 1.\n\n       005-WALK-GRAPH.\n      * Queue starts containing 'shiny gold', Q1 = 1, Q2 = 1\n           MOVE 'shiny gold' TO WS-BAGS-QUEUE(1).\n           PERFORM 006-WALK-GRAPH-LOOP UNTIL Q1 > Q2.\n           \n       006-WALK-GRAPH-LOOP.\n           MOVE WS-BAGS-QUEUE(Q1) TO WS-BAG.\n           ADD 1 TO Q1.\n           PERFORM 007-FIND-BAG-INDEX.\n           MOVE 1 TO WS-BAG-DONE(BAG-IDX).\n\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n      *    Find bags with WS-BAG among sub-bags \n              IF WS-BAG-DONE(I) = 0 THEN\n                 PERFORM VARYING J FROM 1 by 1 \n                    UNTIL J > WS-BAG-BAGS-NUMBER(I)\n                       IF WS-BAG = WS-BAG-BAGS(I, J)\n                          ADD 1 TO Q2\n                          MOVE WS-BAG-COLOR(I) TO WS-BAGS-QUEUE(Q2)\n                          EXIT PERFORM \n                       END-IF \n                 END-PERFORM\n              END-IF\n           END-PERFORM.\n\n      * Note: no hashtables in COBOL, so linear lookup\n       007-FIND-BAG-INDEX.\n           PERFORM VARYING K FROM 1 BY 1 UNTIL K > N\n              IF WS-BAG = WS-BAG-COLOR(K) THEN \n                 MOVE K TO BAG-IDX\n              END-IF\n           END-PERFORM.\n\n       008-COUNT-RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n              IF WS-BAG-DONE(I) = 1 THEN\n                 ADD 1 TO RESULT\n              END-IF\n           END-PERFORM.\n      * Shiny gold bag doesn't count\n           SUBTRACT 1 FROM RESULT.\n"
  },
  "input_files": [
    {
      "file_name": "d07.input",
      "content": "light blue bags contain 1 bright white bag, 2 muted yellow bags.\ndark orange bags contain 3 bright white bags, 4 muted yellow bags.\nbright white bags contain 1 shiny gold bag.\nmuted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\nshiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\ndark olive bags contain 3 faded blue bags, 4 dotted black bags.\nvibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\nfaded blue bags contain no other bags.\ndotted black bags contain no other bags.\npale violet bags contain 2 shiny gold bags, 3 dark olive bags."
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}