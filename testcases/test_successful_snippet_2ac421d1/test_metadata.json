{
  "cobol_file": {
    "file_name": "successful_snippet_2ac421d1.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AOC-2021-15-2.\n       AUTHOR. ANNA KOSIERADZKA.\n      * Note: this one took several hours. \n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT INPUTFILE ASSIGN TO \"d15.input\"\n           ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n\n       FILE SECTION.\n         FD INPUTFILE.         \n         01 INPUTRECORD PIC X(100).\n\n       WORKING-STORAGE SECTION.\n         01 FILE-STATUS PIC 9 VALUE 0.\n         01 N CONSTANT AS 100.\n         01 WS-MAP-ARR OCCURS 500 TIMES.\n           05 WS-MAP PIC 9 VALUE 0 OCCURS 500 TIMES.\n         01 WS-COST-ARR OCCURS 500 TIMES.\n           05 WS-COST PIC 9(6) VALUE 999999 OCCURS 500 TIMES.\n         01 WS-STP-ARR OCCURS 500 TIMES.\n           05 WS-STP PIC 9 VALUE 0 OCCURS 500 TIMES.\n         01 WS-STP-SIZE PIC 9(6) VALUE 0.\n         77 I PIC 9(3) VALUE 1.\n         77 J PIC 9(3) VALUE 1.\n         77 K PIC 9(3) VALUE 1.\n         77 L PIC 9(3) VALUE 1.\n         77 X PIC 9(3) VALUE 1.\n         77 Y PIC 9(3) VALUE 1.\n         77 C-MIN PIC 9(6).\n         77 RESULT PIC 9(6).\n\n       PROCEDURE DIVISION.\n       001-MAIN.\n           OPEN INPUT INPUTFILE.\n           PERFORM 002-READ UNTIL FILE-STATUS = 1.\n           CLOSE INPUTFILE.\n           PERFORM 004-COMPLETE-MAP.\n           PERFORM 005-COMPUTE-COSTS.\n           PERFORM 008-END.\n           STOP RUN.\n\n       002-READ.\n           READ INPUTFILE\n             AT END MOVE 1 TO FILE-STATUS\n             NOT AT END PERFORM 003-PROCESS-RECORD\n           END-READ.\n\n       003-PROCESS-RECORD.\n           MOVE INPUTRECORD TO WS-MAP-ARR(I).\n           ADD 1 TO I.\n       \n       004-COMPLETE-MAP.\n           PERFORM VARYING K FROM 0 BY 1 UNTIL K > 4\n             PERFORM VARYING L FROM 0 BY 1 UNTIL L > 4\n               PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n                 PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n                   COMPUTE X = FUNCTION MOD(WS-MAP(I, J) + K + L, 9)\n                   IF X = 0 THEN\n                     MOVE 9 TO X\n                   END-IF\n                   COMPUTE WS-MAP(I + L * N, J + K * N) = X\n                 END-PERFORM\n               END-PERFORM\n             END-PERFORM\n           END-PERFORM.\n\n       005-COMPUTE-COSTS.\n      * Dijkstra\u2019s shortest path algorithm \n           MOVE 0 TO WS-COST(1, 1).\n           PERFORM 006-LOOP UNTIL WS-STP-SIZE = 25 * N * N.\n\n       006-LOOP.\n      * Pick a vertex u which is not there in sptSet \n      * and has a minimum distance value.  \n           MOVE 999999 TO C-MIN.\n           PERFORM VARYING K FROM 0 BY 1 UNTIL K > 5 * N\n             PERFORM VARYING L FROM 0 BY 1 UNTIL L > 5 * N\n               IF WS-COST(K, L) < C-MIN AND WS-STP(K, L) = 0 THEN\n                 MOVE WS-COST(K, L) TO C-MIN\n                 MOVE K TO I\n                 MOVE L TO J\n               END-IF\n             END-PERFORM\n           END-PERFORM.\n           IF C-MIN = 999999 THEN\n             DISPLAY \"C-MIN = 999999\"\n             PERFORM 008-END\n           END-IF.\n      * Include u to sptSet.     \n           MOVE 1 TO WS-STP(I, J).\n           ADD 1 TO  WS-STP-SIZE.\n\n      * Update distance value of all adjacent vertices of u.\n           COMPUTE Y = J.\n           COMPUTE X = I - 1.\n           PERFORM 007-UPDATE-NODE.\n           COMPUTE X = I + 1.\n           PERFORM 007-UPDATE-NODE.\n           COMPUTE X = I.\n           COMPUTE Y = J - 1.\n           PERFORM 007-UPDATE-NODE.\n           COMPUTE Y = J + 1.\n           PERFORM 007-UPDATE-NODE.\n\n       007-UPDATE-NODE.\n           IF X = 0 OR Y = 0 OR X > 5 * N OR Y > 5 * N THEN\n             EXIT PARAGRAPH\n           END-IF.\n      *     IF WS-STP(X, Y) = 1 THEN\n      *       EXIT PARAGRAPH\n      *     END-IF.\n      * For every adjacent vertex v, \n      * if the sum of distance value of u (from source) \n      * and weight of edge u-v, is less than the distance value of v, \n      * then update the distance value of v. \n           IF WS-COST(X, Y) > WS-COST(I, J) + WS-MAP(X, Y) THEN\n             COMPUTE WS-COST(X, Y) = WS-COST(I, J) + WS-MAP(X, Y) \n           END-IF.\n\n       008-END.\n           COMPUTE RESULT = WS-COST(5 * N, 5 * N).\n           DISPLAY RESULT.\n           STOP RUN.\n"
  },
  "input_files": [
    {
      "file_name": "d15.input",
      "content": "1163751742176174851436589617154162185217885621261758536167251282855524263482416131452974131696151699\n1381191672161117193842981111121221631119121113163121521462122188561197151141331139316441174621861111\n1711981163149114198111353194643148111121111591313588111712383559882117811191522411111111111111112341\n9416976196118311935252585211117132221542111211115422953491632142621168415137339611251291941122264989\n6311351631213911167341231162567211927221111152228139358141187143561281419851231218977112119193166994\n3311321611621111121221261219118127921421373662621218121111112122131512315638911138213134111125121211\n1119821798911189122431191448362591159121211121119111231452141588631393121122134123121111121221111121\n2221161716133212262324458823185719629698212481114122561111311121111181121112114621511122131141121112\n1114191791112311734421717111422171261539111831121311518111111121111911121212191141121314121431111112\n1169142911134129916127911513611281181121111142221111111112321116151291214221115111891112212117161511"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}