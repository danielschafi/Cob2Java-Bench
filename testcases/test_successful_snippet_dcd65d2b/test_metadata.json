{
  "cobol_file": {
    "file_name": "successful_snippet_dcd65d2b.cob",
    "content": "      *>****************************************************************\n      *> Author: Erik Eriksen\n      *> Date: 2022-04-15\n      *> Purpose: Example program showing connecting and using a Postgre\n      *>          SQL database in an application.\n      *>\n      *> Note: WORKING-STORAGE SECTION header as well as SQL related\n      *>       statements must be in uppercase for the esqlOC precompile\n      *>       to pick them up and process them.\n      *>\n      *> Prerequisites: Postgres SQL database with create_db script ran\n      *>                on.\n      *>                esqlOC Precompiler\n      *>                unixODBC odbc-postgresql driver installed\n      *>\n      *> Precomiler: esqlOC -static -o generated_sql_ex.cbl sql_example.\n      *> Tectonics: cobc -x -static -locsql generated_sql_ex.cbl\n      *>\n      *>****************************************************************\n       identification division.\n       program-id. sql-example.\n       data division.\n       file section.\n\n       WORKING-STORAGE SECTION.\n      **********************************************************************\n      *******                EMBEDDED SQL VARIABLES                  *******\n       01 SQLCA.\n           05 SQLSTATE PIC X(5).\n              88  SQL-SUCCESS           VALUE '00000'.\n              88  SQL-RIGHT-TRUNC       VALUE '01004'.\n              88  SQL-NODATA            VALUE '02000'.\n              88  SQL-DUPLICATE         VALUE '23000' THRU '23999'.\n              88  SQL-MULTIPLE-ROWS     VALUE '21000'.\n              88  SQL-NULL-NO-IND       VALUE '22002'.\n              88  SQL-INVALID-CURSOR-STATE VALUE '24000'.\n           05 FILLER   PIC X.\n           05 SQLVERSN PIC 99 VALUE 02.\n           05 SQLCODE  PIC S9(9) COMP-5.\n           05 SQLERRM.\n               49 SQLERRML PIC S9(4) COMP-5.\n               49 SQLERRMC PIC X(486).\n           05 SQLERRD OCCURS 6 TIMES PIC S9(9) COMP-5.\n       01 SQLV.\n           05 SQL-ARRSZ  PIC S9(9) COMP-5 VALUE 8.\n           05 SQL-COUNT  PIC S9(9) COMP-5.\n           05 SQL-ADDR   POINTER OCCURS 8 TIMES.\n           05 SQL-LEN    PIC S9(9) COMP-5 OCCURS 8 TIMES.\n           05 SQL-TYPE   PIC X OCCURS 8 TIMES.\n           05 SQL-PREC   PIC X OCCURS 8 TIMES.\n      **********************************************************************\n       01 SQL-STMT-0.\n           05 SQL-IPTR   POINTER.\n           05 SQL-PREP   PIC X VALUE 'N'.\n           05 SQL-OPT    PIC X VALUE SPACE.\n           05 SQL-PARMS  PIC S9(4) COMP-5 VALUE 0.\n           05 SQL-STMLEN PIC S9(4) COMP-5 VALUE 99.\n           05 SQL-STMT   PIC X(99) VALUE 'SELECT ID,FIRST_NAME,LAST_NAME\n      -    ',PHONE,ADDRESS,IS_ENABLED,CREATE_DT,MOD_DT FROM ACCOUNTS ORD\n      -    'ER BY ID;'.\n      **********************************************************************\n       01 SQL-STMT-1.\n           05 SQL-IPTR   POINTER.\n           05 SQL-PREP   PIC X VALUE 'N'.\n           05 SQL-OPT    PIC X VALUE SPACE.\n           05 SQL-PARMS  PIC S9(4) COMP-5 VALUE 0.\n           05 SQL-STMLEN PIC S9(4) COMP-5 VALUE 122.\n           05 SQL-STMT   PIC X(122) VALUE 'SELECT ID,FIRST_NAME,LAST_NAM\n      -    'E,PHONE,ADDRESS,IS_ENABLED,CREATE_DT,MOD_DT FROM ACCOUNTS WH\n      -    'ERE IS_ENABLED = ''N'' ORDER BY ID;'.\n      **********************************************************************\n       01 SQL-STMT-2.\n           05 SQL-IPTR   POINTER.\n           05 SQL-PREP   PIC X VALUE 'N'.\n           05 SQL-OPT    PIC X VALUE SPACE.\n           05 SQL-PARMS  PIC S9(4) COMP-5 VALUE 4.\n           05 SQL-STMLEN PIC S9(4) COMP-5 VALUE 177.\n           05 SQL-STMT   PIC X(177) VALUE 'SELECT ID,FIRST_NAME,LAST_NAM\n      -    'E,PHONE,ADDRESS,IS_ENABLED,CREATE_DT,MOD_DT FROM ACCOUNTS WH\n      -    'ERE FIRST_NAME LIKE ? OR LAST_NAME LIKE ? OR PHONE LIKE ? OR\n      -    ' ADDRESS LIKE ? ORDER BY ID;'.\n      **********************************************************************\n      *******          PRECOMPILER-GENERATED VARIABLES               *******\n       01 SQLV-GEN-VARS.\n           05 SQL-VAR-0001  PIC S9(5) COMP-3.\n      *******       END OF PRECOMPILER-GENERATED VARIABLES           *******\n      **********************************************************************\n\n      *> Variables inside the DECLARE SECTION can be used in\n      *> SQL queries either as input or output. Variables outside of\n      *> this section are local to the program only.\n      *EXEC SQL\n      *    BEGIN DECLARE SECTION\n      *END-EXEC.\n\n      *> Replace values as needed for your own local test environment\n       77  ws-db-connection-string pic x(1024) value\n               'DRIVER={PostgreSQL Unicode};' &\n               'SERVER=localhost;' &\n               'PORT=5432;' &\n               'DATABASE=cobol_db_example;' &\n               'UID=postgres;' &\n               'PWD=password;' &\n               'COMRESSED_PROTO=0;'.\n\n       01  ws-sql-account-record.\n           05  ws-sql-account-id                  pic 9(5).\n           05  ws-sql-account-first-name          pic x(8).\n           05  ws-sql-account-last-name           pic x(8).\n           05  ws-sql-account-phone               pic x(10).\n           05  ws-sql-account-address             pic x(22).\n           05  ws-sql-account-is-enabled          pic x.\n           05  ws-sql-account-create-dt           pic x(20).\n           05  ws-sql-account-mod-dt              pic x(20).\n\n      *> Variables in the WHERE clause require that the string length\n      *> is supplied otherwise with a regular 'PIC X(n)' it will\n      *> include the blank space in any '=' or 'LIKE' operation and\n      *> most likely not match any records. Using the below variable\n      *> declaration ensures that the correct length is passed for the\n      *> text supplied.\n      *>\n      *> More info can be found at this link under the 'Variable-length\n      *> Character Strings' section. Note: level 49 variables are not\n      *> supported so a regular '05' seems to work instead.\n      *> https://www.microfocus.com/documentation/net-express/nx30books/\n       01  ws-search-value.\n           05  ws-search-value-len              pic S9(4) comp-5.\n           05  ws-search-value-text             pic x(50).\n      * WS-SEARCH-VALUE is accepted as VARCHAR(50)\n\n      *EXEC SQL\n      *    END DECLARE SECTION\n      *END-EXEC.\n\n      *> Local variables to the program only. These are not seen by\n      *> the precompiler operation.\n       01  ws-num-accounts                  pic 999 comp.\n\n       01  ws-account-record                occurs 0 to 100 times\n                                            depending on ws-num-accounts\n                                            indexed by ws-account-idx.\n           05  ws-account-id                pic 9(5).\n           05  ws-account-first-name        pic x(8).\n           05  ws-account-last-name         pic x(8).\n           05  ws-account-phone             pic x(10).\n           05  ws-account-address           pic x(22).\n           05  ws-account-is-enabled        pic x.\n               88  ws-account-enabled       value 'Y'.\n               88  ws-account-disabled      value 'N'.\n           05  ws-account-create-dt         pic x(20).\n           05  ws-account-mod-dt            pic x(20).\n\n       01  ws-menu-choice                   pic x.\n\n       01  ws-search-string                 pic x(48).\n\n       01  ws-is-connected-sw               pic a value 'N'.\n           88  ws-is-connected              value 'Y'.\n           88  ws-is-disconnected           value 'N'.\n\n       01  ws-search-again-sw               pic a value 'N'.\n           88  ws-search-again              value 'Y'.\n           88  ws-not-search-again          value 'N'.\n\n       procedure division.\n       main-procedure.\n           display space\n           display \"COBOL SQL DB Example Program\"\n           display \"----------------------------\"\n           display space\n\n      *> Connect to database and check response status.\n      *    EXEC SQL\n      *        CONNECT TO :ws-db-connection-string\n      *    END-EXEC.\n           MOVE 1024 TO SQL-LEN(1)\n           CALL 'OCSQL'    USING WS-DB-CONNECTION-STRING\n                               SQL-LEN(1)\n                               SQLCA\n           END-CALL\n           perform check-sql-state\n           set ws-is-connected to true\n\n      *> Set up cursors for querying records\n      *    EXEC SQL\n      *        DECLARE ACCOUNT-ALL-CUR CURSOR FOR\n      *        SELECT\n      *            ID, FIRST_NAME, LAST_NAME, PHONE,\n      *            ADDRESS, IS_ENABLED, CREATE_DT, MOD_DT\n      *        FROM ACCOUNTS\n      *        ORDER BY ID;\n      *    END-EXEC\n\n           perform check-sql-state\n\n      *    EXEC SQL\n      *        DECLARE ACCOUNT-DISABLED-CUR CURSOR FOR\n      *        SELECT\n      *            ID, FIRST_NAME, LAST_NAME, PHONE,\n      *            ADDRESS, IS_ENABLED, CREATE_DT, MOD_DT\n      *        FROM ACCOUNTS\n      *        WHERE IS_ENABLED = 'N'\n      *        ORDER BY ID;\n      *    END-EXEC\n\n           perform check-sql-state\n\n      *    EXEC SQL\n      *        DECLARE ACCOUNT-QUERY-CUR CURSOR FOR\n      *        SELECT\n      *            ID, FIRST_NAME, LAST_NAME, PHONE,\n      *            ADDRESS, IS_ENABLED, CREATE_DT, MOD_DT\n      *        FROM ACCOUNTS\n      *        WHERE\n      *            FIRST_NAME LIKE :ws-search-value\n      *            OR LAST_NAME LIKE :ws-search-value\n      *            OR PHONE LIKE :ws-search-value\n      *            OR ADDRESS LIKE :ws-search-value\n      *        ORDER BY ID;\n      *    END-EXEC\n\n           perform check-sql-state\n\n      *> Main menu operations\n           perform forever\n               display space\n               display \"1) Display all accounts\"\n               display \"2) Display disabled accounts\"\n               display \"3) Query accounts\"\n               display \"4) Exit\"\n               display \"Selection: \" with no advancing\n               accept ws-menu-choice\n\n               evaluate ws-menu-choice\n\n                   when '1'\n                       perform display-all-accounts\n\n                   when '2'\n                       perform display-disabled-accounts\n\n                   when '3'\n                       perform query-accounts\n\n                   when '4'\n                       exit perform\n\n                   when other\n                       display \"Please make a selection between 1-4\"\n\n               end-evaluate\n           end-perform\n\n      *> Disconnect and exit\n      *    EXEC SQL\n      *        CONNECT RESET\n      *    END-EXEC\n           CALL 'OCSQLDIS' USING SQLCA END-CALL\n           display \"Disconnected.\"\n           display space\n\n           stop run.\n\n\n\n      *> Uses the ACCOUNT-ALL_CUR cursor to query the ACCOUNT table\n      *> for all records. If a record is found, it is moved into the\n      *> ws-account-record table array for display output.\n       display-all-accounts.\n\n      *> Open cursor\n      *    EXEC SQL\n      *        OPEN ACCOUNT-ALL-CUR\n      *    END-EXEC\n           IF SQL-PREP OF SQL-STMT-0 = 'N'\n               MOVE 0 TO SQL-COUNT\n               CALL 'OCSQLPRE' USING SQLV\n                                   SQL-STMT-0\n                                   SQLCA\n           END-IF\n           CALL 'OCSQLOCU' USING SQL-STMT-0\n                               SQLCA\n           END-CALL\n\n           perform check-sql-state\n\n      *> Use cursor to query the database for each record until no more\n      *> are found.\n           move 0 to ws-num-accounts\n           perform with test after until SQLCODE = 100\n      *        EXEC SQL\n      *            FETCH ACCOUNT-ALL-CUR\n      *            INTO\n      *                :ws-sql-account-id,\n      *                :ws-sql-account-first-name,\n      *                :ws-sql-account-last-name,\n      *                :ws-sql-account-phone,\n      *                :ws-sql-account-address,\n      *                :ws-sql-account-is-enabled,\n      *                :ws-sql-account-create-dt,\n      *                :ws-sql-account-mod-dt;\n      *        END-EXEC\n           SET SQL-ADDR(1) TO ADDRESS OF\n             SQL-VAR-0001\n           MOVE '3' TO SQL-TYPE(1)\n           MOVE 3 TO SQL-LEN(1)\n               MOVE X'00' TO SQL-PREC(1)\n           SET SQL-ADDR(2) TO ADDRESS OF\n             WS-SQL-ACCOUNT-FIRST-NAME\n           MOVE 'X' TO SQL-TYPE(2)\n           MOVE 8 TO SQL-LEN(2)\n           SET SQL-ADDR(3) TO ADDRESS OF\n             WS-SQL-ACCOUNT-LAST-NAME\n           MOVE 'X' TO SQL-TYPE(3)\n           MOVE 8 TO SQL-LEN(3)\n           SET SQL-ADDR(4) TO ADDRESS OF\n             WS-SQL-ACCOUNT-PHONE\n           MOVE 'X' TO SQL-TYPE(4)\n           MOVE 10 TO SQL-LEN(4)\n           SET SQL-ADDR(5) TO ADDRESS OF\n             WS-SQL-ACCOUNT-ADDRESS\n           MOVE 'X' TO SQL-TYPE(5)\n           MOVE 22 TO SQL-LEN(5)\n           SET SQL-ADDR(6) TO ADDRESS OF\n             WS-SQL-ACCOUNT-IS-ENABLED\n           MOVE 'X' TO SQL-TYPE(6)\n           MOVE 1 TO SQL-LEN(6)\n           SET SQL-ADDR(7) TO ADDRESS OF\n             WS-SQL-ACCOUNT-CREATE-DT\n           MOVE 'X' TO SQL-TYPE(7)\n           MOVE 20 TO SQL-LEN(7)\n           SET SQL-ADDR(8) TO ADDRESS OF\n             WS-SQL-ACCOUNT-MOD-DT\n           MOVE 'X' TO SQL-TYPE(8)\n           MOVE 20 TO SQL-LEN(8)\n           MOVE 8 TO SQL-COUNT\n           CALL 'OCSQLFTC' USING SQLV\n                               SQL-STMT-0\n                               SQLCA\n           MOVE SQL-VAR-0001 TO WS-SQL-ACCOUNT-ID\n               perform check-sql-state\n\n      *> If found, add to the output record table.\n               if not SQL-NODATA then\n                   add 1 to ws-num-accounts\n\n                   move ws-sql-account-record\n                   to ws-account-record(ws-num-accounts)\n           end-perform\n\n      *> Close cursor so that it can be reused next time paragraph is\n      *> called.\n      *    EXEC SQL\n      *        CLOSE ACCOUNT-ALL-CUR\n      *    END-EXEC\n           CALL 'OCSQLCCU' USING SQL-STMT-0\n                               SQLCA\n           perform check-sql-state\n\n      *> Display output in a nice table like view.\n           perform display-account-results\n\n           exit paragraph.\n\n\n\n\n      *> Uses the ACCOUNT-DISABLED_CUR cursor to query the ACCOUNT table\n      *> for all records where IS_ENABLED is set to 'N'. If a record is\n      *> found, it is moved into the ws-account-record table array for\n      *> display output.\n      *>\n      *> This paragraph is very similar to the display-all-accounts\n      *> paragraph, please see that paragraph for line by line comments\n       display-disabled-accounts.\n\n      *    EXEC SQL\n      *        OPEN ACCOUNT-DISABLED-CUR\n      *    END-EXEC\n           IF SQL-PREP OF SQL-STMT-1 = 'N'\n               MOVE 0 TO SQL-COUNT\n               CALL 'OCSQLPRE' USING SQLV\n                                   SQL-STMT-1\n                                   SQLCA\n           END-IF\n           CALL 'OCSQLOCU' USING SQL-STMT-1\n                               SQLCA\n           END-CALL\n\n           perform check-sql-state\n\n           move 0 to ws-num-accounts\n           perform with test after until SQLCODE = 100\n      *        EXEC SQL\n      *            FETCH ACCOUNT-DISABLED-CUR\n      *            INTO\n      *                :ws-sql-account-id,\n      *                :ws-sql-account-first-name,\n      *                :ws-sql-account-last-name,\n      *                :ws-sql-account-phone,\n      *                :ws-sql-account-address,\n      *                :ws-sql-account-is-enabled,\n      *                :ws-sql-account-create-dt,\n      *                :ws-sql-account-mod-dt;\n      *        END-EXEC\n           SET SQL-ADDR(1) TO ADDRESS OF\n             SQL-VAR-0001\n           MOVE '3' TO SQL-TYPE(1)\n           MOVE 3 TO SQL-LEN(1)\n               MOVE X'00' TO SQL-PREC(1)\n           SET SQL-ADDR(2) TO ADDRESS OF\n             WS-SQL-ACCOUNT-FIRST-NAME\n           MOVE 'X' TO SQL-TYPE(2)\n           MOVE 8 TO SQL-LEN(2)\n           SET SQL-ADDR(3) TO ADDRESS OF\n             WS-SQL-ACCOUNT-LAST-NAME\n           MOVE 'X' TO SQL-TYPE(3)\n           MOVE 8 TO SQL-LEN(3)\n           SET SQL-ADDR(4) TO ADDRESS OF\n             WS-SQL-ACCOUNT-PHONE\n           MOVE 'X' TO SQL-TYPE(4)\n           MOVE 10 TO SQL-LEN(4)\n           SET SQL-ADDR(5) TO ADDRESS OF\n             WS-SQL-ACCOUNT-ADDRESS\n           MOVE 'X' TO SQL-TYPE(5)\n           MOVE 22 TO SQL-LEN(5)\n           SET SQL-ADDR(6) TO ADDRESS OF\n             WS-SQL-ACCOUNT-IS-ENABLED\n           MOVE 'X' TO SQL-TYPE(6)\n           MOVE 1 TO SQL-LEN(6)\n           SET SQL-ADDR(7) TO ADDRESS OF\n             WS-SQL-ACCOUNT-CREATE-DT\n           MOVE 'X' TO SQL-TYPE(7)\n           MOVE 20 TO SQL-LEN(7)\n           SET SQL-ADDR(8) TO ADDRESS OF\n             WS-SQL-ACCOUNT-MOD-DT\n           MOVE 'X' TO SQL-TYPE(8)\n           MOVE 20 TO SQL-LEN(8)\n           MOVE 8 TO SQL-COUNT\n           CALL 'OCSQLFTC' USING SQLV\n                               SQL-STMT-1\n                               SQLCA\n           MOVE SQL-VAR-0001 TO WS-SQL-ACCOUNT-ID\n               perform check-sql-state\n               if not SQL-NODATA then\n                   add 1 to ws-num-accounts\n\n                   move ws-sql-account-record\n                   to ws-account-record(ws-num-accounts)\n           end-perform\n\n      *    EXEC SQL\n      *        CLOSE ACCOUNT-DISABLED-CUR\n      *    END-EXEC\n           CALL 'OCSQLCCU' USING SQL-STMT-1\n                               SQLCA\n           perform check-sql-state\n\n           perform display-account-results\n\n           exit paragraph.\n\n\n\n      *> Queries the ACCOUNT table where the FIRST_NAME, LAST_NAME,\n      *> PHONE, or ADDRESS columns match characters in the search term\n      *> provided.\n      *>\n      *> Using the LIKE or '=' in a SQL query requires that the field\n      *> length passed is the exact length or it will try to match\n      *> blank spaces and ultimately not find any records. To do this,\n      *> we trim the search term using the intrinsic 'trim' function.\n      *> Because we're using the \"LIKE\" keyword, the wildcard '%'\n      *> characters must also be added to the search string manually.\n      *>\n      *> After our search string is set up, we use the intrinsic\n      *> 'stored-char-length' function to get the total character count\n      *> in our search string to use as the length to pass in our\n      *> SQL variable.\n      *>\n      *> After that, this paragraph follows similar to the ones above.\n      *> It uses the ACCOUNT-QUERY-CUR cursor to fetch the matching\n      *> records and load them into the output table.\n       query-accounts.\n\n      *> Keep searching until user decides to not search again.\n           set ws-search-again to true\n\n           perform until not ws-search-again\n\n      *> Get user input for search\n               display space\n               display \"Enter search value: \" with no advancing\n               accept ws-search-string\n\n      *> String trimmed user input into our search variable's text\n      *> value, adding the '%' wildcard characters at the start and\n      *> end of the search string.\n               move spaces to ws-search-value-text\n               string\n                   '%' function trim(ws-search-string) '%'\n                   into ws-search-value-text\n               end-string\n\n      *> Use the stored-char-length function to determine the length\n      *> in characters the search string is and set it in our SQL\n      *> search variable\n               move function stored-char-length(ws-search-value-text)\n               to ws-search-value-len\n\n               display \"Search value: \" ws-search-value-text\n               display \"Length: \" ws-search-value-len\n\n      *> From here, flow follows the other paragraphs. Fetch the records\n      *> and display them.\n      *        EXEC SQL\n      *            OPEN ACCOUNT-QUERY-CUR\n      *        END-EXEC\n           IF SQL-PREP OF SQL-STMT-2 = 'N'\n               SET SQL-ADDR(1) TO ADDRESS OF\n                 WS-SEARCH-VALUE\n               MOVE 'V' TO SQL-TYPE(1)\n               MOVE 50 TO SQL-LEN(1)\n               SET SQL-ADDR(2) TO ADDRESS OF\n                 WS-SEARCH-VALUE\n               MOVE 'V' TO SQL-TYPE(2)\n               MOVE 50 TO SQL-LEN(2)\n               SET SQL-ADDR(3) TO ADDRESS OF\n                 WS-SEARCH-VALUE\n               MOVE 'V' TO SQL-TYPE(3)\n               MOVE 50 TO SQL-LEN(3)\n               SET SQL-ADDR(4) TO ADDRESS OF\n                 WS-SEARCH-VALUE\n               MOVE 'V' TO SQL-TYPE(4)\n               MOVE 50 TO SQL-LEN(4)\n               MOVE 4 TO SQL-COUNT\n               CALL 'OCSQLPRE' USING SQLV\n                                   SQL-STMT-2\n                                   SQLCA\n           END-IF\n           CALL 'OCSQLOCU' USING SQL-STMT-2\n                               SQLCA\n           END-CALL\n\n               perform check-sql-state\n\n               move 0 to ws-num-accounts\n               perform with test after until SQLCODE = 100\n      *            EXEC SQL\n      *                FETCH ACCOUNT-QUERY-CUR\n      *                INTO\n      *                    :ws-sql-account-id,\n      *                    :ws-sql-account-first-name,\n      *                    :ws-sql-account-last-name,\n      *                    :ws-sql-account-phone,\n      *                    :ws-sql-account-address,\n      *                    :ws-sql-account-is-enabled,\n      *                    :ws-sql-account-create-dt,\n      *                    :ws-sql-account-mod-dt;\n      *            END-EXEC\n           SET SQL-ADDR(1) TO ADDRESS OF\n             SQL-VAR-0001\n           MOVE '3' TO SQL-TYPE(1)\n           MOVE 3 TO SQL-LEN(1)\n               MOVE X'00' TO SQL-PREC(1)\n           SET SQL-ADDR(2) TO ADDRESS OF\n             WS-SQL-ACCOUNT-FIRST-NAME\n           MOVE 'X' TO SQL-TYPE(2)\n           MOVE 8 TO SQL-LEN(2)\n           SET SQL-ADDR(3) TO ADDRESS OF\n             WS-SQL-ACCOUNT-LAST-NAME\n           MOVE 'X' TO SQL-TYPE(3)\n           MOVE 8 TO SQL-LEN(3)\n           SET SQL-ADDR(4) TO ADDRESS OF\n             WS-SQL-ACCOUNT-PHONE\n           MOVE 'X' TO SQL-TYPE(4)\n           MOVE 10 TO SQL-LEN(4)\n           SET SQL-ADDR(5) TO ADDRESS OF\n             WS-SQL-ACCOUNT-ADDRESS\n           MOVE 'X' TO SQL-TYPE(5)\n           MOVE 22 TO SQL-LEN(5)\n           SET SQL-ADDR(6) TO ADDRESS OF\n             WS-SQL-ACCOUNT-IS-ENABLED\n           MOVE 'X' TO SQL-TYPE(6)\n           MOVE 1 TO SQL-LEN(6)\n           SET SQL-ADDR(7) TO ADDRESS OF\n             WS-SQL-ACCOUNT-CREATE-DT\n           MOVE 'X' TO SQL-TYPE(7)\n           MOVE 20 TO SQL-LEN(7)\n           SET SQL-ADDR(8) TO ADDRESS OF\n             WS-SQL-ACCOUNT-MOD-DT\n           MOVE 'X' TO SQL-TYPE(8)\n           MOVE 20 TO SQL-LEN(8)\n           MOVE 8 TO SQL-COUNT\n           CALL 'OCSQLFTC' USING SQLV\n                               SQL-STMT-2\n                               SQLCA\n           MOVE SQL-VAR-0001 TO WS-SQL-ACCOUNT-ID\n                   perform check-sql-state\n                   if not SQL-NODATA then\n                       add 1 to ws-num-accounts\n\n                       move ws-sql-account-record\n                       to ws-account-record(ws-num-accounts)\n               end-perform\n\n      *        EXEC SQL\n      *            CLOSE ACCOUNT-QUERY-CUR\n      *        END-EXEC\n           CALL 'OCSQLCCU' USING SQL-STMT-2\n                               SQLCA\n               perform check-sql-state\n\n               perform display-account-results\n\n               display space\n               display \"Search again? (Y/[N]) \" with no advancing\n               accept ws-search-again-sw\n\n               move function upper-case(ws-search-again-sw)\n               to ws-search-again-sw\n\n           end-perform\n\n           exit paragraph.\n\n\n\n      *> Displays the current values of the ws-account-record table\n      *> in a nice table like format.\n       display-account-results.\n\n           display space\n           display \"ACCOUNTS:\"\n           display space\n           display \" ID   | First    | Last     | Phone      |\"\n               \" Address                | Enabled \"\n           end-display\n           display \"------|----------|----------|------------|\"\n               \"------------------------|---------\"\n           end-display\n\n           perform varying ws-account-idx from 1 by 1\n           until ws-account-idx > ws-num-accounts\n\n               display\n                   ws-account-id(ws-account-idx)\n                   \" | \"\n                   ws-account-first-name(ws-account-idx)\n                   \" | \"\n                   ws-account-last-name(ws-account-idx)\n                   \" | \"\n                   ws-account-phone(ws-account-idx)\n                   \" | \"\n                   ws-account-address(ws-account-idx)\n                   \" | \"\n                   ws-account-is-enabled(ws-account-idx)\n               end-display\n\n           end-perform\n           exit paragraph.\n\n\n\n      *> Checks SQLSTATE for any errors. If return value was success or\n      *> \"No data\", the paragraph returns. Otherwise, the error message\n      *> and SQLCODE are displayed to the user. The SQL connection is\n      *> closed and the application terminates.\n      *>\n      *> Note: the SQL related variables can be seen by inspecting the\n      *>       generated COBOL source code by the esqlOC precompiler.\n      *>       These variables will be added to the WORKING-STORAGE\n      *>       SECTION.\n       check-sql-state.\n\n      *> If success or no data, state is still valid, return.\n           if SQL-SUCCESS or SQL-NODATA then\n               exit paragraph\n           end-if\n\n      *> Some sort of error has occurred, display error information to\n      *> the user.\n           display space\n           display \"SQL Error:\"\n           display \"SQLCODE: \" SQLCODE\n           display \"SQLSTATE: \" SQLSTATE\n\n           if SQLERRML > 0 then\n               display \"ERROR MESSAGE: \" SQLERRMC(1:SQLERRML)\n           end-if\n           display space\n\n      *> If error happened after initial connection was established,\n      *> disconnect from the database\n           if ws-is-connected\n      *        EXEC SQL\n      *            CONNECT RESET\n      *        END-EXEC\n           CALL 'OCSQLDIS' USING SQLCA END-CALL\n           end-if\n\n      *> Terminate the application.\n           stop run\n           exit paragraph. *> not reachable, used as paragraph end scope\n\n       end program sql-example.\n      **********************************************************************\n      *******               EMBEDDED SQL VARIABLES USAGE             *******\n      *  .WS-DB-CONNECTION-STRING NOT IN USE\n      *  ACCOUNT-ALL-CUR          IN USE CURSOR\n      *  ACCOUNT-DISABLED-CUR     IN USE CURSOR\n      *  ACCOUNT-QUERY-CUR        IN USE CURSOR\n      *  WS-DB-CONNECTION-STRING     IN USE CHAR(1024)\n      *  WS-SEARCH-VALUE          IN USE VARCHAR(50)\n      *  WS-SEARCH-VALUE-LEN  NOT IN USE\n      *  WS-SEARCH-VALUE-TEXT NOT IN USE\n      *  WS-SEARCH-VALUE.WS-SEARCH-VALUE-LEN NOT IN USE\n      *  WS-SEARCH-VALUE.WS-SEARCH-VALUE-TEXT NOT IN USE\n      *  WS-SQL-ACCOUNT-ADDRESS     IN USE CHAR(22)\n      *  WS-SQL-ACCOUNT-CREATE-DT     IN USE CHAR(20)\n      *  WS-SQL-ACCOUNT-FIRST-NAME     IN USE CHAR(8)\n      *  WS-SQL-ACCOUNT-ID        IN USE THROUGH TEMP VAR SQL-VAR-0001 DECIMAL(5,0)\n      *  WS-SQL-ACCOUNT-IS-ENABLED     IN USE CHAR(1)\n      *  WS-SQL-ACCOUNT-LAST-NAME     IN USE CHAR(8)\n      *  WS-SQL-ACCOUNT-MOD-DT     IN USE CHAR(20)\n      *  WS-SQL-ACCOUNT-PHONE     IN USE CHAR(10)\n      *  WS-SQL-ACCOUNT-RECORD NOT IN USE\n      *  WS-SQL-ACCOUNT-RECORD.WS-SQL-ACCOUNT-ADDRESS NOT IN USE\n      *  WS-SQL-ACCOUNT-RECORD.WS-SQL-ACCOUNT-CREATE-DT NOT IN USE\n      *  WS-SQL-ACCOUNT-RECORD.WS-SQL-ACCOUNT-FIRST-NAME NOT IN USE\n      *  WS-SQL-ACCOUNT-RECORD.WS-SQL-ACCOUNT-ID NOT IN USE\n      *  WS-SQL-ACCOUNT-RECORD.WS-SQL-ACCOUNT-IS-ENABLED NOT IN USE\n      *  WS-SQL-ACCOUNT-RECORD.WS-SQL-ACCOUNT-LAST-NAME NOT IN USE\n      *  WS-SQL-ACCOUNT-RECORD.WS-SQL-ACCOUNT-MOD-DT NOT IN USE\n      *  WS-SQL-ACCOUNT-RECORD.WS-SQL-ACCOUNT-PHONE NOT IN USE\n      **********************************************************************\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "1\n3\nSmith\nY\n2\n3\nJohnson\nN\n3\nSmith\nN\n4"
  }
}