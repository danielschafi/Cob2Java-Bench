{
  "cobol_file": {
    "file_name": "successful_snippet_924ec848.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AOC-2021-12-1.\n       AUTHOR. ANNA KOSIERADZKA.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT INPUTFILE ASSIGN TO \"d12.input\"\n           ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n         FD INPUTFILE.\n         01 INPUTRECORD PIC X(8).       \n         \n       WORKING-STORAGE SECTION.\n         01 FILE-STATUS PIC 9 VALUE 0.\n         01 N PIC 9(3) VALUE 0.\n         01 M PIC 9(3) VALUE 0.\n         01 NODE1 PIC X(5).\n         01 NODE2 PIC X(5).\n\n         01 WS-EDGES OCCURS 64 TIMES.\n           05 V1 PIC X(5).\n           05 V2 PIC X(5).\n\n         01 WS-QUEUE OCCURS 99999 TIMES.\n           05 Q-LEN PIC 9(3).\n           05 Q-V PIC X(5) OCCURS 100 TIMES.\n         \n         77 I PIC 9(3) VALUE 1.\n         77 J PIC 9(3) VALUE 1.\n         77 LEN PIC 9(3) VALUE 1.\n         77 Q1 PIC 9(6) VALUE 1.\n         77 Q2 PIC 9(6) VALUE 0.\n         77 RESULT PIC 9(6) VALUE 0.\n         77 VISITED PIC 9 VALUE 0.\n         \n       PROCEDURE DIVISION.\n       001-MAIN.\n           OPEN INPUT INPUTFILE.\n           PERFORM 002-READ UNTIL FILE-STATUS = 1.\n           CLOSE INPUTFILE.\n           PERFORM 004-TRAVERSE.\n           DISPLAY RESULT.\n           STOP RUN. \n\n       002-READ.\n           READ INPUTFILE\n             AT END MOVE 1 TO FILE-STATUS\n             NOT AT END PERFORM 003-PROCESS-RECORD\n           END-READ.\n\n       003-PROCESS-RECORD.\n           UNSTRING INPUTRECORD DELIMITED BY '-' INTO NODE1 NODE2.\n           ADD 1 TO N.\n           MOVE NODE1 TO V1(N).\n           MOVE NODE2 TO V2(N).\n           ADD 1 TO N.\n           MOVE NODE1 TO V2(N).\n           MOVE NODE2 TO V1(N).           \n\n       004-TRAVERSE.\n           ADD 1 TO Q2.\n           MOVE 1 TO Q-LEN(Q2)\n           MOVE 'start' TO Q-V(Q2, 1).\n\n           PERFORM UNTIL Q1 > Q2\n             MOVE Q-LEN(Q1) TO LEN\n             MOVE Q-V(Q1, LEN) TO NODE1\n             IF NODE1 = 'end' THEN\n               ADD 1 TO RESULT\n             ELSE\n      * Add all adjascent not visited to queue\n               PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n                 IF V1(I) = NODE1 THEN\n                   MOVE V2(I) TO NODE2\n                   MOVE 0 TO VISITED\n                   IF FUNCTION ORD(NODE2(1:1)) > FUNCTION ORD('a') THEN\n                     PERFORM VARYING J FROM 1 BY 1 UNTIL J > LEN\n                       IF Q-V(Q1, J) = NODE2 THEN\n                         MOVE 1 TO VISITED\n                       END-IF\n                     END-PERFORM\n                   END-IF\n                   IF VISITED = 0 THEN\n                     ADD 1 TO Q2\n                     COMPUTE Q-LEN(Q2) = LEN + 1\n                     PERFORM VARYING J FROM 1 BY 1 UNTIL J > LEN\n                       MOVE Q-V(Q1, J) TO Q-V(Q2, J)\n                     END-PERFORM\n                     MOVE NODE2 TO Q-V(Q2, LEN + 1)  \n                   END-IF\n                 END-IF\n               END-PERFORM\n             END-IF\n             ADD 1 TO Q1\n           END-PERFORM.\n"
  },
  "input_files": [
    {
      "file_name": "d12.input",
      "content": "start-A\nA-c\nA-b\nb-d\nA-end\nb-end\nc-A\nstart-b\nd-b\nend-A"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}