{
  "cobol_file": {
    "file_name": "successful_snippet_de5f9260.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AOC-2021-16-1.\n       AUTHOR. ANNA KOSIERADZKA.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT INPUTFILE ASSIGN TO \"d16.input\"\n           ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n\n       FILE SECTION.\n         FD INPUTFILE\n           RECORD IS VARYING IN SIZE FROM 1 to 1318\n           DEPENDING ON REC-LEN.\n         01 INPUTRECORD PIC X(1318).\n\n       WORKING-STORAGE SECTION.\n         01 FILE-STATUS PIC 9 VALUE 0.\n         01 REC-LEN PIC 9(4) COMP.\n         01 N PIC 9(4) VALUE 1.\n         01 WS-BITS PIC 9 VALUE 0 OCCURS 5272 TIMES.\n         01 VAL-DEC PIC 99 VALUE 0.\n         01 VAL-BIN PIC X(16) VALUE SPACE.\n         77 D PIC 9.\n         77 I PIC 9(4) VALUE 1.\n         77 J PIC 9(4) VALUE 1.\n         77 K PIC S9(4) VALUE 1.\n         77 LEN PIC 9(4) VALUE 4.\n         77 T PIC 9.\n         77 X PIC X.\n         77 Y PIC 9(4) VALUE 1.\n         77 RESULT PIC 9(6) VALUE 0.\n\n       PROCEDURE DIVISION.\n       001-MAIN.\n           OPEN INPUT INPUTFILE.\n           PERFORM 002-READ.\n           CLOSE INPUTFILE.           \n           DISPLAY RESULT.\n           STOP RUN.\n\n       002-READ.\n           READ INPUTFILE\n             AT END MOVE 1 TO FILE-STATUS\n             NOT AT END PERFORM 003-PROCESS-RECORD\n           END-READ.\n\n       003-PROCESS-RECORD.\n           MOVE REC-LEN TO N.\n           PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n             MOVE INPUTRECORD(J:1) TO X \n            \n      * A-F = 66-71\n      * 0-9 = 49-58\n             COMPUTE Y = FUNCTION ORD(X)\n             IF Y > 65 THEN \n               SUBTRACT 56 FROM Y\n             ELSE\n               SUBTRACT 49 FROM Y \n             END-IF\n            \n             MOVE Y TO VAL-DEC\n             PERFORM DEC-TO-BIN\n             PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4\n               MOVE VAL-BIN(K:1) TO WS-BITS(4 * J - 4 + K)\n             END-PERFORM  \n           END-PERFORM.\n\n           MOVE 1 TO J.\n           PERFORM 004-PROCESS-PACKET UNTIL J > N * 4 - 11.\n\n       004-PROCESS-PACKET.\n           MOVE 3 TO LEN.\n           MOVE 0 TO VAL-BIN.\n           MOVE 0 TO VAL-DEC.\n      * the first three bits encode the packet version\n           STRING WS-BITS(J) WS-BITS(J + 1) WS-BITS(J + 2) INTO VAL-BIN.\n           PERFORM BIN-TO-DEC.\n           ADD VAL-DEC TO RESULT.\n           ADD 3 TO J.\n\n      * the next three bits encode the packet type ID\n           STRING WS-BITS(J) WS-BITS(J + 1) WS-BITS(J + 2) INTO VAL-BIN.\n           PERFORM BIN-TO-DEC.\n           ADD 3 TO J.\n           IF VAL-DEC = 4 THEN\n             PERFORM 005-PROCESS-PACKET-LITERAL\n           ELSE \n             PERFORM 006-PROCESS-PACKET-OPERATOR  \n           END-IF.\n           \n       005-PROCESS-PACKET-LITERAL.\n      *     DISPLAY '005-PROCESS-PACKET-LITERAL'.\n      * Packets with type ID 4 represent a literal value\n      * Literal value packets encode a single binary number \n      * the binary number is padded with leading zeroes\n      * until its length is a multiple of four bits, \n      * and then it is broken into groups of four bits\n      * Each group is prefixed by a 1 bit except the last group,\n      *  which is prefixed by a 0 bit.\n           MOVE 1 TO Y.\n           PERFORM UNTIL Y = 0\n               MOVE WS-BITS(J) TO Y\n               ADD 5 TO J\n           END-PERFORM.\n\n       006-PROCESS-PACKET-OPERATOR.\n      *     DISPLAY '005-PROCESS-PACKET-OPERATOR'.\n      * An operator packet contains one or more packets.\n      * an operator packet can use one of two modes \n      * indicated by the bit immediately after the packet header\n      \n           MOVE 0 TO VAL-BIN.\n           MOVE WS-BITS(J) TO T.\n           ADD 1 TO J.\n\n      * If the length type ID is 0, \n      * then the next 15 bits are the total length in bits \n      * of the sub-packets contained by this packet.\n           \n           IF T = 0 THEN\n             MOVE 15 TO LEN\n           ELSE\n      * If the length type ID is 1, \n      * then the next 11 bits are the number of sub-packets \n      * immediately contained by this packet.\n             MOVE 11 TO LEN\n           END-IF.\n           ADD LEN TO J.\n\n       DEC-TO-BIN.\n           MOVE SPACE TO VAL-BIN.\n           PERFORM VARYING I FROM LEN BY -1 UNTIL I = 0\n              DIVIDE VAL-DEC BY 2 GIVING VAL-DEC REMAINDER D\n              MOVE D TO VAL-BIN(I:1)\n           END-PERFORM.\n\n       BIN-TO-DEC.\n           MOVE 0 TO VAL-DEC.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LEN\n              COMPUTE VAL-DEC = VAL-DEC * 2\n              IF VAL-BIN(I:1) = 1 THEN \n                 COMPUTE VAL-DEC = VAL-DEC + 1\n              END-IF\n           END-PERFORM.\n"
  },
  "input_files": [
    {
      "file_name": "d16.input",
      "content": "8A004A801A8002F478\n620080001611562C8802118E34\nC0015000016115A2E0802F182340\nA0016C880162017C3686B18A3D4780\n8A004A801A8002F478A0016C880162017C3686B18A3D4780\n620080001611562C8802118E34C0015000016115A2E0802F182340\nD2FE28A0016C880162017C3686B18A3D4780\n9C0141080250320F1802104A08"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}