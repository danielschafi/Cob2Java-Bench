{
  "cobol_file": {
    "file_name": "successful_snippet_53aff788.cob",
    "content": "        >>SOURCE FORMAT FREE\n\nidentification division.\nprogram-id. callISINtest.\ndata division.\nworking-storage section.\n01  ISINtest-result binary-int.\nprocedure division.\nstart-callISINtest.\n    display 'should be valid ' with no advancing\n    call 'ISINtest' using 'US0378331005' ISINtest-result\n    perform display-ISINtest-result\n    display 'should not be valid ' with no advancing\n    call 'ISINtest' using 'US0373831005' ISINtest-result\n    perform display-ISINtest-result\n    display 'should not be valid ' with no advancing\n    call 'ISINtest' using 'U50378331005' ISINtest-result\n    perform display-ISINtest-result\n    display 'should not be valid ' with no advancing\n    call 'ISINtest' using 'US03378331005' ISINtest-result\n    perform display-ISINtest-result\n    display 'should be valid ' with no advancing\n    call 'ISINtest' using 'AU0000XVGZA3' ISINtest-result\n    perform display-ISINtest-result\n    display 'should be valid ' with no advancing\n    call 'ISINtest' using 'AU0000VXGZA3' ISINtest-result\n    perform display-ISINtest-result\n    display 'should be valid ' with no advancing\n    call 'ISINtest' using 'FR0000988040' ISINtest-result\n    perform display-ISINtest-result\n    stop run\n    .\ndisplay-ISINtest-result.\n    evaluate ISINtest-result\n    when 0 \n        display ' is valid'\n    when -1\n        display ' invalid length '\n    when -2\n        display ' invalid countrycode '\n    when -3\n        display ' invalid base36 digit '\n    when -4\n        display ' luhn test failed'\n    when other\n        display ' invalid return code ' ISINtest-result\n    end-evaluate\n    .\nend program callISINtest.\n\nidentification division.\nprogram-id. ISINtest.\ndata division.\nworking-storage section.\n01  country-code-values value\n    'ADAEAFAGAIALAMAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBS'\n&   'BTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEE'\n&   'EGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHM'\n&   'HNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLC'\n&   'LILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNA'\n&   'NCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURW'\n&   'SASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTO'\n&   'TRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW'.\n    03  country-codes occurs 249\n        ascending key country-code\n        indexed by cc-idx.\n        05  country-code pic xx.\n\n01  b pic 99.\n01  base36-digits pic x(36) value\n    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n\n01  i pic 99.\n01  p pic 99.\n01  luhn-number pic x(20).\n01  luhntest-result binary-int.\n\nlinkage section.\n01  test-number any length.\n01  ISINtest-result binary-int.\n\nprocedure division using test-number ISINtest-result.\nstart-ISINtest.\n    display space test-number with no advancing\n\n    \n    if function length(test-number) <> 12\n        move -1 to ISINtest-result\n        goback\n    end-if\n\n    \n    search all country-codes\n    at end\n        move -2 to ISINtest-result\n        goback\n    when test-number(1:2) = country-code(cc-idx)\n        continue \n    end-search\n\n    \n    \n    move 0 to p\n    perform varying i from 1 by 1 until i > 12\n        if test-number(i:1) >= '0' and <= '9'\n            move test-number(i:1) to luhn-number(p + 1:1)\n            add 1 to p\n        else\n            perform varying b from 9 by 1 until b > 35\n            or base36-digits(b + 1:1) = test-number(i:1)\n                continue\n            end-perform\n            if b > 35\n                 move -3 to ISINtest-result\n                 goback\n            end-if\n            move b to luhn-number(p + 1:2)\n            add 2 to p\n        end-if\n    end-perform\n\n    call 'luhntest' using luhn-number(1:p) luhntest-result\n    if luhntest-result <> 0\n        move -4 to ISINtest-result\n        goback\n    end-if\n\n    move 0 to ISINtest-result\n    goback\n    .\nend program ISINtest.\n\nidentification division.\nprogram-id. luhntest.\ndata division.\nworking-storage section.\n01  i pic S99.\n01  check-sum pic 999.\nlinkage section.\n01  test-number any length.\n01  luhntest-result binary-int.\nprocedure division using test-number luhntest-result.\nstart-luhntest.\n    display space test-number with no advancing\n    move 0 to check-sum\n\n    \n    compute i = function length(test-number)\n    perform varying i from i by -2 until i < 1\n        add function numval(test-number(i:1)) to check-sum\n    end-perform\n    display space check-sum with no advancing\n\n    \n    compute i = function length(test-number) - 1\n    perform varying i from i by -2 until i < 1\n        add function numval(test-number(i:1)) to check-sum\n        add function numval(test-number(i:1)) to check-sum\n        \n        if test-number(i:1) >= '5'\n            subtract 9 from check-sum\n        end-if\n    end-perform\n    display space check-sum with no advancing\n\n    if function mod(check-sum,10) = 0\n        move 0 to luhntest-result \n    else\n        move -1 to luhntest-result \n    end-if\n    goback\n    .\nend program luhntest.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}