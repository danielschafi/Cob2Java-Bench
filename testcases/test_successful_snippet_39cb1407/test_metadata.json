{
  "cobol_file": {
    "file_name": "successful_snippet_39cb1407.cob",
    "content": "       >>SOURCE FORMAT FREE\nidentification division.\nprogram-id. 'tokenizewithescaping'.\nenvironment division.\nconfiguration section.\nrepository.\n    function all intrinsic.\ndata division.\nworking-storage section.\n\n01 escape-char pic x value '^'.\n01 separator-char pic x value '|'.\n01 reference-string pic x(64) value\n   'one^|uno||three^^^^|four^^^|^cuatro|'.\n\n01 input-string pic x(64).\n01 c pic 99.\n01 escaped pic x.\n\n01 t pic 99.\n01 t-max pic 99.\n01 t-lim pic 99 value 32.\n01 token-entry occurs 32.\n   03  token-len pic 99.\n   03  token pic x(16).\n\n01 l pic 99.\n01 l-lim pic 99 value 16.\n\n01 error-found pic x.\n\nprocedure division.\nstart-tokenize-with-escaping.\n\n    move reference-string to input-string\n    perform tokenize\n\n    move 'token' to input-string\n    perform tokenize\n   \n    move '^^^^^^^^' to input-string\n    perform tokenize\n   \n    move '||||||||' to input-string\n    perform tokenize\n\n    move all 'token' to input-string\n    perform tokenize\n\n    move all 't|' to input-string\n    perform tokenize\n\n    move spaces to input-string\n    perform tokenize\n\n    display space\n\n    stop run\n    .\ntokenize.\n    display space\n    display 'string:'\n    display input-string\n\n    move 'N' to escaped error-found\n    move 1 to t-max\n    initialize token-entry(t-max)\n    move 0 to l\n\n    perform varying c from 1 by 1 until\n    c > length(input-string)\n    or input-string(c:) = spaces\n\n        evaluate escaped also input-string(c:1)\n        when 'N' also escape-char\n            move 'Y' to escaped\n        when 'N' also separator-char\n            perform increment-t-max\n            if error-found = 'Y'\n                exit paragraph\n            end-if\n        when 'N' also any\n            perform move-c\n            if error-found = 'Y'\n                exit paragraph\n            end-if\n        when 'Y' also any\n            perform move-c\n            if error-found = 'Y'\n                exit paragraph\n            end-if\n            move 'N' to escaped\n        end-evaluate\n\n    end-perform\n    if l > 0\n        move l to token-len(t-max)\n    end-if\n\n    if c = 1\n        display 'no tokens'\n    else\n        display 'tokens:'\n        perform varying t from 1 by 1 until t > t-max\n            if token-len(t) > 0\n                display t ': ' token-len(t) space token(t)\n            else\n                display t ': ' token-len(t)\n            end-if\n        end-perform\n    end-if\n    .\nincrement-t-max.\n    if t-max >= t-lim\n        display 'error: at ' c ' number of tokens exceeds ' t-lim\n        move 'Y' to error-found\n    else\n        move l to token-len(t-max)\n        add 1 to t-max\n        initialize token-entry(t-max)\n        move 0 to l\n        move 'N' to error-found\n    end-if\n    .\nmove-c.\n    if l >= l-lim\n        display 'error: at ' c ' token length exceeds ' l-lim\n        move 'Y' to error-found\n    else\n        add 1 to l\n        move input-string(c:1) to token(t-max)(l:1)\n        move 'N' to error-found\n    end-if\n    .\nend program 'tokenizewithescaping'.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}