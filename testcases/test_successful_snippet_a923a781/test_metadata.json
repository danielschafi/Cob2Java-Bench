{
  "cobol_file": {
    "file_name": "successful_snippet_a923a781.cob",
    "content": "        IDENTIFICATION DIVISION.\n        PROGRAM-ID. HELLO.\n      \n        ENVIRONMENT DIVISION.\n            INPUT-OUTPUT SECTION.\n                FILE-CONTROL.\n                SELECT cable1 ASSIGN TO 'cable1.txt'\n                ORGANIZATION IS LINE SEQUENTIAL. \n                SELECT cable2 ASSIGN TO 'cable2.txt'\n                ORGANIZATION IS LINE SEQUENTIAL. \n\n        DATA DIVISION.\n            FILE SECTION.\n            FD cable1.\n            01 cable1-file.\n                05 cable1-direction PIC A(1).\n                05 cable1-length PIC 9(10).\n            FD cable2.\n            01 cable2-file.\n                05 cable2-direction PIC A(1).\n                05 cable2-length PIC 9(10).\n\n            WORKING-STORAGE SECTION.\n            01 ws-cable-one.\n                03 ws-cable-one-number PIC 9(4).\n                03 ws-cable-one-segment OCCURS 400 TIMES\n                                    INDEXED BY i.\n                    05 ws-cable-one-start-x PIC S9(10).\n                    05 ws-cable-one-start-y PIC S9(10).\n                    05 ws-cable-one-end-x PIC S9(10).\n                    05 ws-cable-one-end-y PIC S9(10).\n                    05 ws-cable-one-len PIC S9(10).\n                    05 ws-cable-one-direction PIC S9(1).\n            01 ws-current-x PIC S9(10) VALUE 0.\n            01 ws-current-y PIC S9(10) VALUE 0.\n            01 ws-new-x PIC S9(10) VALUE 0.\n            01 ws-new-y PIC S9(10) VALUE 0.\n            01 ws-min-x PIC S9(10) VALUE 0.\n            01 ws-max-x PIC S9(10) VALUE 0.\n            01 ws-min-y PIC S9(10) VALUE 0.\n            01 ws-max-y PIC S9(10) VALUE 0.\n            01 ws-found-intersection PIC A(1).\n            01 ws-intersect-x PIC S9(10) VALUE 0.\n            01 ws-intersect-y PIC S9(10) VALUE 0.\n            01 ws-curr-steps1 PIC S9(10) VALUE 0.\n            01 ws-curr-steps2 PIC S9(10) VALUE 0.\n            01 ws-min-steps PIC 9(10) VALUE 9999999999.\n            01 ws-min-intersect-x PIC S9(10) VALUE 0.\n            01 ws-min-intersect-y PIC S9(10) VALUE 0.\n            01 WS-EOF PIC A(1). \n            01 ws-invalid-op PIC A(1). \n      \n            01 ws-dist-tmp1 PIC 9(10) VALUE 0.\n            01 ws-dist-tmp2 PIC 9(10) VALUE 0.\n            01 ws-dist-tot PIC 9(10) VALUE 0.\n      \n\n        PROCEDURE DIVISION.\n            OPEN INPUT cable1.\n                SET i TO 1.\n                PERFORM UNTIL WS-EOF='Y'\n                    MOVE 0 TO cable1-length\n                    MOVE 'N' TO ws-invalid-op\n                    READ cable1\n                        AT END MOVE 'Y' TO WS-EOF\n                        NOT AT END \n                        MOVE function numval (cable1-length)\n                            TO cable1-length\n                        EVALUATE TRUE\n                            WHEN cable1-direction = \"L\"\n                                SUBTRACT cable1-length \n                                    FROM ws-current-x\n                                    GIVING ws-new-x\n                                MOVE -1 TO ws-cable-one-direction(i)\n                            WHEN cable1-direction = \"R\"\n                                ADD cable1-length \n                                    TO ws-current-x\n                                    GIVING ws-new-x\n                                MOVE 1 TO ws-cable-one-direction(i)\n                            WHEN cable1-direction = \"U\"\n                                SUBTRACT cable1-length \n                                    FROM ws-current-y\n                                    GIVING ws-new-y\n                                MOVE -1 TO ws-cable-one-direction(i)\n                            WHEN cable1-direction = \"D\"\n                              ADD cable1-length \n                                    TO ws-current-y\n                                    GIVING ws-new-y\n                              MOVE 1 TO ws-cable-one-direction(i)\n                            WHEN OTHER\n                                MOVE 'Y' TO ws-invalid-op\n                        END-EVALUATE\n                        IF ws-invalid-op NOT = 'Y'\n                        MOVE function min(ws-current-x, ws-new-x)\n                            TO ws-cable-one-start-x(i)\n                        MOVE function min(ws-current-y, ws-new-y) \n                            TO ws-cable-one-start-y(i)\n                        MOVE function max(ws-current-x, ws-new-x)\n                            TO ws-cable-one-end-x(i)\n                        MOVE function max(ws-current-y, ws-new-y)\n                            TO ws-cable-one-end-y(i)\n                        MOVE cable1-length TO  ws-cable-one-len(i)\n                        MOVE ws-new-x TO ws-current-x\n                        MOVE ws-new-y TO ws-current-y\n                        MOVE i TO ws-cable-one-number\n                        SET i UP BY 1\n                        END-IF\n                    END-READ\n                END-PERFORM.\n            CLOSE cable1.\n      \n       SET i TO 1\n       PERFORM UNTIL i > ws-cable-one-number\n          DISPLAY \"start: x: \" ws-cable-one-start-x(i) \n                      \" y: \" ws-cable-one-start-y(i) \n          DISPLAY \"  end: x: \" ws-cable-one-end-x(i) \n                      \" y: \" ws-cable-one-end-y(i) \n          DISPLAY \"  len: \" ws-cable-one-len(i)\n                   \" dir: \" ws-cable-one-direction(i) \n          SET i UP BY 1\n       END-PERFORM\n         MOVE 'N' TO WS-EOF\n         MOVE 0 TO ws-current-x\n         MOVE 0 TO ws-current-y\n         MOVE 0 TO ws-new-x\n         MOVE 0 TO ws-new-y\n      *   DISPLAY \"----------\"\n         OPEN INPUT cable2.\n             PERFORM UNTIL WS-EOF='Y'\n                 MOVE 0 TO cable2-length\n                 MOVE 'N' TO ws-invalid-op\n                 READ cable2\n                     AT END MOVE 'Y' TO WS-EOF\n                     NOT AT END \n                         MOVE function numval (cable2-length)\n                             TO cable2-length\n                         EVALUATE TRUE\n                             WHEN cable2-direction = \"L\"\n                                 SUBTRACT cable2-length \n                                     FROM ws-current-x\n                                     GIVING ws-new-x\n                             WHEN cable2-direction = \"R\"\n                                 ADD cable2-length \n                                     TO ws-current-x\n                                     GIVING ws-new-x\n                             WHEN cable2-direction = \"U\"\n                                 SUBTRACT cable2-length \n                                     FROM ws-current-y\n                                     GIVING ws-new-y\n                             WHEN cable2-direction = \"D\"\n                              ADD cable2-length \n                                     TO ws-current-y\n                                     GIVING ws-new-y\n                             WHEN OTHER\n                                 MOVE 'Y' TO ws-invalid-op\n                         END-EVALUATE\n                 IF ws-invalid-op NOT = 'Y'\n      *               DISPLAY \"start: x: \" ws-current-x\n      *                          \" y: \" ws-current-y\n      *               DISPLAY \"  end: x: \" ws-new-x\n      *                          \" y: \" ws-new-y \n                    SET i TO 1\n                    MOVE 0 TO ws-curr-steps1 \n                    PERFORM UNTIL i > ws-cable-one-number\n                        PERFORM INTERSECTS\n                        IF ws-found-intersection = 'Y'\n                        IF ws-intersect-x NOT = 0 \n                        OR ws-intersect-y NOT = 0 THEN\n                         COMPUTE ws-dist-tmp2 = \n                           function abs(ws-intersect-x - ws-current-x) \n                           + function abs(ws-intersect-y - ws-current-y)\n                         IF ws-cable-one-direction(i) > 0\n                           COMPUTE ws-dist-tmp1 = \n                           function abs(ws-intersect-x \n                                - ws-cable-one-start-x(i)) \n                           + function abs(ws-intersect-y \n                                - ws-cable-one-start-y(i))\n                         ELSE\n                          COMPUTE ws-dist-tmp1 = \n                           function abs(ws-intersect-x \n                                - ws-cable-one-end-x(i)) \n                           + function abs(ws-intersect-y \n                                - ws-cable-one-end-y(i))\n                         END-IF\n                         COMPUTE ws-dist-tot = ws-dist-tmp2 +\n                          ws-dist-tmp1 + ws-curr-steps1 + ws-curr-steps2\n                         IF ws-dist-tot < ws-min-steps\n                            MOVE ws-dist-tot TO ws-min-steps\n                            MOVE ws-intersect-x TO ws-min-intersect-x\n                            MOVE ws-intersect-y TO ws-min-intersect-y\n                         END-IF\n                        END-IF\n                        END-IF\n                        ADD ws-cable-one-len(i) TO ws-curr-steps1\n                        SET i UP BY 1\n                    END-PERFORM\n\n                    ADD cable2-length TO ws-curr-steps2\n\n                    MOVE ws-new-x TO ws-current-x\n                    MOVE ws-new-y TO ws-current-y\n                 END-IF\n                 END-READ\n             END-PERFORM.\n            CLOSE cable2.\n      \n            DISPLAY  \"minX: \" ws-min-intersect-x \n                    \" minY: \" ws-min-intersect-y\n                   \" steps: \" ws-min-steps\n      \n        STOP RUN.\n        \n        INTERSECTS.\n            MOVE 'N' TO ws-found-intersection.\n            MOVE function min(ws-current-x, ws-new-x) TO ws-min-x.\n            MOVE function min(ws-current-y, ws-new-y) TO ws-min-y.\n            MOVE function max(ws-current-x, ws-new-x) TO ws-max-x.\n            MOVE function max(ws-current-y, ws-new-y) TO ws-max-y.\n            IF ws-min-x = ws-max-x THEN\n                IF ws-cable-one-start-x(i) <= ws-min-x AND \n                    ws-cable-one-end-x(i) >= ws-max-x AND\n                    ws-cable-one-start-y(i) >= ws-min-y AND \n                    ws-cable-one-end-y(i) <= ws-max-y THEN\n                        MOVE 'Y' TO ws-found-intersection\n                        MOVE ws-min-x TO ws-intersect-x\n                        MOVE ws-cable-one-start-y(i) TO ws-intersect-y\n                END-IF\n            ELSE\n                IF ws-cable-one-start-y(i) <= ws-min-y AND \n                    ws-cable-one-end-y(i) >= ws-max-y AND\n                    ws-cable-one-start-x(i) >= ws-min-x AND \n                    ws-cable-one-end-x(i) <= ws-max-x THEN\n                        MOVE 'Y' TO ws-found-intersection\n                        MOVE ws-min-y TO ws-intersect-y\n                        MOVE ws-cable-one-start-x(i) TO ws-intersect-x\n                END-IF\n            END-IF.\n            \n"
  },
  "input_files": [
    {
      "file_name": "cable1.txt",
      "content": "R8\nL5\nU3\nD7\nR12\nL6\nU9\nD4\nR15\nL10"
    },
    {
      "file_name": "cable2.txt",
      "content": "R8\nL5\nU3\nD7\nR12\nL6\nU9\nD4\nR15\nL10"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}