{
  "cobol_file": {
    "file_name": "successful_snippet_4a85fe68.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. forest-fire.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       \n       \n       \n       78  IGNITE-PROB                 VALUE 1.\n       78  NEW-TREE-PROB               VALUE 100.\n\n       78  EMPTY-PROB                  VALUE 3333.\n\n       78  AREA-SIZE                   VALUE 40.\n\n       01  sim-table.\n           03  sim-row OCCURS AREA-SIZE TIMES INDEXED BY row-index.\n               05  sim-area OCCURS AREA-SIZE TIMES\n                   INDEXED BY col-index.\n                   07  current-status  PIC 9.\n                       \n                       \n                       88  empty       VALUE 0. \n                       88  tree        VALUE 2. \n                       88  burning     VALUE 4. \n                       \n                   07  next-status     PIC 9.\n                       88  empty       VALUE 0.\n                       88  tree        VALUE 2.\n                       88  burning     VALUE 4.\n    \n       01  rand-num                    PIC 9999.\n        \n       01  next-row                    PIC 9(4).\n       01  next-col                    PIC 9(4).\n\n       01  neighbours-row              PIC 9(4).\n       01  neighbours-col              PIC 9(4).\n\n       PROCEDURE DIVISION.\n       main-line.\n           \n           MOVE FUNCTION RANDOM(FUNCTION CURRENT-DATE (9:8)) TO rand-num\n\n           PERFORM initialise-table\n           PERFORM FOREVER\n               PERFORM show-simulation\n               PERFORM step-simulation\n           END-PERFORM\n\n           GOBACK\n           .\n\n       initialise-table.\n           PERFORM VARYING row-index FROM 1 BY 1\n                   UNTIL AREA-SIZE < row-index\n                   AFTER col-index FROM 1 BY 1\n                       UNTIL AREA-SIZE < col-index\n               PERFORM get-rand-num\n               IF rand-num <= EMPTY-PROB\n                   SET empty OF current-status (row-index, col-index)\n                       TO TRUE\n                   SET empty OF next-status (row-index, col-index)\n                       TO TRUE\n               ELSE\n                   SET tree OF current-status (row-index, col-index)\n                       TO TRUE\n                   SET tree OF next-status (row-index, col-index)\n                       TO TRUE\n               END-IF\n           END-PERFORM\n           .\n\n       show-simulation.\n           PERFORM VARYING row-index FROM 1 BY 1\n                   UNTIL AREA-SIZE < row-index\n                   AFTER col-index FROM 1 BY 1\n                       UNTIL AREA-SIZE < col-index\n                DISPLAY SPACE AT LINE row-index COLUMN col-index\n                    WITH BACKGROUND-COLOR\n                        current-status (row-index, col-index)\n           END-PERFORM\n           .\n\n       \n       step-simulation.\n            PERFORM VARYING row-index FROM 1 BY 1\n                   UNTIL AREA-SIZE < row-index\n                   AFTER col-index FROM 1 BY 1\n                       UNTIL AREA-SIZE < col-index\n                EVALUATE TRUE\n                    WHEN empty OF current-status (row-index, col-index)\n                        PERFORM get-rand-num\n                        IF rand-num <= NEW-TREE-PROB\n                            SET tree OF next-status\n                                 (row-index, col-index) TO TRUE\n                        END-IF\n\n                    WHEN tree OF current-status (row-index, col-index)\n                        PERFORM simulate-tree\n\n                    WHEN burning OF current-status\n                            (row-index, col-index)\n                        SET empty OF next-status (row-index, col-index)\n                            TO TRUE\n                END-EVALUATE\n            END-PERFORM\n\n            PERFORM update-statuses.\n            .\n\n       \n       \n       simulate-tree.\n           \n           COMPUTE next-row = FUNCTION MIN(row-index + 1, AREA-SIZE)\n           COMPUTE next-col = FUNCTION MIN(col-index + 1, AREA-SIZE)\n           \n           COMPUTE neighbours-row = FUNCTION MAX(row-index - 1, 1)\n           COMPUTE neighbours-col = FUNCTION MAX(col-index - 1, 1)\n\n           \n           PERFORM VARYING neighbours-row FROM neighbours-row BY 1\n                   UNTIL next-row < neighbours-row\n               \n               PERFORM VARYING neighbours-col FROM neighbours-col BY 1\n                       UNTIL next-col < neighbours-col\n                   IF neighbours-row = row-index\n                           AND neighbours-col = col-index\n                       EXIT PERFORM CYCLE\n                   END-IF\n                   \n                   IF burning OF current-status\n                           (neighbours-row, neighbours-col)\n                       SET burning OF next-status (row-index, col-index)\n                           TO TRUE\n                       EXIT PARAGRAPH\n                   END-IF\n               END-PERFORM\n\n               \n               COMPUTE neighbours-col =\n                   FUNCTION MAX(neighbours-col - 3, 1)\n           END-PERFORM\n\n           \n           \n           PERFORM get-rand-num\n           IF rand-num <= IGNITE-PROB\n               SET burning OF next-status (row-index, col-index) TO TRUE\n           END-IF\n           .\n\n       update-statuses.\n           PERFORM VARYING row-index FROM 1 BY 1\n                   UNTIL AREA-SIZE < row-index\n                   AFTER col-index FROM 1 BY 1\n                       UNTIL AREA-SIZE < col-index\n               MOVE next-status (row-index, col-index)\n                   TO current-status (row-index, col-index)\n           END-PERFORM\n           .\n\n       \n       get-rand-num.\n           COMPUTE rand-num =\n               FUNCTION MOD(FUNCTION RANDOM * 100000, 10000)\n           .\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}