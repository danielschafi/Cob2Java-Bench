{
  "cobol_file": {
    "file_name": "successful_snippet_4100f2dd.cob",
    "content": "      * Author: Dennis Decker Jensen\n      * Date: 5 July 2015\n      * Purpose: Calculate longest Collatz sequence for number < 1 mio.\n      * Tectonics: cobc -x euler014.cob\n      * Method: The behaviour is similar to calculation of\n      *         a Fibonacci number, i.e. the process grows\n      *         exponentially.\n      *         Use a table to memoize earlier calculated results.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. euler014.\n      ******************************************************************\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  term                            binary-double unsigned.\n       01  term-count                      binary-double unsigned.\n       01  starting-number                 binary-double unsigned.\n       01  collatz-even-test.\n           05  collatz-rem                 binary-double unsigned.\n           05  collatz-div                 binary-double unsigned.\n       01  max-term-count            binary-double unsigned value zero.\n       01  starting-number-max-terms binary-double unsigned value zero.\n       01  collatz-table.\n           05  memo-cur              binary-double unsigned value zero.\n           05  memo                        occurs 1 to 1000000 times\n                                           depending on memo-cur.\n               10 memo-term          binary-double unsigned value zero.\n               10 memo-term-count    binary-double unsigned value zero.\n      ******************************************************************\n       PROCEDURE DIVISION.\n       MAIN-PROCEDURE.\n           perform varying starting-number from 1 by 1\n                   until starting-number >= 1000000\n               move starting-number to term\n               move 1 to term-count\n               perform until term is equal to 1\n                   divide term by 2\n                       giving collatz-div\n                       remainder collatz-rem\n                   end-divide\n                   if collatz-rem = 0\n                       move collatz-div to term\n                   else\n                       compute term = term * 3 + 1\n                           on size error\n                               display\n                                   \"Too big term on \" starting-number\n                       end-compute\n                   end-if\n                   if term <= memo-cur\n                       add memo-term-count(term) to term-count\n                       exit perform\n                   end-if\n                   add 1 to term-count\n               end-perform\n               move starting-number to memo-cur\n               move starting-number to memo-term(memo-cur)\n               move term-count      to memo-term-count(memo-cur)\n               if term-count > max-term-count\n                   move term-count to max-term-count\n                   move starting-number to starting-number-max-terms\n               end-if\n           end-perform\n           display \"Starting number \" starting-number-max-terms \" has \"\n                   max-term-count \" terms in the Collatz chain.\".\n           STOP RUN.\n       END PROGRAM euler014.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}