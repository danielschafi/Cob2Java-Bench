{
  "cobol_file": {
    "file_name": "successful_snippet_0188ccc9.cob",
    "content": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ARITMETICA.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n           77 NUMERO1 PIC 9 VALUE 1.\n           77 NUMERO2 PIC 9 value 2.\n           77 RESULTADO PIC 99 VALUE 1.\n           77 numerogrande PIC s9(10)v99 COMP-3 VALUE ZERO.\n      * El empaquetamiento computacional se usa frecuentemente para reducir el\n      * tama\u00f1o de un archivo.\n      * Existenten distintos tipos de empaquetamiento en COBOL\n      * COMP-1 : usado en la representacion de datos flotantes de precision\n      * simple, de 0 hasta 10**38\n      * COMP-2 : usado en la representacion de datos flotantes de precision\n      * doble, de 0 hasta 10**307\n      * COMP-3 : representa los numeros como BCD, binario codificado en decimal,\n      * permite representar digitos por arriba de 31 decimales. A los cajeros\n      * automaticos les gusta esta representacion. En un byte se almacenan dos\n      * numeros decimales\n      * Decimal:    0     1     2     3     4     5     6     7     8     9\n      * BCD:     0000  0001  0010  0011  0100  0101  0110  0111  1000  1001\n      * COMP-4 : solo puede representar enteros\n      * COMP-5 : similar al comp-4, pero puedes especificar la posicion del punto\n      * decimal, combian la eficiencia del cmp-4 con la exactitud del comp-3, no\n      * se pueden exceder los 18 digitos decimales\n\n       PROCEDURE DIVISION.\n           DISPLAY \"NUMERO1 = \"NUMERO1.\n           DISPLAY \"NUMERO2 = \"NUMERO2.\n      * SUMA\n      * RESULTADO = NUMERO1 + NUMERO2 + 5 + RESULTADO\n           ADD NUMERO1 NUMERO2 5 TO RESULTADO.\n           DISPLAY \"ADD NUMERO1 NUMERO2 5 TO RESULTADO = \"RESULTADO.\n      * RESULTADO = NUMERO1 + NUMERO2 + 5\n           ADD NUMERO1 NUMERO2 5 GIVING RESULTADO.\n           DISPLAY \"ADD NUMERO1 NUMERO2 5 GIVING RESULTADO = \"RESULTADO.\n\n           MOVE 1 TO RESULTADO\n      * RESTA\n      * RESULTADO = NUMERO1 - NUMERO2 - 5 - RESULTADO\n           SUBTRACT NUMERO1 NUMERO2 5 FROM RESULTADO.\n           DISPLAY \"SUBTRACT NUMERO1 NUMERO2 5 FROM RESULTADO:\"RESULTADO.\n      * RESULTADO = NUMERO1 - 5 - NUMERO2\n           SUBTRACT NUMERO1 5 FROM NUMERO2 GIVING RESULTADO.\n      *    Esta instruccion ocupa 72 caracteres en una linea, por lo que ya no es posible colocar mas\n           DISPLAY \"SUBTRACT NUMERO1 5 FROM NUMERO2 GIVING RESULTADO =\"\n      * se emplea el caracter '-' en la columna 7 para indicar que se esta continuando la instruccion de\n      * la linea anterior\n      -RESULTADO.\n\n           MOVE 0 TO RESULTADO.\n      * MULTIPLICACION\n      * RESULTADO = 5 * RESULTADO\n           MULTIPLY 5 BY RESULTADO.\n           DISPLAY \"MULTIPLY 5 BY RESULTADO = \"RESULTADO.\n      * RESULTADO = 5 * NUMERO1\n           MULTIPLY 5 BY NUMERO1 GIVING RESULTADO.\n           DISPLAY \"MULTIPLY 5 BY NUMERO1 GIVING RESULTADO = \"RESULTADO.\n\n           MOVE 10 TO RESULTADO.\n           MOVE 8 TO NUMERO2.\n      * DIVISION\n      * RESULTADO = RESULTADO / 10\n           DIVIDE 10 INTO RESULTADO.\n           DISPLAY \"DIVIDE 10 INTO RESULTADO = \"RESULTADO.\n      * RESULTADO = NUMERO2 / 2\n           DIVIDE 2 INTO NUMERO2 GIVING RESULTADO.\n           DISPLAY \"DIVIDE 2 INTO NUMERO2 GIVING RESULTADO = \"RESULTADO.\n\n      * MIX\n      * COMPUTE evalua una expresion aritmetica\n      * PEMDAS\n      * parentesis exponentes multiplicacion division adicion substraccion\n      * cobol evalua las expresiones aritmeticas en ese orden\n           COMPUTE RESULTADO = (2 + 3) * 5.\n           DISPLAY \"RESULTADO = (2 + 3) * 5 = \"RESULTADO.\n\n      * el ** indica potencia\n           COMPUTE RESULTADO = 3 ** 3.\n           DISPLAY \"RESULTADO = 3 ** 3 = \"RESULTADO.\n\n      *  en C el numero negativo mas peque\u00f1o que se puede almacenar en un\n      * int es (-2147483647-1)\n           move -9000000000.22 to numerogrande\n           display numerogrande.\n\n           STOP RUN.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}