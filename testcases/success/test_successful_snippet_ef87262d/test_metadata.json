{
    "cobol_file": {
        "file_name": "successful_snippet_ef87262d.cob",
        "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AOC-2021-11-2.\n       AUTHOR. ANNA KOSIERADZKA.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT INPUTFILE ASSIGN TO \"d11.input\"\n           ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n         FD INPUTFILE.\n         01 INPUTRECORD PIC 9(10).\n\n       WORKING-STORAGE SECTION.\n         01 FILE-STATUS PIC 9 VALUE 0.\n         01 WS-MAP OCCURS 10 TIMES.\n           05 WS-OCTO PIC 9 OCCURS 10 TIMES.\n         01 WS-FLASHED-ARR OCCURS 10 TIMES.\n           05 WS-FLASHED PIC 9 VALUE 0 OCCURS 10 TIMES.\n         01 WS-MUST-FLASH OCCURS 999999 TIMES.\n           05 WS-MUST-FLASH-X PIC 99.\n           05 WS-MUST-FLASH-Y PIC 99.\n         01 WS-STEP PIC 9(4) VALUE 1.\n         77 I PIC 9(3) VALUE 1.\n         77 J PIC 9(3) VALUE 1.\n         77 K PIC 9(3) VALUE 1.\n         77 L PIC 9(3) VALUE 1.\n         77 X PIC 9(3) VALUE 1.\n         77 Y PIC 9(3) VALUE 1.\n         77 N PIC 9(3) VALUE 10.\n         77 Q1 PIC 9(6) VALUE 1.\n         77 Q2 PIC 9(6) VALUE 0.\n         77 ALL-FLASH PIC 9 VALUE 1.\n\n       PROCEDURE DIVISION.\n       001-MAIN.\n           OPEN INPUT INPUTFILE.\n           PERFORM 002-READ UNTIL FILE-STATUS = 1.\n           CLOSE INPUTFILE.\n           PERFORM 004-STEP 1000 TIMES.\n           STOP RUN. \n           \n       002-READ.\n           READ INPUTFILE\n             AT END MOVE 1 TO FILE-STATUS\n             NOT AT END PERFORM 003-PROCESS-RECORD\n           END-READ.\n\n       003-PROCESS-RECORD.\n           MOVE INPUTRECORD TO WS-MAP(I).\n           ADD 1 TO I.\n\n       004-STEP.\n      * First, the energy level of each octopus increases by 1. \n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n             PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n               MOVE I TO K\n               MOVE J TO L\n               PERFORM 005-INCREASE\n             END-PERFORM\n           END-PERFORM.\n           \n      * Then, any octopus with an energy level greater than 9 flashes. \n      * This increases the energy level of all adjacent octopuses by 1,\n      * including octopuses that are diagonally adjacent.     \n           PERFORM 006-FLASH-LOOP UNTIL Q1 > Q2.\n\n           PERFORM 007-DO-ALL-FLASH.\n\n      * Finally, any octopus that flashed during this step has its energy level\n      * set to 0, as it used all of its energy to flash.     \n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n             PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n               IF WS-FLASHED(I, J) = 1 THEN \n                 MOVE 0 TO WS-OCTO(I, J)\n                 MOVE 0 TO WS-FLASHED(I, J)\n               END-IF\n             END-PERFORM\n           END-PERFORM.\n           \n           ADD 1 TO WS-STEP.\n        \n       005-INCREASE.\n           IF WS-OCTO(K, L) < 9 THEN \n             ADD 1 TO WS-OCTO(K, L)\n           ELSE\n             ADD 1 TO Q2\n             MOVE K TO WS-MUST-FLASH-X(Q2)\n             MOVE L TO WS-MUST-FLASH-Y(Q2)\n           END-IF.\n\n       006-FLASH-LOOP.       \n           MOVE WS-MUST-FLASH-X(Q1) TO X.\n           MOVE WS-MUST-FLASH-Y(Q1) TO Y.\n           ADD 1 TO Q1.\n      \n           IF WS-FLASHED(X, Y) = 1 THEN\n             EXIT PARAGRAPH\n           END-IF.\n           IF WS-OCTO(X, Y) < 9 THEN\n             ADD 1 TO WS-OCTO(X, Y)\n             EXIT PARAGRAPH\n           END-IF.\n\n           MOVE 1 TO WS-FLASHED(X, Y).\n\n           IF X > 1 THEN\n               ADD 1 TO Q2\n               COMPUTE WS-MUST-FLASH-X(Q2) = X - 1\n               COMPUTE WS-MUST-FLASH-Y(Q2) = Y\n\n             IF Y > 1 THEN\n               ADD 1 TO Q2\n               COMPUTE WS-MUST-FLASH-X(Q2) = X - 1\n               COMPUTE WS-MUST-FLASH-Y(Q2) = Y - 1\n             END-IF\n\n             IF Y < N THEN \n               ADD 1 TO Q2\n               COMPUTE WS-MUST-FLASH-X(Q2) = X - 1\n               COMPUTE WS-MUST-FLASH-Y(Q2) = Y + 1\n             END-IF\n\n           END-IF.\n\n           IF X < N THEN\n               ADD 1 TO Q2\n               COMPUTE WS-MUST-FLASH-X(Q2) = X + 1\n               COMPUTE WS-MUST-FLASH-Y(Q2) = Y\n\n             IF Y > 1 THEN\n               ADD 1 TO Q2\n               COMPUTE WS-MUST-FLASH-X(Q2) = X + 1\n               COMPUTE WS-MUST-FLASH-Y(Q2) = Y - 1\n             END-IF\n\n             IF Y < N THEN \n               ADD 1 TO Q2\n               COMPUTE WS-MUST-FLASH-X(Q2) = X + 1\n               COMPUTE WS-MUST-FLASH-Y(Q2) = Y + 1\n             END-IF\n           END-IF.\n\n           IF Y > 1 THEN\n             ADD 1 TO Q2\n             COMPUTE WS-MUST-FLASH-X(Q2) = X\n             COMPUTE WS-MUST-FLASH-Y(Q2) = Y - 1\n           END-IF.\n\n           IF Y < N THEN \n             ADD 1 TO Q2\n             COMPUTE WS-MUST-FLASH-X(Q2) = X\n             COMPUTE WS-MUST-FLASH-Y(Q2) = Y + 1\n           END-IF.\n\n       007-DO-ALL-FLASH.\n           MOVE 1 TO ALL-FLASH.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n             PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n               COMPUTE ALL-FLASH = ALL-FLASH * WS-FLASHED(I, J)\n             END-PERFORM\n           END-PERFORM.\n           IF ALL-FLASH = 1 THEN\n             DISPLAY WS-STEP\n             STOP RUN\n           END-IF.\n"
    },
    "input_files": [
        {
            "file_name": "d11.input",
            "content": "A12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345"
        }
    ],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": null,
    "code_file": "successful_snippet_ef87262d.cob",
    "compiled_file": "successful_snippet_ef87262d",
    "expected_output": ""
}