{
    "cobol_file": {
        "file_name": "successful_snippet_50ed0668.cob",
        "content": "       identification division.\n       program-id. playing-cards.\n\n       environment division.\n       configuration section.\n       repository.\n           function all intrinsic.\n\n       data division.\n       working-storage section.\n       77 card             usage index.\n       01 deck.\n          05 cards occurs 52 times ascending key slot indexed by card.\n             10 slot       pic 99.\n             10 hand       pic 99.\n             10 suit       pic 9.\n             10 symbol     pic x(4).\n             10 rank       pic 99.\n\n       01 filler.\n          05 suit-name     pic x(8) occurs 4 times.\n\n      \n       01 base-s           constant as 4036985504.\n       01 base-h           constant as 4036985520.\n       01 base-d           constant as 4036985728.\n       01 base-c           constant as 4036985744.\n\n       01 sym              pic x(4) comp-x.\n       01 symx             redefines sym pic x(4).\n       77 s                pic 9.\n       77 r                pic 99.\n       77 c                pic 99.\n       77 hit              pic 9.\n       77 limiter          pic 9(6).\n\n       01 spades           constant as 1.\n       01 hearts           constant as 2.\n       01 diamonds         constant as 3.\n       01 clubs            constant as 4.\n\n       01 players          constant as 3.\n       01 cards-per        constant as 5.\n       01 deal             pic 99.\n       01 player           pic 99.\n\n       01 show-tally       pic zz.\n       01 show-rank        pic z(5).\n       01 arg              pic 9(10).\n       \n       procedure division.\n       cards-main.\n       perform seed\n       perform initialize-deck\n       perform shuffle-deck\n       perform deal-deck\n       perform display-hands\n       goback.\n      \n      \n       seed.\n           accept arg from command-line\n           if arg not equal 0 then\n               move random(arg) to c\n           end-if\n       .\n\n       initialize-deck.\n           move \"spades\" to suit-name(spades)\n           move \"hearts\" to suit-name(hearts)\n           move \"diamonds\" to suit-name(diamonds)\n           move \"clubs\" to suit-name(clubs)\n\n           perform varying s from 1 by 1 until s > 4\n                     after r from 1 by 1 until r > 13\n                   compute c = (s - 1) * 13 + r\n                   evaluate s\n                       when spades compute sym = base-s + r\n                       when hearts compute sym = base-h + r\n                       when diamonds compute sym = base-d + r\n                       when clubs compute sym = base-c + r\n                   end-evaluate\n                   if r > 11 then compute sym = sym + 1 end-if\n                   move s to suit(c)\n                   move r to rank(c)\n                   move symx to symbol(c)\n                   move zero to slot(c)\n                   move zero to hand(c)\n           end-perform\n       .\n\n       shuffle-deck.\n           move zero to limiter\n           perform until exit\n               compute c = random() * 52.0 + 1.0\n               move zero to hit\n               perform varying tally from 1 by 1 until tally > 52\n                   if slot(tally) equal c then\n                       move 1 to hit\n                       exit perform\n                   end-if\n                   if slot(tally) equal 0 then\n                       if tally < 52 then move 1 to hit end-if\n                       move c to slot(tally)\n                       exit perform\n                   end-if\n               end-perform\n               if hit equal zero then exit perform end-if\n               if limiter > 999999 then\n                   display \"too many shuffles, deck invalid\" upon syserr\n                   exit perform\n               end-if\n               add 1 to limiter\n           end-perform\n           sort cards ascending key slot\n       .\n\n       display-card.\n       >>IF ENGLISH IS DEFINED\n               move rank(tally) to show-rank\n               evaluate rank(tally) \n                   when 1 display \"  ace\" with no advancing\n                   when 2 thru 10 display show-rank with no advancing\n                   when 11 display \" jack\" with no advancing\n                   when 12 display \"queen\" with no advancing\n                   when 13 display \" king\" with no advancing\n               end-evaluate\n               display \" of \" suit-name(suit(tally)) with no advancing\n       >>ELSE\n               display symbol(tally) with no advancing\n       >>END-IF\n       .\n\n       display-deck.\n           perform varying tally from 1 by 1 until tally > 52\n               move tally to show-tally\n               display \"Card: \" show-tally\n                       \" currently in hand \" hand(tally)\n                       \" is \" with no advancing\n               perform display-card\n               display space\n           end-perform\n       .\n\n       display-hands.\n           perform varying player from 1 by 1 until player > players\n               move player to tally\n               display \"Player \" player \": \" with no advancing\n               perform varying deal from 1 by 1 until deal > cards-per\n                  perform display-card\n                  add players to tally\n               end-perform\n               display space\n           end-perform\n           display \"Stock: \" with no advancing\n           subtract players from tally\n           add 1 to tally\n           perform varying tally from tally by 1 until tally > 52\n               perform display-card\n       >>IF ENGLISH IS DEFINED\n               display space\n       >>END-IF\n           end-perform\n           display space\n       .\n\n       deal-deck.\n           display \"Dealing \" cards-per \" cards to \" players \" players\"\n           move 1 to tally\n           perform varying deal from 1 by 1 until deal > cards-per\n                     after player from 1 by 1 until player > players\n               move player to hand(tally)\n               add 1 to tally\n           end-perform\n       .\n\n       end program playing-cards.\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": {
        "file_name": "sysin.txt",
        "content": "0000000001\n0000000005\n0000000010\n0000000050\n0000000100\n0000000500\n0000001000\n0000000000"
    },
    "code_file": "successful_snippet_50ed0668.cob",
    "compiled_file": "successful_snippet_50ed0668",
    "expected_output": "Dealing 5 cards to 3 players\nPlayer 01: \ud83c\udcb5\ud83c\udcbb\ud83c\udcaa\ud83c\udcce\ud83c\udca4 \nPlayer 02: \ud83c\udcc2\ud83c\udcae\ud83c\udcb3\ud83c\udcb8\ud83c\udca5 \nPlayer 03: \ud83c\udcad\ud83c\udcca\ud83c\udcd9\ud83c\udcba\ud83c\udca2 \nStock: \ud83c\udca7\ud83c\udcc3\ud83c\udcd4\ud83c\udcd8\ud83c\udca8\ud83c\udcd1\ud83c\udcdd\ud83c\udcb6\ud83c\udcb9\ud83c\udca1\ud83c\udcb7\ud83c\udcd5\ud83c\udcc6\ud83c\udcd6\ud83c\udcb1\ud83c\udcd2\ud83c\udcd7\ud83c\udcdb\ud83c\udcc5\ud83c\udcc7\ud83c\udcde\ud83c\udcda\ud83c\udcc4\ud83c\udca6\ud83c\udcbd\ud83c\udccd\ud83c\udca3\ud83c\udcbe\ud83c\udcab\ud83c\udca9\ud83c\udccb\ud83c\udcc1\ud83c\udcb4\ud83c\udcc8\ud83c\udcb2\ud83c\udcc9\ud83c\udcd3 \n",
    "expected_output_files": [],
    "expected_input_output_files": []
}