{
    "cobol_file": {
        "file_name": "successful_snippet_65cb249e.cob",
        "content": "      ******************************************************************\n      * author: Erik Eriksen\n      * date: 2021-08-30\n      * updated: 2022-04-28\n      * purpose: Example using the search and search all syntax.\n      * tectonics: cobc\n      ******************************************************************\n       identification division.\n       program-id. search-example.\n       data division.\n       file section.\n       working-storage section.\n\n      *>   Table must have asc or desc indexed key for binary (\"all\") searching\n      *>   Note: Does not need multiple keys. Multiple keys are just used\n      *>         here to demonstrate that you can have them.\n       01  ws-item-table                occurs 3 times\n                                        ascending key is\n                                        ws-item-id-1, ws-item-id-2\n                                        descending key is\n                                        ws-item-id-3\n                                        indexed by idx.\n           05  ws-item-id-1             pic 9(4).\n           05  ws-item-id-2             pic 9(4).\n           05  ws-item-id-3             pic 9(4).\n           05  ws-item-name             pic x(16).\n           05  ws-item-date.\n               10  ws-item-year         pic 9(4).\n               10  filler               pic x value \"/\".\n               10  ws-item-month        pic 99.\n               10  filler               pic x value \"/\".\n               10  ws-item-day          pic 99.\n\n\n      *> Sequential searching does not require a key or the data to\n      *> be sorted in the table. (But is slower)\n       01  ws-no-key-item-table         occurs 3 times indexed by idx-2.\n           05  ws-no-key-id             pic 9(4).\n           05  ws-no-key-value          pic x(25).\n\n\n       01  ws-accept-id-1               pic 9(4).\n       01  ws-accept-id-2               pic 9(4).\n       01  ws-accept-id-3               pic 9(4).\n\n       procedure division.\n       main-procedure.\n           perform setup-test-data\n\n           display space\n           display \"==================================================\"\n           display \"Searching keyed table using binary search.\"\n           display \"Enter id-1 to search for: \" with no advancing\n           accept ws-accept-id-1\n\n      *>   Binary search - table must be indexed by an asc or desc id\n      *>   and sorted for search to work. MUCH faster than sequential\n      *>   search which does not require any sorting or indexing.\n      *>   Binary search is indicated by the \"SEARCH ALL\" syntax.\n           set idx to 1\n           search all ws-item-table\n               at end\n                   display \"Item not found.\"\n               when ws-item-id-1(idx) = ws-accept-id-1\n                   perform display-found-item\n           end-search\n\n           display space\n           display \"==================================================\"\n           display \"Searching again with all required ids matching.\"\n\n           display \"Enter id-1 to search for: \" with no advancing\n           accept ws-accept-id-1\n\n           display \"Enter id-2 to search for: \" with no advancing\n           accept ws-accept-id-2\n\n           display \"Enter id-3 to search for: \" with no advancing\n           accept ws-accept-id-3\n\n           set idx to 1\n           search all ws-item-table\n               at end\n                   display \"Item not found.\"\n               when ws-item-id-1(idx) = ws-accept-id-1 and\n                   ws-item-id-2(idx) = ws-accept-id-2 and\n                   ws-item-id-3(idx) = ws-accept-id-3\n                   perform display-found-item\n           end-search\n\n      *> Sequential searches are slower but also don't require the data\n      *> to be sorted or require a key.\n           display space\n           display \"==================================================\"\n           display \"Searching not keyed table using sequential search.\"\n           display \"Enter id: \" with no advancing\n           accept ws-accept-id-1\n\n           set idx-2 to 1\n           search ws-no-key-item-table\n               at end\n                   display \"Item not found.\"\n               when ws-no-key-id(idx-2) = ws-accept-id-1\n                   display \" Record found:\"\n                   display \"---------------\"\n                   display \"   ws-no-key-id: \" ws-no-key-id(idx-2)\n                   display \"ws-no-key-value: \" ws-no-key-value(idx-2)\n                   display space\n           end-search\n\n           display space\n\n           stop run.\n\n       display-found-item.\n           display \" Record found:\"\n           display \"----------------\"\n           display \"Item id-1: \" ws-item-id-1(idx)\n           display \"Item id-2: \" ws-item-id-2(idx)\n           display \"Item id-3: \" ws-item-id-3(idx)\n           display \"Item Name: \" ws-item-name(idx)\n           display \"Item Date: \" ws-item-date(idx)\n           display space\n           exit paragraph.\n\n\n       setup-test-data.\n\n           move 0001 to ws-item-id-1(1)\n           move 0101 to ws-item-id-2(1)\n           move 0500 to ws-item-id-3(1)\n           move \"test item 1\" to ws-item-name(1)\n           move \"2021/01/01\" to ws-item-date(1)\n\n           move 0002 to ws-item-id-1(2)\n           move 0102 to ws-item-id-2(2)\n           move 0499 to ws-item-id-3(2)\n           move \"test item 2\" to ws-item-name(2)\n           move \"2021/02/02\" to ws-item-date(2)\n\n           move 0003 to ws-item-id-1(3)\n           move 0103 to ws-item-id-2(3)\n           move 0498 to ws-item-id-3(3)\n           move \"test item 3\" to ws-item-name(3)\n           move \"2021/03/03\" to ws-item-date(3)\n\n           move 2 to ws-no-key-id(1)\n           move \"Value of id 2.\" to ws-no-key-value(1)\n\n           move 3 to ws-no-key-id(2)\n           move \"Value of id 3.\" to ws-no-key-value(2)\n\n           move 1 to ws-no-key-id(3)\n           move \"Value of id 1.\" to ws-no-key-value(3)\n\n           exit paragraph.\n\n       end program search-example.\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": {
        "file_name": "sysin.txt",
        "content": "0012\n0024\n0036\n0048\n0060\n0072\n0084\n0096\n9999"
    },
    "code_file": "successful_snippet_65cb249e.cob",
    "compiled_file": "successful_snippet_65cb249e",
    "expected_output": " \n==================================================\nSearching keyed table using binary search.\nEnter id-1 to search for: Item not found.\n \n==================================================\nSearching again with all required ids matching.\nEnter id-1 to search for: Enter id-2 to search for: Enter id-3 to search for: Item not found.\n \n==================================================\nSearching not keyed table using sequential search.\nEnter id: Item not found.\n \n"
}