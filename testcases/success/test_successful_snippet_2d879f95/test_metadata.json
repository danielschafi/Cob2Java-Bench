{
    "cobol_file": {
        "file_name": "successful_snippet_2d879f95.cob",
        "content": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CICLOS.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n              77 COUNTER PIC 9(2).\n              77 COUNTER-2 PIC 9(2).\n\n       PROCEDURE DIVISION.\n      * REPITE 2 VECES UN BLOQUE DE SENTENCIAS\n           PERFORM 2 times\n      * las intrucciones dentro de un PERFORM no llevan \"punto\"\n              display \"HOLA\"\n      * el \"punto\" se coloca despues del END-PERFORM.\n           END-PERFORM.\n           DISPLAY \"------------------------------------------------\".\n\n      * CREA UN FOR AUMENTANDO DE 1 EN 1 EL COUNTER, hasta el 4\n      * for (COUNTER = 1, COUNTER<4, COUNTER++ )\n           PERFORM varying COUNTER from 01 BY 1 until COUNTER equal 4\n              DISPLAY \"Counter = \"COUNTER\n           END-PERFORM.\n           DISPLAY \"------------------------------------------------\".\n\n      * CREA UN FOR ANIDADO\n           PERFORM varying COUNTER from 01 BY 1 until COUNTER equal 3\n            after  COUNTER-2 from 01 BY 1 until COUNTER-2 equal 3\n              DISPLAY \"Counter = \"COUNTER\n              DISPLAY \"Counter-2 = \"COUNTER-2\n            DISPLAY \"- - - -  - - - - - - - - - - - \"\n           END-PERFORM.\n           DISPLAY \"------------------------------------------------\".\n\n      * CREA UN WHILE AUMENTANDO DE 1 EN 1 EL COUNTER\n           MOVE 0 TO COUNTER.\n           PERFORM until COUNTER = 5\n              DISPLAY \"Counter = \"COUNTER\n              ADD 1 TO COUNTER giving COUNTER\n           END-PERFORM.\n           DISPLAY \"------------------------------------------------\".\n\n\n      * CREA UN DO-WHILE AUMENTANDO DE 1 EN 1 EL COUNTER\n           MOVE 0 TO COUNTER.\n           PERFORM WITH test after until COUNTER = 5\n              DISPLAY \"Counter = \"COUNTER\n              ADD 1 TO COUNTER giving COUNTER\n           END-PERFORM.\n           DISPLAY \"------------------------------------------------\".\n\n      * los parrafos cumplen la funcion de \"etiquetas\", permiten agrupar\n      * codigo, para despues ser \"llamadas\" o \"saltar\" a estas\n           parrafo1.\n      * PERFORM al saltar al parrafo2 una vez se ha ejecutado retorna a la linea\n      * donde fue invocado, a diferencia de GO TO que continua la ejecucion del\n      * programa en el punto donde se quedo\n           PERFORM parrafo2 3 TIMES.\n           STOP RUN.\n\n           parrafo2.\n           DISPLAY \"soy una instruccion en el parrafo2\".\n\n           parrafo3.\n           DISPLAY \"soy una instruccion en el parrafo3\".\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": null,
    "code_file": "successful_snippet_2d879f95.cob",
    "compiled_file": "successful_snippet_2d879f95",
    "expected_output": "HOLA\nHOLA\n------------------------------------------------\nCounter = 01\nCounter = 02\nCounter = 03\n------------------------------------------------\nCounter = 01\nCounter-2 = 01\n- - - -  - - - - - - - - - - - \nCounter = 01\nCounter-2 = 02\n- - - -  - - - - - - - - - - - \nCounter = 02\nCounter-2 = 01\n- - - -  - - - - - - - - - - - \nCounter = 02\nCounter-2 = 02\n- - - -  - - - - - - - - - - - \n------------------------------------------------\nCounter = 00\nCounter = 01\nCounter = 02\nCounter = 03\nCounter = 04\n------------------------------------------------\nCounter = 00\nCounter = 01\nCounter = 02\nCounter = 03\nCounter = 04\n------------------------------------------------\nsoy una instruccion en el parrafo2\nsoy una instruccion en el parrafo2\nsoy una instruccion en el parrafo2\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}