{
    "cobol_file": {
        "file_name": "successful_snippet_6fdf2e3f.cob",
        "content": "       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n      * \n      * This solves both the first and second puzzles for day 11. \n      * \n      * \n       Program-ID. cs11a.\n       Environment Division.\n       Input-Output Section.\n       File-Control.\n           Select INPT-DATA            Assign Keyboard.\n       Data Division.\n       File Section.\n       FD  INPT-DATA.\n       01  INPT-DATA-REC-MAX PIC X(4096).\n\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  MYNAME             PIC X(008)         VALUE 'cs11a'.\n           05  WS-INIT            PIC X(010)         VALUE 'initial'.\n\n       01  WORK-AREAS.\n           05  WS-REC-COUNT       PIC 9(009) COMP    VALUE 0.\n           05  NB-STEPS           PIC 9(009) COMP    VALUE 0.\n           05  ROW-IDX            PIC S9(009) COMP   VALUE 0.\n           05  COL-IDX            PIC S9(009) COMP   VALUE 0.\n           05  STEP-COUNT         PIC 9(018)  COMP   VALUE 0.\n           05  NB-STEPS-X         PIC X(004)         VALUE LOW-VALUES.\n           05  CLI-ARGS           PIC X(080)         VALUE LOW-VALUES.\n\n       01  WS-INPT-DATA.\n           05  WS-INPT            PIC X(4096)        VALUE SPACES.\n\n       01  SWITCHES.\n           05  INPT-DATA-EOF-SW   PIC X(001)         VALUE 'N'.\n               88  INPT-DATA-EOF                     VALUE 'Y'.\n           05  PROCESS-SW         PIC X(004)         VALUE LOW-VALUES.\n               88  PROCESS-TEST                      VALUE 'TEST'.\n           05  ALL-FLASHED-SW     PIC X(001)         VALUE 'N'.\n               88  ALL-FLASHED                       VALUE 'Y'\n                                                     FALSE 'N'.\n\n       01  OCTOPUS-TABLE EXTERNAL.\n           05  OCTO-ROW OCCURS 10 TIMES.\n               10  OCTO-COL OCCURS 10 TIMES.\n                   15  OCTO-E-LVL      PIC 9(004) COMP.\n                   15  OCTO-FLASHED-SW PIC X(001).\n                       88  OCTO-FLASHED              VALUE 'Y'\n                                                     FALSE 'N'.\n       77  TOTAL-FLASHES EXTERNAL PIC 9(018).\n       77  PROCESS-TYPE  EXTERNAL PIC X(004).\n\n       Procedure Division.\n           DISPLAY MYNAME SPACE FUNCTION CURRENT-DATE\n\n           INITIALIZE TOTAL-FLASHES\n\n           ACCEPT CLI-ARGS FROM COMMAND-LINE\n           UNSTRING CLI-ARGS DELIMITED SPACE OR LOW-VALUE\n             INTO PROCESS-TYPE NB-STEPS-X\n           END-UNSTRING\n\n           MOVE FUNCTION UPPER-CASE(PROCESS-TYPE)\n             TO PROCESS-SW\n\n           MOVE FUNCTION NUMVAL(NB-STEPS-X) TO NB-STEPS\n\n           DISPLAY MYNAME ' number of steps ' NB-STEPS\n\n           OPEN INPUT INPT-DATA\n\n           PERFORM 8010-READ-INPT-DATA\n\n           PERFORM 1000-LOAD-INPUT UNTIL INPT-DATA-EOF\n\n           CLOSE INPT-DATA\n\n           PERFORM 2000-PROCESS-INPUT NB-STEPS TIMES\n\n           DISPLAY MYNAME ' total flashes   ' TOTAL-FLASHES\n           DISPLAY MYNAME ' records read    ' WS-REC-COUNT\n\n           DISPLAY MYNAME SPACE FUNCTION CURRENT-DATE\n\n           GOBACK.\n\n       1000-LOAD-INPUT.\n           ADD 1 TO ROW-IDX\n           MOVE 0 TO COL-IDX\n           PERFORM UNTIL COL-IDX > 10\n             ADD 1 TO COL-IDX\n             MOVE FUNCTION NUMVAL(WS-INPT(COL-IDX:1))\n               TO OCTO-E-LVL(ROW-IDX,COL-IDX)\n             SET  OCTO-FLASHED(ROW-IDX,COL-IDX) TO FALSE\n           END-PERFORM\n\n           PERFORM 8010-READ-INPT-DATA\n           .\n\n       2000-PROCESS-INPUT.\n           PERFORM VARYING ROW-IDX FROM 1 BY 1\n           UNTIL ROW-IDX > 10\n           AFTER COL-IDX FROM 1 BY 1\n           UNTIL COL-IDX > 10\n             ADD 1 TO OCTO-E-LVL(ROW-IDX,COL-IDX)\n           END-PERFORM\n\n           IF PROCESS-TEST\n               DISPLAY ' intermediate after adding 1'\n               CALL 'octodump' USING MYNAME END-CALL\n           END-IF\n\n           PERFORM VARYING ROW-IDX FROM 1 BY 1\n           UNTIL ROW-IDX > 10\n           AFTER COL-IDX FROM 1 BY 1\n           UNTIL COL-IDX > 10\n             IF OCTO-E-LVL(ROW-IDX,COL-IDX) > 9\n                 CALL 'flasher' USING\n                   ROW-IDX\n                   COL-IDX\n                   WS-INIT\n                 END-CALL\n             END-IF\n           END-PERFORM\n\n           IF PROCESS-TEST\n               DISPLAY MYNAME ' intermediate after calling flasher'\n               CALL 'octodump' USING MYNAME END-CALL\n           END-IF\n\n           ADD 1 TO STEP-COUNT\n           SET ALL-FLASHED TO TRUE\n           PERFORM VARYING ROW-IDX FROM 1 BY 1\n           UNTIL ROW-IDX > 10\n           AFTER COL-IDX FROM 1 BY 1\n           UNTIL COL-IDX > 10\n             IF OCTO-FLASHED(ROW-IDX,COL-IDX)\n                 MOVE 0 TO OCTO-E-LVL(ROW-IDX,COL-IDX)\n                 SET  OCTO-FLASHED(ROW-IDX,COL-IDX) TO FALSE\n             ELSE\n                 SET ALL-FLASHED TO FALSE\n             END-IF\n           END-PERFORM\n\n           IF ALL-FLASHED\n               DISPLAY MYNAME ' all flashed on step ' STEP-COUNT\n           END-IF\n\n           IF PROCESS-TEST\n               DISPLAY MYNAME\n               CALL 'octodump' USING MYNAME END-CALL\n           END-IF\n           .\n\n       8010-READ-INPT-DATA.\n           INITIALIZE WS-INPT-DATA\n           READ INPT-DATA INTO WS-INPT-DATA\n             AT END SET INPT-DATA-EOF TO TRUE\n             NOT AT END\n               ADD 1 TO WS-REC-COUNT\n           END-READ\n\n           .\n\n       END PROGRAM cs11a.\n\n       ID Division.\n       Program-ID. flasher Recursive.\n       Data Division.\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  MYNAME             PIC X(008) VALUE 'flasher'.\n           05  WS-NORTH           PIC X(010) VALUE 'north'.\n           05  WS-NORTHEAST       PIC X(010) VALUE 'northeast'.\n           05  WS-EAST            PIC X(010) VALUE 'east'.\n           05  WS-SOUTHEAST       PIC X(010) VALUE 'southeast'.\n           05  WS-SOUTH           PIC X(010) VALUE 'south'.\n           05  WS-SOUTHWEST       PIC X(010) VALUE 'southwest'.\n           05  WS-WEST            PIC X(010) VALUE 'west'.\n           05  WS-NORTHWEST       PIC X(010) VALUE 'northwest'.\n\n       01  OCTOPUS-TABLE EXTERNAL.\n           05  OCTO-ROW OCCURS 10 TIMES.\n               10  OCTO-COL OCCURS 10 TIMES.\n                   15  OCTO-E-LVL      PIC 9(004) COMP.\n                   15  OCTO-FLASHED-SW PIC X(001).\n                       88  OCTO-FLASHED              VALUE 'Y'\n                                                     FALSE 'N'.\n       77  TOTAL-FLASHES EXTERNAL PIC 9(018).\n       77  PROCESS-TYPE  EXTERNAL PIC X(004).\n\n       Local-Storage Section.\n       01  WORK-AREAS.\n           05  INIT-ROW-IDX       PIC S9(009) COMP   VALUE 0.\n           05  INIT-COL-IDX       PIC S9(009) COMP   VALUE 0.\n           05  ROW-IDX            PIC S9(009) COMP   VALUE 0.\n           05  COL-IDX            PIC S9(009) COMP   VALUE 0.\n\n       Linkage Section.\n       01  LS-ROW                 PIC S9(009) COMP.\n       01  LS-COL                 PIC S9(009) COMP.\n       01  LS-DIR                 PIC X(010).\n\n       Procedure Division Using\n           LS-ROW\n           LS-COL\n           LS-DIR\n         .\n\n           MOVE LS-ROW TO INIT-ROW-IDX\n           MOVE LS-COL TO INIT-COL-IDX\n\n           IF PROCESS-TYPE = 'test'\n               DISPLAY MYNAME ' called with '\n                 INIT-ROW-IDX ' ' INIT-COL-IDX\n                 ' ' LS-DIR\n           END-IF\n\n           IF INIT-ROW-IDX < 1  OR INIT-COL-IDX < 1\n           OR INIT-ROW-IDX > 10 OR INIT-COL-IDX > 10\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' out of range goback'\n               END-IF\n               GOBACK\n           END-IF\n\n           ADD 1 TO OCTO-E-LVL(INIT-ROW-IDX,INIT-COL-IDX)\n           IF OCTO-E-LVL(INIT-ROW-IDX,INIT-COL-IDX) > 9\n               IF OCTO-FLASHED(INIT-ROW-IDX,INIT-COL-IDX)\n                   IF PROCESS-TYPE = 'test'\n                       DISPLAY MYNAME ' flashed goback'\n                   END-IF\n                   GOBACK\n               ELSE\n                   SET OCTO-FLASHED(INIT-ROW-IDX,INIT-COL-IDX) TO TRUE\n                   ADD 1 TO TOTAL-FLASHES\n               END-IF\n           ELSE\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' e-lvl <= 9 goback'\n               END-IF\n               GOBACK\n           END-IF\n\n      *    north\n               COMPUTE ROW-IDX = INIT-ROW-IDX - 1\n               COMPUTE COL-IDX = INIT-COL-IDX\n               CALL 'flasher' USING\n                 ROW-IDX\n                 COL-IDX\n                 WS-NORTH\n               END-CALL\n\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' after north with '\n                     INIT-ROW-IDX ' ' INIT-COL-IDX\n                   CALL 'octodump' USING MYNAME END-CALL\n               END-IF\n\n      *    northeast\n               COMPUTE ROW-IDX = INIT-ROW-IDX - 1\n               COMPUTE COL-IDX = INIT-COL-IDX + 1\n               CALL 'flasher' USING\n                 ROW-IDX\n                 COL-IDX\n                 WS-NORTHEAST\n               END-CALL\n\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' after northeast with '\n                     INIT-ROW-IDX ' ' INIT-COL-IDX\n                   CALL 'octodump' USING MYNAME END-CALL\n               END-IF\n\n      *    east\n               COMPUTE ROW-IDX = INIT-ROW-IDX\n               COMPUTE COL-IDX = INIT-COL-IDX + 1\n               CALL 'flasher' USING\n                 ROW-IDX\n                 COL-IDX\n                 WS-EAST\n               END-CALL\n\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' after east with '\n                     INIT-ROW-IDX ' ' INIT-COL-IDX\n                   CALL 'octodump' USING MYNAME END-CALL\n               END-IF\n\n      *    southeast\n               COMPUTE ROW-IDX = INIT-ROW-IDX + 1\n               COMPUTE COL-IDX = INIT-COL-IDX + 1\n               CALL 'flasher' USING\n                 ROW-IDX\n                 COL-IDX\n                 WS-SOUTHEAST\n               END-CALL\n\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' after southeast with '\n                     INIT-ROW-IDX ' ' INIT-COL-IDX\n                   CALL 'octodump' USING MYNAME END-CALL\n               END-IF\n\n      *    south\n               COMPUTE ROW-IDX = INIT-ROW-IDX + 1\n               COMPUTE COL-IDX = INIT-COL-IDX\n               CALL 'flasher' USING\n                 ROW-IDX \n                 COL-IDX\n                 WS-SOUTH\n               END-CALL\n \n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' after south with '\n                     INIT-ROW-IDX ' ' INIT-COL-IDX\n                   CALL 'octodump' USING MYNAME END-CALL\n               END-IF\n\n      *    southwest\n               COMPUTE ROW-IDX = INIT-ROW-IDX + 1\n               COMPUTE COL-IDX = INIT-COL-IDX - 1\n               CALL 'flasher' USING\n                 ROW-IDX \n                 COL-IDX\n                 WS-SOUTHWEST\n               END-CALL\n\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' after southwest with '\n                     INIT-ROW-IDX ' ' INIT-COL-IDX\n                   CALL 'octodump' USING MYNAME END-CALL\n               END-IF\n\n      *    west\n               COMPUTE ROW-IDX = INIT-ROW-IDX\n               COMPUTE COL-IDX = INIT-COL-IDX - 1\n               CALL 'flasher' USING\n                 ROW-IDX\n                 COL-IDX\n                 WS-WEST\n               END-CALL\n\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' after west with '\n                     INIT-ROW-IDX ' ' INIT-COL-IDX\n                   CALL 'octodump' USING MYNAME END-CALL\n               END-IF\n\n      *    northwest\n               COMPUTE ROW-IDX = INIT-ROW-IDX - 1\n               COMPUTE COL-IDX = INIT-COL-IDX - 1\n               CALL 'flasher' USING\n                 ROW-IDX\n                 COL-IDX\n                 WS-NORTHWEST\n               END-CALL\n\n               IF PROCESS-TYPE = 'test'\n                   DISPLAY MYNAME ' after northwest with ' \n                    INIT-ROW-IDX ' ' INIT-COL-IDX\n                   CALL 'octodump' USING MYNAME END-CALL\n               END-IF\n\n           IF PROCESS-TYPE = 'test'\n               DISPLAY MYNAME ' goback with '\n                 INIT-ROW-IDX ' ' INIT-COL-IDX\n           END-IF\n           GOBACK.\n\n       END PROGRAM flasher.\n\n       ID Division.\n       Program-ID. octodump.\n       Data Division.\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  MYNAME             PIC X(008) VALUE 'octodump'.\n\n       01  WORK-AREAS.\n           05  ROW-IDX            PIC S9(009) COMP   VALUE 0.\n           05  COL-IDX            PIC S9(009) COMP   VALUE 0.\n\n       01  OCTOPUS-TABLE EXTERNAL.\n           05  OCTO-ROW OCCURS 10 TIMES.\n               10  OCTO-COL OCCURS 10 TIMES.\n                   15  OCTO-E-LVL      PIC 9(004) COMP.\n                   15  OCTO-FLASHED-SW PIC X(001).\n                       88  OCTO-FLASHED              VALUE 'Y'\n                                                     FALSE 'N'.\n       77  TOTAL-FLASHES EXTERNAL PIC 9(018).\n\n       Linkage Section.\n       01  LS-NAME                PIC X(008).\n       Procedure Division Using\n           LS-NAME\n         .\n           PERFORM VARYING ROW-IDX FROM 1 BY 1\n           UNTIL ROW-IDX > 10\n             DISPLAY LS-NAME WITH NO ADVANCING\n             PERFORM VARYING COL-IDX FROM 1 BY 1\n             UNTIL COL-IDX > 10\n               DISPLAY SPACE OCTO-E-LVL(ROW-IDX,COL-IDX)\n                 WITH NO ADVANCING\n             END-PERFORM\n             DISPLAY SPACE\n           END-PERFORM\n           .\n\n       END PROGRAM octodump.\n\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": {
        "file_name": "sysin.txt",
        "content": "PROCESS-TYPE1 NB-STEPS-100                                                                  \nPROCESS-TYPE2 NB-STEPS-200                                                                  \nPROCESS-TYPE3 NB-STEPS-300                                                                  \nPROCESS-TYPE4 NB-STEPS-400                                                                  \nPROCESS-TYPE5 NB-STEPS-500                                                                  \nPROCESS-TYPE6 NB-STEPS-600                                                                  \nPROCESS-TYPE7 NB-STEPS-700                                                                  \nPROCESS-TYPE8 NB-STEPS-800"
    },
    "code_file": "successful_snippet_6fdf2e3f.cob",
    "compiled_file": "successful_snippet_6fdf2e3f",
    "expected_output": "cs11a    2025100900103860+0200\ncs11a    number of steps 000000000\ncs11a    total flashes   000000000000000000\ncs11a    records read    000000008\ncs11a    2025100900103860+0200\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}