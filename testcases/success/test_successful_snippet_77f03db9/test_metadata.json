{
    "cobol_file": {
        "file_name": "successful_snippet_77f03db9.cob",
        "content": "       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n      *\n       Program-ID. cs08b.\n       Environment Division.\n       Input-Output Section.\n       File-Control.\n           Select INPT-DATA            Assign Keyboard.\n       Data Division.\n       File Section.\n       FD  INPT-DATA.\n       01  INPT-DATA-REC-MAX PIC X(4096).\n\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  MYNAME             PIC X(008) VALUE 'cs08b'.\n\n       01  WORK-AREAS.\n           05  WS-REC-COUNT       PIC 9(009) COMP    VALUE 0.\n           05  ENTRY-COUNT        PIC 9(009) COMP    VALUE 0.\n           05  UNSTRING-PTR       PIC 9(009) COMP    VALUE 0.\n           05  STRING-PTR         PIC 9(009) COMP    VALUE 0.\n           05  SEGMENT-COUNT      PIC 9(009) COMP    VALUE 0.\n           05  X-COUNT            PIC 9(009) COMP    VALUE 0.\n           05  SUB1               PIC 9(009) COMP    VALUE 0.\n           05  SUB2               PIC 9(009) COMP    VALUE 0.\n           05  SUB3               PIC 9(009) COMP    VALUE 0.\n           05  TOTAL-DIGITS       PIC 9(018) COMP    VALUE 0.\n           05  PROCESS-TYPE       PIC X(004)         VALUE LOW-VALUES.\n           05  IN-SIGNAL-PATTERNS PIC X(060)         VALUE SPACES.\n           05  IN-FOUR-DIGITS     PIC X(032)         VALUE SPACES.\n           05  CODED-VALUE-TBL.\n               10  CODED-VALUE OCCURS 8 PIC X(001).\n           05  ONE.\n               10  ONE-TBL   OCCURS 8 PIC X(001).\n           05  FOUR.\n               10  FOUR-TBL  OCCURS 8 PIC X(001).\n           05  SEVEN.\n               10  SEVEN-TBL OCCURS 8 PIC X(001).\n           05  EIGHT.\n               10  EIGHT-TBL OCCURS 8 PIC X(001).\n           05  ZER0.\n               10  ZER0-TBL  OCCURS 8 PIC X(001).\n           05  SIX.\n               10  SIX-TBL   OCCURS 8 PIC X(001).\n           05  NINE.\n               10  NINE-TBL  OCCURS 8 PIC X(001).\n           05  TWO.\n               10  TWO-TBL   OCCURS 8 PIC X(001).\n           05  THREE.\n               10  THREE-TBL OCCURS 8 PIC X(001).\n           05  FIVE.\n               10  FIVE-TBL  OCCURS 8 PIC X(001).\n           05  MAP-A              PIC X(001)         VALUE SPACE.\n           05  MAP-B              PIC X(001)         VALUE SPACE.\n           05  MAP-C              PIC X(001)         VALUE SPACE.\n           05  MAP-D              PIC X(001)         VALUE SPACE.\n           05  MAP-E              PIC X(001)         VALUE SPACE.\n           05  MAP-F              PIC X(001)         VALUE SPACE.\n           05  MAP-G              PIC X(001)         VALUE SPACE.\n           05  CDE-TABLE.\n               10  CDE\n               OCCURS 3\n               INDEXED CDE-INDX\n                                  PIC X(001)         VALUE SPACE.\n\n       01  WS-INPT-DATA.\n           05  WS-INPT            PIC X(4096)        VALUE SPACES.\n\n       01  SWITCHES.\n           05  INPT-DATA-EOF-SW   PIC X(001)         VALUE 'N'.\n               88  INPT-DATA-EOF                     VALUE 'Y'.\n           05  PROCESS-SW         PIC X(004)         VALUE LOW-VALUES.\n               88  PROCESS-TEST                      VALUE 'TEST'.\n\n       01  ENTRY-TABLE.\n           05  ENTRY-TBL\n               OCCURS 200\n               INDEXED ENTRY-INDX.\n               10  SIGNAL-PATTERN-TBL\n                   OCCURS 10\n                   INDEXED SIGNAL-INDX.\n                   15  SIGNAL-PATTERN        PIC X(008).\n               10  DIGIT-TBL\n                   OCCURS 4\n                   INDEXED DIGIT-INDX.\n                   15  DIGIT                 PIC X(008).\n                   15  DIGIT-VAL             PIC X(001).\n               10  ALL-DIGITS                PIC X(004).\n\n       01  SIXES-TABLE.\n           05  SIXES OCCURS 3                PIC X(008).\n\n       01  FIVES-TABLE.\n           05  FIVES OCCURS 3                PIC X(008).\n\n       Procedure Division.\n           DISPLAY MYNAME SPACE FUNCTION CURRENT-DATE\n\n           ACCEPT PROCESS-TYPE FROM COMMAND-LINE\n\n           MOVE FUNCTION UPPER-CASE(PROCESS-TYPE)\n             TO PROCESS-SW\n\n           INITIALIZE\n             ENTRY-TABLE\n             SIXES-TABLE\n             FIVES-TABLE\n             CDE-TABLE\n\n           OPEN INPUT INPT-DATA\n\n           PERFORM 8010-READ-INPT-DATA\n\n           PERFORM 1000-LOAD-INPUT UNTIL INPT-DATA-EOF\n\n           CLOSE INPT-DATA\n\n           PERFORM 2000-PROCESS-ENTRIES\n             VARYING ENTRY-INDX FROM 1 BY 1\n             UNTIL ENTRY-INDX > ENTRY-COUNT\n\n           DISPLAY MYNAME ' total digits    ' TOTAL-DIGITS\n           DISPLAY MYNAME ' records read    ' WS-REC-COUNT\n\n           DISPLAY MYNAME SPACE FUNCTION CURRENT-DATE\n           GOBACK.\n\n       1000-LOAD-INPUT.\n           ADD 1 TO ENTRY-COUNT\n           SET ENTRY-INDX TO ENTRY-COUNT\n           UNSTRING WS-INPT DELIMITED ' | '\n             INTO\n               IN-SIGNAL-PATTERNS\n               IN-FOUR-DIGITS\n           END-UNSTRING\n\n           MOVE 1 TO UNSTRING-PTR\n           PERFORM VARYING SIGNAL-INDX FROM 1 BY 1\n           UNTIL SIGNAL-INDX > 10\n             UNSTRING IN-SIGNAL-PATTERNS DELIMITED SPACE\n               INTO SIGNAL-PATTERN(ENTRY-INDX,SIGNAL-INDX)\n               POINTER UNSTRING-PTR\n             END-UNSTRING\n           END-PERFORM\n\n           MOVE 1 TO UNSTRING-PTR\n           PERFORM VARYING DIGIT-INDX FROM 1 BY 1\n           UNTIL DIGIT-INDX > 4\n             UNSTRING IN-FOUR-DIGITS DELIMITED SPACE\n               INTO DIGIT(ENTRY-INDX,DIGIT-INDX)\n               POINTER UNSTRING-PTR\n             END-UNSTRING\n           END-PERFORM\n\n           PERFORM 8010-READ-INPT-DATA\n           .\n\n       2000-PROCESS-ENTRIES.\n           IF PROCESS-TEST\n               RESET TRACE\n           END-IF          \n\n           INITIALIZE\n             SIXES-TABLE\n             CDE-TABLE\n\n           PERFORM 2010-PROCESS-SIGNALS\n\n           PERFORM 2020-0-6-9\n\n           PERFORM 2030-2-3-5\n\n           SORT ONE-TBL   ASCENDING KEY ONE-TBL\n           SORT TWO-TBL   ASCENDING KEY TWO-TBL\n           SORT THREE-TBL ASCENDING KEY TWO-TBL\n           SORT FOUR-TBL  ASCENDING KEY TWO-TBL\n           SORT FIVE-TBL  ASCENDING KEY TWO-TBL\n           SORT SIX-TBL   ASCENDING KEY TWO-TBL\n           SORT SEVEN-TBL ASCENDING KEY TWO-TBL\n           SORT EIGHT-TBL ASCENDING KEY TWO-TBL\n           SORT NINE-TBL  ASCENDING KEY TWO-TBL\n           SORT ZER0-TBL  ASCENDING KEY TWO-TBL\n\n           PERFORM 2040-PROCESS-DIGITS\n\n           .\n\n       2010-PROCESS-SIGNALS.\n           INITIALIZE SUB1 SUB2 SUB3\n           PERFORM VARYING SIGNAL-INDX FROM 1 BY 1\n           UNTIL SIGNAL-INDX > 10\n             INITIALIZE SEGMENT-COUNT\n             INSPECT SIGNAL-PATTERN(ENTRY-INDX,SIGNAL-INDX)\n               TALLYING SEGMENT-COUNT\n                 FOR ALL CHARACTERS BEFORE SPACE\n             EVALUATE SEGMENT-COUNT\n               WHEN 2\n                    MOVE SIGNAL-PATTERN(ENTRY-INDX,SIGNAL-INDX) TO ONE\n               WHEN 3\n                    MOVE SIGNAL-PATTERN(ENTRY-INDX,SIGNAL-INDX) TO SEVEN\n               WHEN 4\n                    MOVE SIGNAL-PATTERN(ENTRY-INDX,SIGNAL-INDX) TO FOUR\n               WHEN 7\n                    MOVE SIGNAL-PATTERN(ENTRY-INDX,SIGNAL-INDX) TO EIGHT\n               WHEN 6\n                    ADD 1 TO SUB1\n                    MOVE SIGNAL-PATTERN(ENTRY-INDX,SIGNAL-INDX)\n                      TO SIXES(SUB1)\n               WHEN 5\n                    ADD 1 TO SUB2\n                    MOVE SIGNAL-PATTERN(ENTRY-INDX,SIGNAL-INDX)\n                      TO FIVES(SUB2)\n             END-EVALUATE\n           END-PERFORM\n\n          PERFORM 3000-MAP\n\n          IF PROCESS-TEST\n          DISPLAY ' A ' MAP-A\n          DISPLAY ' B ' MAP-B\n          DISPLAY ' C ' MAP-C\n          DISPLAY ' D ' MAP-D\n          DISPLAY ' E ' MAP-E\n          DISPLAY ' F ' MAP-F\n          DISPLAY ' G ' MAP-G\n          END-IF\n          .\n\n       2020-0-6-9.\n           INITIALIZE ZER0 SIX NINE\n\n           PERFORM VARYING SUB1 FROM 1 BY 1\n           UNTIL SUB1 > 3\n             IF PROCESS-TEST\n                 DISPLAY MYNAME ' SIXES(' SUB1 ') ' SIXES(SUB1)\n             END-IF\n             IF ZER0 = SPACES\n                 PERFORM 2021-0\n             END-IF\n             IF SIX = SPACES\n                 PERFORM 2022-6\n             END-IF\n             IF NINE = SPACES\n                 PERFORM 2023-9\n             END-IF\n           END-PERFORM\n           .\n\n       2021-0.\n           INITIALIZE X-COUNT\n           INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-A\n           IF X-COUNT > 0\n               INITIALIZE X-COUNT\n               INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-B\n               IF X-COUNT > 0\n                   INITIALIZE X-COUNT\n                   INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-C\n                   IF X-COUNT > 0\n                       INITIALIZE X-COUNT\n                       INSPECT SIXES(SUB1)\n                         TALLYING X-COUNT FOR ALL MAP-E\n                       IF X-COUNT > 0\n                           INITIALIZE X-COUNT\n                           INSPECT SIXES(SUB1)\n                             TALLYING X-COUNT FOR ALL MAP-F\n                           IF X-COUNT > 0\n                               INITIALIZE X-COUNT\n                               INSPECT SIXES(SUB1)\n                                 TALLYING X-COUNT FOR ALL MAP-G\n                               IF X-COUNT > 0\n                                   MOVE SIXES(SUB1) TO ZER0\n                                   IF PROCESS-TEST\n                                       DISPLAY MYNAME\n                                         ' SIXES(' SUB1 ') is ZER0'\n                                   END-IF\n                               END-IF\n                           END-IF\n                       END-IF\n                   END-IF\n               END-IF\n           END-IF\n           .\n\n       2022-6.\n           INITIALIZE X-COUNT\n           INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-A\n           IF X-COUNT > 0\n               INITIALIZE X-COUNT\n               INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-B\n               IF X-COUNT > 0\n                   INITIALIZE X-COUNT\n                   INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-D\n                   IF X-COUNT > 0\n                       INITIALIZE X-COUNT\n                       INSPECT SIXES(SUB1)\n                         TALLYING X-COUNT FOR ALL MAP-E\n                       IF X-COUNT > 0\n                           INITIALIZE X-COUNT\n                           INSPECT SIXES(SUB1)\n                             TALLYING X-COUNT FOR ALL MAP-F\n                           IF X-COUNT > 0\n                               INITIALIZE X-COUNT\n                               INSPECT SIXES(SUB1)\n                                 TALLYING X-COUNT FOR ALL MAP-G\n                               IF X-COUNT > 0\n                                   MOVE SIXES(SUB1) TO SIX\n                               END-IF\n                           END-IF\n                       END-IF\n                   END-IF\n               END-IF\n           END-IF\n           .\n\n       2023-9.\n           INITIALIZE X-COUNT\n           INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-A\n           IF X-COUNT > 0\n               INITIALIZE X-COUNT\n               INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-B\n               IF X-COUNT > 0\n                   INITIALIZE X-COUNT\n                   INSPECT SIXES(SUB1) TALLYING X-COUNT FOR ALL MAP-C\n                   IF X-COUNT > 0\n                       INITIALIZE X-COUNT\n                       INSPECT SIXES(SUB1)\n                         TALLYING X-COUNT FOR ALL MAP-D\n                       IF X-COUNT > 0\n                           INITIALIZE X-COUNT\n                           INSPECT SIXES(SUB1)\n                             TALLYING X-COUNT FOR ALL MAP-F\n                           IF X-COUNT > 0\n                               INITIALIZE X-COUNT\n                               INSPECT SIXES(SUB1)\n                                 TALLYING X-COUNT FOR ALL MAP-G\n                               IF X-COUNT > 0\n                                   MOVE SIXES(SUB1) TO NINE\n                               END-IF\n                           END-IF\n                       END-IF\n                   END-IF\n               END-IF\n           END-IF\n           .\n\n       2030-2-3-5.\n           INITIALIZE TWO THREE FIVE\n\n           PERFORM VARYING SUB1 FROM 1 BY 1\n           UNTIL SUB1 > 3\n             IF TWO = SPACES\n                 PERFORM 2031-2\n             END-IF\n             IF THREE = SPACES\n                 PERFORM 2032-3\n             END-IF\n             IF FIVE = SPACES\n                 PERFORM 2033-5\n             END-IF\n           END-PERFORM\n           .\n\n       2031-2.\n           INITIALIZE X-COUNT\n           INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-A\n           IF X-COUNT > 0\n               INITIALIZE X-COUNT\n               INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-C\n               IF X-COUNT > 0\n                   INITIALIZE X-COUNT\n                   INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-D\n                   IF X-COUNT > 0\n                       INITIALIZE X-COUNT\n                       INSPECT FIVES(SUB1)\n                         TALLYING X-COUNT FOR ALL MAP-E\n                       IF X-COUNT > 0\n                           INITIALIZE X-COUNT\n                           INSPECT FIVES(SUB1)\n                             TALLYING X-COUNT FOR ALL MAP-G\n                           IF X-COUNT > 0\n                               MOVE FIVES(SUB1) TO TWO\n                           END-IF\n                       END-IF\n                   END-IF\n               END-IF\n           END-IF\n           .\n\n       2032-3.\n           INITIALIZE X-COUNT\n           INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-A\n           IF X-COUNT > 0\n               INITIALIZE X-COUNT\n               INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-C\n               IF X-COUNT > 0\n                   INITIALIZE X-COUNT\n                   INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-D\n                   IF X-COUNT > 0\n                       INITIALIZE X-COUNT\n                       INSPECT FIVES(SUB1)\n                         TALLYING X-COUNT FOR ALL MAP-F\n                       IF X-COUNT > 0\n                           INITIALIZE X-COUNT\n                           INSPECT FIVES(SUB1)\n                             TALLYING X-COUNT FOR ALL MAP-G\n                           IF X-COUNT > 0\n                               MOVE FIVES(SUB1) TO THREE\n                           END-IF\n                       END-IF\n                   END-IF\n               END-IF\n           END-IF\n           .\n\n       2033-5.\n           INITIALIZE X-COUNT\n           INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-A\n           IF X-COUNT > 0\n               INITIALIZE X-COUNT\n               INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-B\n               IF X-COUNT > 0\n                   INITIALIZE X-COUNT\n                   INSPECT FIVES(SUB1) TALLYING X-COUNT FOR ALL MAP-D\n                   IF X-COUNT > 0\n                       INITIALIZE X-COUNT\n                       INSPECT FIVES(SUB1)\n                         TALLYING X-COUNT FOR ALL MAP-F\n                       IF X-COUNT > 0\n                           INITIALIZE X-COUNT\n                           INSPECT FIVES(SUB1)\n                             TALLYING X-COUNT FOR ALL MAP-G\n                           IF X-COUNT > 0\n                               MOVE FIVES(SUB1) TO FIVE\n                           END-IF\n                       END-IF\n                   END-IF\n               END-IF\n           END-IF\n           .\n\n       2040-PROCESS-DIGITS.\n           IF PROCESS-TEST\n           DISPLAY MYNAME ' zero  ' ZER0\n           DISPLAY MYNAME ' one   ' ONE\n           DISPLAY MYNAME ' two   ' TWO\n           DISPLAY MYNAME ' three ' THREE\n           DISPLAY MYNAME ' four  ' FOUR\n           DISPLAY MYNAME ' five  ' FIVE\n           DISPLAY MYNAME ' six   ' SIX\n           DISPLAY MYNAME ' seven ' SEVEN\n           DISPLAY MYNAME ' eight ' EIGHT\n           DISPLAY MYNAME ' nine  ' NINE\n           END-IF\n\n           MOVE 1 TO STRING-PTR\n           PERFORM VARYING DIGIT-INDX FROM 1 BY 1\n           UNTIL DIGIT-INDX > 4\n             MOVE DIGIT(ENTRY-INDX,DIGIT-INDX) TO CODED-VALUE-TBL\n             SORT CODED-VALUE ASCENDING KEY CODED-VALUE\n             EVALUATE CODED-VALUE-TBL\n               WHEN ZER0  MOVE '0' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN ONE   MOVE '1' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN TWO   MOVE '2' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN THREE MOVE '3' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN FOUR  MOVE '4' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN FIVE  MOVE '5' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN SIX   MOVE '6' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN SEVEN MOVE '7' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN EIGHT MOVE '8' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN NINE  MOVE '9' TO DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               WHEN OTHER\n                    DISPLAY MYNAME ' digit encoding failure for '\n                      'DIGIT('ENTRY-INDX','DIGIT-INDX') '\n                      DIGIT(ENTRY-INDX,DIGIT-INDX)\n             END-EVALUATE\n             STRING DIGIT-VAL(ENTRY-INDX,DIGIT-INDX)\n               INTO ALL-DIGITS(ENTRY-INDX)\n               POINTER STRING-PTR\n             END-STRING\n           END-PERFORM\n\n           DISPLAY MYNAME ' ALL-DIGITS ' ALL-DIGITS(ENTRY-INDX)\n           ADD FUNCTION NUMVAL(ALL-DIGITS(ENTRY-INDX)) TO TOTAL-DIGITS\n           .\n\n       3000-MAP.\n           PERFORM 3010-MAP-A\n           PERFORM 3020-CDE\n           PERFORM 3030-MAP-E\n           PERFORM 3040-MAP-D\n           PERFORM 3050-MAP-C\n           PERFORM 3060-MAP-F\n           PERFORM 3070-MAP-B\n           PERFORM 3080-MAP-G\n           .\n\n       3010-MAP-A.\n           INITIALIZE MAP-A X-COUNT\n           PERFORM VARYING SUB3 FROM 1 BY 1\n           UNTIL SUB3 > FUNCTION LENGTH(SEVEN)\n           OR MAP-A NOT = SPACE\n             INITIALIZE X-COUNT\n             INSPECT ONE TALLYING X-COUNT FOR ALL SEVEN(SUB3:1)\n             IF X-COUNT = 0\n                 MOVE SEVEN(SUB3:1) TO MAP-A\n             END-IF\n           END-PERFORM\n\n           IF MAP-A = SPACE\n               DISPLAY MYNAME ' failed to map a'\n               DISPLAY MYNAME ' ONE   ' ONE\n               DISPLAY MYNAME ' SEVEN ' SEVEN\n           END-IF\n           .\n\n       3020-CDE.\n           INITIALIZE CDE-TABLE\n           SET CDE-INDX TO 0\n\n           PERFORM VARYING SUB1 FROM 1 BY 1\n           UNTIL SUB1 > 3\n             PERFORM VARYING SUB2 FROM 1 BY 1\n             UNTIL SUB2 > 3\n               IF SUB1 NOT = SUB2\n                   PERFORM VARYING SUB3 FROM 1 BY 1\n                   UNTIL SUB3 > FUNCTION LENGTH(SIXES(SUB2))\n                     INITIALIZE X-COUNT\n                     INSPECT SIXES(SUB1)\n                       TALLYING X-COUNT FOR ALL SIXES(SUB2)(SUB3:1)\n                     IF X-COUNT = 0\n                         INITIALIZE X-COUNT\n                         INSPECT CDE-TABLE\n                           TALLYING X-COUNT FOR ALL SIXES(SUB2)(SUB3:1)\n                         IF X-COUNT = 0\n                             SET CDE-INDX UP BY 1\n                             MOVE SIXES(SUB2)(SUB3:1) TO CDE(CDE-INDX)\n                         END-IF\n                     END-IF\n                   END-PERFORM\n               END-IF\n             END-PERFORM\n           END-PERFORM\n\n           IF PROCESS-TEST\n               DISPLAY MYNAME ' CDE-TABLE ' CDE-TABLE\n           END-IF\n           .\n\n       3030-MAP-E.\n           INITIALIZE MAP-E X-COUNT\n\n           PERFORM VARYING CDE-INDX FROM 1 BY 1\n           UNTIL CDE-INDX > 3\n           OR MAP-E NOT = SPACE\n             INITIALIZE X-COUNT\n             INSPECT FOUR TALLYING X-COUNT FOR ALL CDE(CDE-INDX)\n             IF X-COUNT = 0\n                 MOVE CDE(CDE-INDX) TO MAP-E\n             END-IF\n           END-PERFORM\n\n           IF MAP-E = SPACE\n               DISPLAY MYNAME ' failed to map e'\n               DISPLAY MYNAME ' FOUR ' FOUR\n               DISPLAY MYNAME ' CDE  ' CDE-TABLE\n           END-IF\n           .\n\n       3040-MAP-D.\n           INITIALIZE MAP-D X-COUNT\n\n           PERFORM VARYING CDE-INDX FROM 1 BY 1\n           UNTIL CDE-INDX > 3\n           OR MAP-D NOT = SPACE\n             IF PROCESS-TEST\n                 DISPLAY MYNAME ' CDE(' CDE-INDX ') ' CDE(CDE-INDX)\n             END-IF\n             IF CDE(CDE-INDX) = MAP-E\n                 CONTINUE\n             ELSE\n                 INITIALIZE X-COUNT\n                 INSPECT ONE TALLYING X-COUNT FOR ALL CDE(CDE-INDX)\n                 IF X-COUNT = 0\n                     MOVE CDE(CDE-INDX) TO MAP-D\n                 END-IF\n             END-IF\n           END-PERFORM\n\n           IF MAP-D = SPACE\n               DISPLAY MYNAME ' failed to map d'\n           END-IF\n           .\n\n       3050-MAP-C.\n           INITIALIZE MAP-C\n\n           PERFORM VARYING CDE-INDX FROM 1 BY 1\n           UNTIL CDE-INDX > 3\n           OR MAP-C NOT = SPACE\n             IF CDE(CDE-INDX) = MAP-E\n             OR CDE(CDE-INDX) = MAP-D\n                 CONTINUE\n             ELSE\n                 MOVE CDE(CDE-INDX) TO MAP-C\n             END-IF\n           END-PERFORM\n\n           IF MAP-C = SPACE\n               DISPLAY MYNAME ' failed to map c'\n           END-IF\n           .\n\n       3060-MAP-F.\n           INITIALIZE MAP-F\n\n           IF ONE(1:1) = MAP-C\n               MOVE ONE(2:1) TO MAP-F\n           ELSE\n               MOVE ONE(1:1) TO MAP-F\n           END-IF\n\n           IF MAP-F = SPACE\n               DISPLAY MYNAME ' failed to map f'\n           END-IF\n           .\n\n       3070-MAP-B.\n           INITIALIZE MAP-B\n\n           PERFORM VARYING SUB1 FROM 1 BY 1\n           UNTIL SUB1 > 4\n           OR MAP-B NOT = SPACE\n             EVALUATE FOUR(SUB1:1)\n               WHEN MAP-C\n               WHEN MAP-D\n               WHEN MAP-F\n                    CONTINUE\n               WHEN OTHER\n                    MOVE FOUR(SUB1:1) TO MAP-B\n             END-EVALUATE\n           END-PERFORM\n\n           IF MAP-B = SPACE\n               DISPLAY MYNAME ' failed to map b'\n           END-IF\n           .\n\n       3080-MAP-G.\n           INITIALIZE MAP-G\n\n           PERFORM VARYING SUB1 FROM 1 BY 1\n           UNTIL SUB1 > 7\n           OR MAP-G NOT = SPACE\n             EVALUATE EIGHT(SUB1:1)\n               WHEN MAP-A\n               WHEN MAP-B\n               WHEN MAP-C\n               WHEN MAP-D\n               WHEN MAP-E\n               WHEN MAP-F\n                    CONTINUE\n               WHEN OTHER\n                    MOVE EIGHT(SUB1:1) TO MAP-G\n             END-EVALUATE\n           END-PERFORM\n\n           IF MAP-G = SPACE\n               DISPLAY MYNAME ' failed to map g'\n           END-IF\n           .\n\n       8010-READ-INPT-DATA.\n           INITIALIZE WS-INPT-DATA\n           READ INPT-DATA INTO WS-INPT-DATA\n             AT END SET INPT-DATA-EOF TO TRUE\n             NOT AT END\n               ADD 1 TO WS-REC-COUNT\n           END-READ\n\n           .\n\n\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": {
        "file_name": "sysin.txt",
        "content": "LOAD  \nBACKUP  \nREPORT  \nUPDATE  \nDELETE  \nVALIDATE  \nEXPORT  \nIMPORT"
    },
    "code_file": "successful_snippet_77f03db9.cob",
    "compiled_file": "successful_snippet_77f03db9",
    "expected_output": "cs08b    2025100900131086+0200\ncs08b    failed to map a\ncs08b    ONE           \ncs08b    SEVEN         \ncs08b    failed to map e\ncs08b    FOUR LOAD    \ncs08b    CDE     \ncs08b    failed to map d\ncs08b    failed to map c\ncs08b    failed to map f\ncs08b    failed to map g\ncs08b    ALL-DIGITS 0000\ncs08b    failed to map a\ncs08b    ONE           \ncs08b    SEVEN         \ncs08b    failed to map f\ncs08b    failed to map b\ncs08b    failed to map g\ncs08b    ALL-DIGITS 1111\ncs08b    failed to map a\ncs08b    ONE           \ncs08b    SEVEN         \ncs08b    failed to map f\ncs08b    failed to map b\ncs08b    failed to map g\ncs08b    ALL-DIGITS 1111\ncs08b    failed to map a\ncs08b    ONE           \ncs08b    SEVEN         \ncs08b    failed to map f\ncs08b    failed to map b\ncs08b    failed to map g\ncs08b    ALL-DIGITS 1111\ncs08b    failed to map a\ncs08b    ONE           \ncs08b    SEVEN         \ncs08b    failed to map f\ncs08b    failed to map b\ncs08b    failed to map g\ncs08b    ALL-DIGITS 1111\ncs08b    failed to map a\ncs08b    ONE           \ncs08b    SEVEN         \ncs08b    failed to map e\ncs08b    FOUR     ADLO\ncs08b    CDE     \ncs08b    failed to map d\ncs08b    failed to map c\ncs08b    failed to map f\ncs08b    failed to map b\ncs08b    failed to map g\ncs08b    ALL-DIGITS 0000\ncs08b    failed to map a\ncs08b    ONE           \ncs08b    SEVEN         \ncs08b    failed to map f\ncs08b    failed to map b\ncs08b    failed to map g\ncs08b    ALL-DIGITS 1111\ncs08b    failed to map a\ncs08b    ONE           \ncs08b    SEVEN         \ncs08b    failed to map f\ncs08b    failed to map b\ncs08b    failed to map g\ncs08b    ALL-DIGITS 1111\ncs08b    total digits    000000000000006666\ncs08b    records read    000000008\ncs08b    2025100900131086+0200\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}