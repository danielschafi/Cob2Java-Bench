{
    "cobol_file": {
        "file_name": "successful_snippet_4fbaebbf.cob",
        "content": "      ******************************************************************\n      * COBOL solution to Anagrams Deranged challange\n      * The program was run on OpenCobolIDE\n      * Input data is stored in file 'Anagrams.txt' on my PC\n      ******************************************************************\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DERANGED.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT IN-FILE ASSIGN TO 'Anagrams.txt'\n               ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n       FD IN-FILE.\n       01 IN-RECORD                PIC X(22).\n\n       WORKING-STORAGE SECTION.\n       01  SWITCHES.\n           05 WS-EOF               PIC X       VALUE 'N'.\n           05 WS-FND               PIC X       VALUE 'N'.\n           05 WS-EXIT              PIC X       VALUE 'N'.\n\n       01 COUNTERS.\n           05 WS-TOT-RECS          PIC 9(5)    COMP-3  VALUE 0.\n           05 WS-SEL-RECS          PIC 9(5)    COMP-3  VALUE 0.\n           05 WT-REC-NBR           PIC 9(5)    COMP-3  VALUE 0.\n\n      * Extra byte to guarentee a space at end - needed in sort logic.\n       01 WS-WORD-TEMP             PIC X(23).\n       01 FILLER REDEFINES WS-WORD-TEMP.\n           05   WS-LETTER  OCCURS 23 TIMES PIC X.\n       77  WS-LETTER-HLD           PIC X.\n\n       77  WS-WORD-IN              PIC X(22).\n       77  WS-WORD-KEY             PIC X(22).\n\n       01 WS-WORD-TABLE.\n           05 WT-RECORD OCCURS 0 to 24000 TIMES\n                   DEPENDING ON WT-REC-NBR\n                   DESCENDING KEY IS WT-WORD-LEN\n                   INDEXED BY WT-IDX.\n               10 WT-WORD-KEY         PIC X(22).\n               10 WT-WORD-LEN         PIC 9(2).\n               10 WT-ANAGRAM-CNT      PIC 9(5) COMP-3.\n               10 WT-ANAGRAMS OCCURS 6 TIMES.\n                   15 WT-ANAGRAM      PIC X(22).\n\n       01 WS-WORD-TEMP1             PIC X(22).\n       01 FILLER REDEFINES WS-WORD-TEMP1.\n           05   WS-LETTER1  OCCURS 22 TIMES PIC X.\n\n       01 WS-WORD-TEMP2             PIC X(22).\n       01 FILLER REDEFINES WS-WORD-TEMP2.\n           05   WS-LETTER2  OCCURS 22 TIMES PIC X.\n\n       77  WS-I                    PIC 99999  COMP-3.\n       77  WS-J                    PIC 99999  COMP-3.\n       77  WS-K                    PIC 99999  COMP-3.\n       77  WS-L                    PIC 99999  COMP-3.\n       77  WS-BEG                  PIC 99999  COMP-3.\n       77  WS-MAX                  PIC 99999  COMP-3.\n\n       PROCEDURE DIVISION.\n       000-MAIN.\n           PERFORM 100-INITIALIZE.\n           PERFORM 200-PROCESS-RECORD\n               UNTIL WS-EOF = 'Y'.\n           SORT WT-RECORD ON DESCENDING KEY WT-WORD-LEN.\n           PERFORM 500-FIND-DERANGED.\n           PERFORM 900-TERMINATE.\n           STOP RUN.\n\n       100-INITIALIZE.\n           OPEN INPUT IN-FILE.\n           PERFORM 150-READ-RECORD.\n\n       150-READ-RECORD.\n           READ IN-FILE INTO WS-WORD-IN\n               AT END\n                   MOVE 'Y' TO WS-EOF\n               NOT AT END\n                   COMPUTE WS-TOT-RECS = WS-TOT-RECS + 1\n           END-READ.\n\n       200-PROCESS-RECORD.\n           IF WS-WORD-IN IS ALPHABETIC\n               COMPUTE WS-SEL-RECS = WS-SEL-RECS + 1\n               MOVE WS-WORD-IN TO WS-WORD-TEMP\n               PERFORM 300-SORT-WORD\n               MOVE WS-WORD-TEMP TO WS-WORD-KEY\n               PERFORM 400-ADD-TO-TABLE\n           END-IF.\n\n           PERFORM 150-READ-RECORD.\n\n      * bubble sort:\n       300-SORT-WORD.\n           PERFORM VARYING WS-MAX FROM 1 BY 1\n               UNTIL WS-LETTER(WS-MAX) = SPACE\n           END-PERFORM.\n\n           PERFORM VARYING WS-I FROM 1 BY 1 UNTIL WS-I = WS-MAX\n               PERFORM VARYING WS-J FROM WS-I BY 1\n                 UNTIL WS-J > WS-MAX - 1\n                   IF WS-LETTER(WS-J) < WS-LETTER(WS-I) THEN\n                       MOVE WS-LETTER(WS-I)  TO WS-LETTER-HLD\n                       MOVE WS-LETTER(WS-J)  TO WS-LETTER(WS-I)\n                       MOVE WS-LETTER-HLD    TO WS-LETTER(WS-J)\n                   END-IF\n               END-PERFORM\n           END-PERFORM.\n\n       400-ADD-TO-TABLE.\n           SET WT-IDX TO 1.\n           SEARCH WT-RECORD\n               AT END\n                   PERFORM 420-ADD-RECORD\n               WHEN WT-WORD-KEY(WT-IDX) = WS-WORD-KEY\n                   PERFORM 440-UPDATE-RECORD\n           END-SEARCH.\n\n       420-ADD-RECORD.\n           ADD 1 To WT-REC-NBR.\n           MOVE WS-WORD-KEY TO WT-WORD-KEY(WT-REC-NBR).\n           COMPUTE WT-WORD-LEN(WT-REC-NBR) = WS-MAX - 1.\n           MOVE 1 TO WT-ANAGRAM-CNT(WT-REC-NBR).\n           MOVE WS-WORD-IN TO\n               WT-ANAGRAM(WT-REC-NBR, WT-ANAGRAM-CNT(WT-REC-NBR)).\n\n       440-UPDATE-RECORD.\n           ADD 1 TO WT-ANAGRAM-CNT(WT-IDX).\n           MOVE WS-WORD-IN TO\n               WT-ANAGRAM(WT-IDX, WT-ANAGRAM-CNT(WT-IDX)).\n\n       500-FIND-DERANGED.\n           PERFORM VARYING WS-I FROM 1 BY 1\n             UNTIL WS-I > WT-REC-NBR OR WS-FND = 'Y'\n               PERFORM VARYING WS-J FROM 1 BY 1\n                 UNTIL WS-J > WT-ANAGRAM-CNT(WS-I) - 1 OR WS-FND = 'Y'\n                   COMPUTE WS-BEG = WS-J + 1\n                   PERFORM VARYING WS-K FROM WS-BEG BY 1\n                     UNTIL WS-K > WT-ANAGRAM-CNT(WS-I) OR WS-FND = 'Y'\n                       MOVE WT-ANAGRAM(WS-I, WS-J) TO WS-WORD-TEMP1\n                       MOVE WT-ANAGRAM(WS-I, WS-K) To WS-WORD-TEMP2\n                       PERFORM 650-CHECK-DERANGED\n                   END-PERFORM\n               END-PERFORM\n           END-PERFORM.\n\n           650-CHECK-DERANGED.\n               MOVE 'N' TO WS-EXIT.\n               PERFORM VARYING WS-L FROM 1 BY 1\n                   UNTIL WS-L > WT-WORD-LEN(WS-I) OR WS-EXIT = 'Y'\n                       IF WS-LETTER1(WS-L) = WS-LETTER2(WS-L)\n                           MOVE 'Y' TO WS-EXIT\n               END-PERFORM.\n               IF WS-EXIT = 'N'\n                   DISPLAY WS-WORD-TEMP1(1:WT-WORD-LEN(WS-I))\n                   ' '\n                   WS-WORD-TEMP2\n                   MOVE 'Y' TO WS-FND\n               END-IF.\n\n       900-TERMINATE.\n           DISPLAY 'RECORDS READ: ' WS-TOT-RECS.\n           DISPLAY 'RECORDS SELECTED ' WS-SEL-RECS.\n           DISPLAY 'RECORD KEYS: ' WT-REC-NBR.\n           CLOSE IN-FILE.\n\n      \n\n      \n      \n      \n      \n\n      \n      \n"
    },
    "input_files": [
        {
            "file_name": "Anagrams.txt",
            "content": "NNA0000100001HELLO\nNNA0000200002WORLD\nNNA0000300003COBOL\nNNA0000400004PROGRAM\nNNA0000500005ANAGRAM\nNNA0000600006SORT\nNNA0000700007LOGIC\nNNA0000800008INPUT\nNNA0000900009OUTPUT\nNNA0001000010FILE"
        }
    ],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": null,
    "code_file": "successful_snippet_4fbaebbf.cob",
    "compiled_file": "successful_snippet_4fbaebbf",
    "expected_output": "RECORDS READ: 00010\nRECORDS SELECTED 00000\nRECORD KEYS: 00000\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}