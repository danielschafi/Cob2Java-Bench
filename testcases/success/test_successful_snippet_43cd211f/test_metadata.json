{
    "cobol_file": {
        "file_name": "successful_snippet_43cd211f.cob",
        "content": "        >>SOURCE FORMAT FREE\n*> This code is dedicated to the public domain\n*> This is GNUCOBOL 2.0\nidentification division.\nprogram-id. heapsort.\nenvironment division.\nconfiguration section.\nrepository. function all intrinsic.\ndata division.\nworking-storage section.\n01  filler.\n    03  a pic 99.\n    03  a-start pic 99.\n    03  a-end pic 99.\n    03  a-parent pic 99.\n    03  a-child pic 99.\n    03  a-sibling pic 99.\n    03  a-lim pic 99 value 10.\n    03  array-swap pic 99.\n    03  array occurs 10 pic 99.\nprocedure division.\nstart-heapsort.\n\n    *> fill the array\n    compute a = random(seconds-past-midnight)\n    perform varying a from 1 by 1 until a > a-lim\n        compute array(a) = random() * 100\n    end-perform\n\n    perform display-array\n    display  space 'initial array'\n\n    *>heapify the array\n    move a-lim to a-end\n    compute a-start = (a-lim + 1) / 2\n    perform sift-down varying a-start from a-start by -1 until a-start = 0\n\n    perform display-array\n    display space 'heapified'\n\n    *> sort the array\n    move 1 to a-start\n    move a-lim to a-end\n    perform until a-end = a-start\n        move array(a-end) to array-swap\n        move array(a-start) to array(a-end)\n        move array-swap to array(a-start)\n        subtract 1 from a-end\n        perform sift-down\n    end-perform\n\n    perform display-array\n    display space 'sorted'\n\n    stop run\n    .\nsift-down.\n    move a-start to a-parent\n    perform until a-parent * 2 > a-end\n        compute a-child = a-parent * 2\n        compute a-sibling = a-child + 1\n        if a-sibling <= a-end and array(a-child) < array(a-sibling)\n            *> take the greater of the two\n            move a-sibling to a-child\n        end-if\n        if a-child <= a-end and array(a-parent) < array(a-child)\n           *> the child is greater than the parent\n           move array(a-child) to array-swap\n           move array(a-parent) to array(a-child)\n           move array-swap to array(a-parent)\n        end-if\n        *> continue down the tree\n        move a-child to a-parent\n    end-perform\n    .\ndisplay-array.\n    perform varying a from 1 by 1 until a > a-lim\n        display space array(a) with no advancing\n    end-perform\n    .\nend program heapsort.\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": null,
    "code_file": "successful_snippet_43cd211f.cob",
    "compiled_file": "successful_snippet_43cd211f",
    "expected_output": " 26 32 51 89 31 84 62 99 57 50 initial array\n 99 89 84 57 50 51 62 32 26 31 heapified\n 26 31 32 50 51 57 62 84 89 99 sorted\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}