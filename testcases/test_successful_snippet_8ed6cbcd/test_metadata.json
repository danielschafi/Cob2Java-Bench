{
  "cobol_file": {
    "file_name": "successful_snippet_8ed6cbcd.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AOC-2021-09-2.\n       AUTHOR. ANNA KOSIERADZKA.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT INPUTFILE ASSIGN TO \"d09.input\"\n           ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n         FD INPUTFILE.\n         01 INPUTRECORD PIC X(100).\n\n       WORKING-STORAGE SECTION.\n         01 FILE-STATUS PIC 9 VALUE 0.\n         01 WS-MAP OCCURS 100 TIMES.\n           05 WS-POINT PIC 9 OCCURS 100 TIMES.\n         01 WS-LOWS OCCURS 100 TIMES.\n           05 WS-LOW PIC 9 VALUE 0 OCCURS 100 TIMES.\n         01 WS-DONE-ARR OCCURS 100 TIMES.\n           05 WS-DONE PIC 9 VALUE 0 OCCURS 100 TIMES.\n         01 WS-STACK OCCURS 999999 TIMES.\n           05 WS-STACK-X PIC 9(3).\n           05 WS-STACK-Y PIC 9(3).\n         01 WS_MAX-AREAS OCCURS 9999 TIMES.\n           05 WS-MAX PIC 9(3) VALUE 0.\n\n         01 WS-AREA PIC 9(6) VALUE 0.\n         01 WS-RESULT PIC 9(16) VALUE 0.\n         77 M PIC 9(3) VALUE 100.\n         77 N PIC 9(3) VALUE 100.\n         77 I PIC 9(3) VALUE 1.\n         77 J PIC 9(3) VALUE 1.\n         77 S PIC 9(6) VALUE 0.\n         77 X PIC 9(3) VALUE 1.\n         77 Y PIC 9(3) VALUE 1.\n         77 IS-LOW PIC 9.\n\n       PROCEDURE DIVISION.\n       001-MAIN.\n           OPEN INPUT INPUTFILE.\n           PERFORM 002-READ UNTIL FILE-STATUS = 1.\n           CLOSE INPUTFILE.\n           PERFORM 004-FIND-LOWS.\n           PERFORM 005-FIND-BASSINS.\n           SORT WS_MAX-AREAS DESCENDING WS-MAX.\n           COMPUTE WS-RESULT = WS-MAX(1) * WS-MAX(2) * WS-MAX(3).          \n           DISPLAY WS-RESULT.\n           STOP RUN.\n\n       002-READ.\n           READ INPUTFILE\n             AT END MOVE 1 TO FILE-STATUS\n             NOT AT END PERFORM 003-PROCESS-RECORD\n           END-READ.\n\n       003-PROCESS-RECORD.\n           MOVE INPUTRECORD TO WS-MAP(I).\n           ADD 1 TO I.\n\n       004-FIND-LOWS.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > M\n             PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n               MOVE 1 TO IS-LOW\n               IF I > 1 AND WS-POINT(I - 1, J) <= WS-POINT(I, J) THEN\n                 MOVE 0 TO IS-LOW\n               END-IF\n               IF J > 1 AND WS-POINT(I, J - 1) <= WS-POINT(I, J) THEN\n                 MOVE 0 TO IS-LOW\n               END-IF\n               IF I < M AND WS-POINT(I + 1, J) <= WS-POINT(I, J) THEN\n                 MOVE 0 TO IS-LOW\n               END-IF\n               IF J < N AND WS-POINT(I, J + 1) <= WS-POINT(I, J) THEN\n                 MOVE 0 TO IS-LOW\n               END-IF\n               IF IS-LOW = 1 THEN \n                 MOVE 1 TO WS-LOW(I, J)\n                 DISPLAY WS-POINT(I, J) NO ADVANCING\n               ELSE\n                 DISPLAY '.' NO ADVANCING\n               END-IF\n             END-PERFORM\n             DISPLAY ' '\n           END-PERFORM.\n    \n       005-FIND-BASSINS.\n           MOVE 0 TO J.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > M\n             PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n               IF WS-LOW(I, J) = 1 THEN\n                 PERFORM 006-MEASURE-BASIN\n             END-PERFORM\n           END-PERFORM.\n\n       006-MEASURE-BASIN.\n           MOVE 0 TO WS-AREA.\n           MOVE 1 TO S.\n           MOVE I TO WS-STACK-X(1).\n           MOVE J TO WS-STACK-Y(1).\n           PERFORM 007-STACK-LOOP UNTIL S = 0.\n           ADD 1 TO J.\n           MOVE WS-AREA TO WS-MAX(J).\n\n       007-STACK-LOOP. \n           IF S = 0 THEN\n             EXIT PARAGRAPH\n           END-IF.\n\n           MOVE WS-STACK-X(S) TO X.\n           MOVE WS-STACK-Y(S) TO Y.\n           SUBTRACT 1 FROM S.\n\n           IF WS-DONE(X, Y) = 1 THEN \n             GO TO 007-STACK-LOOP\n           END-IF.\n           MOVE 1 TO WS-DONE(X, Y).\n\n      * If not part of bassin, continue\n      * Assuming limits between bassins are 9\n           IF WS-POINT(X, Y) = 9 THEN\n             GO TO 007-STACK-LOOP\n           END-IF.\n            \n           ADD 1 TO WS-AREA.\n\n           IF X > 1 THEN\n             ADD 1 TO S\n             COMPUTE WS-STACK-X(S) = X - 1\n             COMPUTE WS-STACK-Y(S) = Y\n           END-IF. \n\n           IF Y > 1 THEN\n             ADD 1 TO S\n             COMPUTE WS-STACK-X(S) = X \n             COMPUTE WS-STACK-Y(S) = Y - 1\n           END-IF.\n                      \n           IF X < M THEN\n             ADD 1 TO S\n             COMPUTE WS-STACK-X(S) = X + 1\n             COMPUTE WS-STACK-Y(S) = Y\n           END-IF.\n\n           IF Y < N THEN\n             ADD 1 TO S\n             COMPUTE WS-STACK-X(S) = X \n             COMPUTE WS-STACK-Y(S) = Y + 1\n           END-IF.\n"
  },
  "input_files": [
    {
      "file_name": "d09.input",
      "content": "2199943210\n3987894921\n9856789892\n8767896789\n9899965678\n1234567890\n9876543210\n5432198765\n6789012345\n0123456789"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}