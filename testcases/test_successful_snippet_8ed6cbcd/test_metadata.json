{
  "cobol_file": {
    "file_name": "successful_snippet_8ed6cbcd.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AOC-2021-09-2.\n       AUTHOR. ANNA KOSIERADZKA.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT INPUTFILE ASSIGN TO \"d09.input\"\n           ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n         FD INPUTFILE.\n         01 INPUTRECORD PIC X(100).\n\n       WORKING-STORAGE SECTION.\n         01 FILE-STATUS PIC 9 VALUE 0.\n         01 WS-MAP OCCURS 100 TIMES.\n           05 WS-POINT PIC 9 OCCURS 100 TIMES.\n         01 WS-LOWS OCCURS 100 TIMES.\n           05 WS-LOW PIC 9 VALUE 0 OCCURS 100 TIMES.\n         01 WS-DONE-ARR OCCURS 100 TIMES.\n           05 WS-DONE PIC 9 VALUE 0 OCCURS 100 TIMES.\n         01 WS-STACK OCCURS 999999 TIMES.\n           05 WS-STACK-X PIC 9(3).\n           05 WS-STACK-Y PIC 9(3).\n         01 WS_MAX-AREAS OCCURS 9999 TIMES.\n           05 WS-MAX PIC 9(3) VALUE 0.\n\n         01 WS-AREA PIC 9(6) VALUE 0.\n         01 WS-RESULT PIC 9(16) VALUE 0.\n         77 M PIC 9(3) VALUE 100.\n         77 N PIC 9(3) VALUE 100.\n         77 I PIC 9(3) VALUE 1.\n         77 J PIC 9(3) VALUE 1.\n         77 S PIC 9(6) VALUE 0.\n         77 X PIC 9(3) VALUE 1.\n         77 Y PIC 9(3) VALUE 1.\n         77 IS-LOW PIC 9.\n\n       PROCEDURE DIVISION.\n       001-MAIN.\n           OPEN INPUT INPUTFILE.\n           PERFORM 002-READ UNTIL FILE-STATUS = 1.\n           CLOSE INPUTFILE.\n           PERFORM 004-FIND-LOWS.\n           PERFORM 005-FIND-BASSINS.\n           SORT WS_MAX-AREAS DESCENDING WS-MAX.\n           COMPUTE WS-RESULT = WS-MAX(1) * WS-MAX(2) * WS-MAX(3).          \n           DISPLAY WS-RESULT.\n           STOP RUN.\n\n       002-READ.\n           READ INPUTFILE\n             AT END MOVE 1 TO FILE-STATUS\n             NOT AT END PERFORM 003-PROCESS-RECORD\n           END-READ.\n\n       003-PROCESS-RECORD.\n           MOVE INPUTRECORD TO WS-MAP(I).\n           ADD 1 TO I.\n\n       004-FIND-LOWS.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > M\n             PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n               MOVE 1 TO IS-LOW\n               IF I > 1 AND WS-POINT(I - 1, J) <= WS-POINT(I, J) THEN\n                 MOVE 0 TO IS-LOW\n               END-IF\n               IF J > 1 AND WS-POINT(I, J - 1) <= WS-POINT(I, J) THEN\n                 MOVE 0 TO IS-LOW\n               END-IF\n               IF I < M AND WS-POINT(I + 1, J) <= WS-POINT(I, J) THEN\n                 MOVE 0 TO IS-LOW\n               END-IF\n               IF J < N AND WS-POINT(I, J + 1) <= WS-POINT(I, J) THEN\n                 MOVE 0 TO IS-LOW\n               END-IF\n               IF IS-LOW = 1 THEN \n                 MOVE 1 TO WS-LOW(I, J)\n                 DISPLAY WS-POINT(I, J) NO ADVANCING\n               ELSE\n                 DISPLAY '.' NO ADVANCING\n               END-IF\n             END-PERFORM\n             DISPLAY ' '\n           END-PERFORM.\n    \n       005-FIND-BASSINS.\n           MOVE 0 TO J.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > M\n             PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n               IF WS-LOW(I, J) = 1 THEN\n                 PERFORM 006-MEASURE-BASIN\n             END-PERFORM\n           END-PERFORM.\n\n       006-MEASURE-BASIN.\n           MOVE 0 TO WS-AREA.\n           MOVE 1 TO S.\n           MOVE I TO WS-STACK-X(1).\n           MOVE J TO WS-STACK-Y(1).\n           PERFORM 007-STACK-LOOP UNTIL S = 0.\n           ADD 1 TO J.\n           MOVE WS-AREA TO WS-MAX(J).\n\n       007-STACK-LOOP. \n           IF S = 0 THEN\n             EXIT PARAGRAPH\n           END-IF.\n\n           MOVE WS-STACK-X(S) TO X.\n           MOVE WS-STACK-Y(S) TO Y.\n           SUBTRACT 1 FROM S.\n\n           IF WS-DONE(X, Y) = 1 THEN \n             GO TO 007-STACK-LOOP\n           END-IF.\n           MOVE 1 TO WS-DONE(X, Y).\n\n      * If not part of bassin, continue\n      * Assuming limits between bassins are 9\n           IF WS-POINT(X, Y) = 9 THEN\n             GO TO 007-STACK-LOOP\n           END-IF.\n            \n           ADD 1 TO WS-AREA.\n\n           IF X > 1 THEN\n             ADD 1 TO S\n             COMPUTE WS-STACK-X(S) = X - 1\n             COMPUTE WS-STACK-Y(S) = Y\n           END-IF. \n\n           IF Y > 1 THEN\n             ADD 1 TO S\n             COMPUTE WS-STACK-X(S) = X \n             COMPUTE WS-STACK-Y(S) = Y - 1\n           END-IF.\n                      \n           IF X < M THEN\n             ADD 1 TO S\n             COMPUTE WS-STACK-X(S) = X + 1\n             COMPUTE WS-STACK-Y(S) = Y\n           END-IF.\n\n           IF Y < N THEN\n             ADD 1 TO S\n             COMPUTE WS-STACK-X(S) = X \n             COMPUTE WS-STACK-Y(S) = Y + 1\n           END-IF.\n"
  },
  "input_files": [
    {
      "file_name": "d09.input",
      "content": "2199943210456789987632101298765434567899989942346789876543210123456789998765323456789876545678999\n1298854321345678976543212347654323456789879891457899987654321234567899879654212345678997434569878\n0987765432456789765432101456543212345678965789598999998765432345678998768943101234567894323456767\n2398876543567899876543212367894301234567894678989989899876543456789987657892012345678965412345656\n3499987654678999987654323458965412345678923567899876789987654567899876546789123456789876101234545\n4989998765789998798765434569876523456789012456789765678998765678998765435678934567899987212345434\n9878999879899987659876545678987654567892123567899654567899876789999654324567895678999898323456323\n8767899989999876543987676789998765678954234678998543456789987899898765213456789789998769434567212\n7656789999989987632398989899999896789765345789987632345678998998769894324567899899987654545678901\n6545678989878998543459999998989987899876456899876543456789999987656976435678912949876543656789412\n5434567976567987654567899987678998921987567899987654567899899876549876545789101239765432767896543\n4323459865456798765678999876567899210998678999898765678998789987634987656789212398765321898987654\n3212398754345689876789998765456789329879989998769876789987678976545698787898943987654210959998765\n4343498643234578987899987654345678998765699987654987899876569876756789898967894596543201245989876\n5454987632123456798999876543234567899654569876543298998765456989867899989456789987654312356978987\n6569876543234567899989987432123456789543498765432129987654345699878999876345678998765423467899998\n7678987654345678999876543210234567898755987654321012398543234578989998765234567899876534568998769\n8789998765456789998765432121345678969769876543212123987654345689999987654345678989987645679987654\n9899989876567899987654321012456789459898765432123439898765456799989998765456789678998756789998743\n9998679987678999876543210123567892398999876543234598769876567899878999876567896567899867899989432\n8987567898789998765432121234678901987899987654345987654987678998767899987678965456789978999876543\n7965456789899987654321012345789319876789898765459876543498789987656789998789432345678989998765432\n6543234899999876543210123456789429985678799876598765432349899876545678999894321234567899987654321\n5432145678989987654321234567896598754345689987679876541012945965434567899965432345678999876543210\n4321012567678998765432345678997987653234579998789987652123459876545678989876543456789998765432121\n5432123456567899876543456789999876542123468999899998543234567987656789876987654567899987654321012\n6543234567878999987654567899878987632012357899999987654345678998767896545698765678999876543210123\n7654345678989989898765678998767898743143456789998798765456789439878965434569876789998765432121234\n8765456789999876789876789987656789854234567899987659876567894323989654323456987899987654321012345\n9876567899987655678987899876545678965345678999876543987678965434598763212345698978998765432123456\n2987678999876544567898998765434567896456789998765432398789876545987654101234569767899876543234567\n1298789998765323456789987654323456789567899987654321239899987659876543212345678956789987654345678\n0129899987654212345678996543212345678978999876543210145989998798765432123456789345678998765456789\n1234999876543101234589987654101234567899998765432121234678929899876543234567891234567899876567899"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}