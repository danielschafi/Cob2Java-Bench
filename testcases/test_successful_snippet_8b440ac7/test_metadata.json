{
  "cobol_file": {
    "file_name": "successful_snippet_8b440ac7.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TICTACTOE.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Tic-Tac-Toe game board; COLUMN and CELL are keywords, so shorten\n           01 BOARD.\n               05 COLUM OCCURS 3 TIMES.\n                   10 CEL PIC X OCCURS 3 TIMES.\n\n      * User coordinate input\n           01 COORD-INPUT PIC XXX.\n\n      * Parsed coordinates\n           01 COORDINATES.\n               05 X-COORD PIC 9.\n               05 Y-COORD PIC 9.\n\n      * Error flag for input validation\n           01 INPUT-ERROR PIC 9.\n\n      * Check whether the user input anything at the new game prompt\n           01 CONTINUE-INPUT PIC X.\n\n      * The winner, if any\n      * Call 'GET-WINNER' whenever the board changes to update.\n           01 WINNER PIC X.\n\n      * Current date; used for RNG seeding\n           01 CURRENT-DATE-DATA.\n               05 FILLER PIC 9(14).\n               05 CURRENT-MILLISECONDS PIC 99.\n\n           01 A-DARK-DAY-FOR-HUMANITY PIC 9(16).\n       PROCEDURE DIVISION.\n           MOVE FUNCTION WHEN-COMPILED TO A-DARK-DAY-FOR-HUMANITY.\n\n      * Seed RNG. MOVE \" \" TO WINNER is effectively a no-op.\n           MOVE FUNCTION CURRENT-DATE TO CURRENT-DATE-DATA.\n           IF FUNCTION RANDOM(CURRENT-MILLISECONDS) = 0\n               MOVE \" \" TO WINNER\n           END-IF.\n           PERFORM MAIN.\n           GOBACK.\n\n           PRINT-BOARD.\n           PERFORM VARYING Y-COORD FROM 1 BY 1 UNTIL Y-COORD > 3\n               PERFORM VARYING X-COORD FROM 1 BY 1 UNTIL X-COORD > 3\n                   DISPLAY CEL(Y-COORD, X-COORD) WITH NO ADVANCING\n                   IF X-COORD < 3\n                       DISPLAY \"|\" WITH NO ADVANCING\n                   ELSE\n                       DISPLAY \" \"\n                   END-IF\n               END-PERFORM\n\n               IF Y-COORD < 3\n                   DISPLAY \"-+-+-\"\n               END-IF\n           END-PERFORM.\n\n           INIT-BOARD.\n           MOVE \" \" TO WINNER\n           MOVE SPACES TO BOARD.\n        \n           MAIN.\n           PERFORM WITH TEST AFTER UNTIL CONTINUE-INPUT IS NOT = \" \"\n               DISPLAY \"Welcome to QC Coders' Tic Tac Toe! You're 'X' an\n      -        \"d you'll go first.\"\n               PERFORM INIT-BOARD\n               PERFORM WITH TEST AFTER UNTIL WINNER IS NOT = \" \"\n                   DISPLAY \" \"\n                   DISPLAY \"Here's the current board:\"\n                   DISPLAY \" \"\n                   PERFORM PRINT-BOARD\n                   DISPLAY \" \"\n                   DISPLAY \"Enter your choice in the format 'x,y' (zero \n      -            \"based, left to right, top to bottom): \"\n                   DISPLAY \" \"\n\n                   ACCEPT COORD-INPUT FROM CONSOLE\n\n                   MOVE 0 TO INPUT-ERROR\n                   \n                   IF COORD-INPUT(2:1) IS NOT = \",\"\n                       MOVE 1 TO INPUT-ERROR\n                   END-IF\n\n                   IF COORD-INPUT(1:1) IS ALPHABETIC\n                       MOVE 1 TO INPUT-ERROR\n                   ELSE\n                       MOVE COORD-INPUT(1:1) TO X-COORD\n                   END-IF\n\n                   IF COORD-INPUT(3:1) IS ALPHABETIC\n                       MOVE 1 TO INPUT-ERROR\n                   ELSE\n                       MOVE COORD-INPUT(3:1) TO Y-COORD\n                   END-IF\n\n                   IF X-COORD > 2 OR Y-COORD > 2\n                       MOVE 1 TO INPUT-ERROR\n                   ELSE\n                       COMPUTE X-COORD = X-COORD + 1\n                       COMPUTE Y-COORD = Y-COORD + 1\n                   END-IF\n\n                   IF INPUT-ERROR = 1\n                       DISPLAY \"Invalid input! Try again.\"\n                   ELSE IF CEL(Y-COORD, X-COORD) IS NOT = \" \"\n                       DISPLAY \"That cell is already selected.\"\n                   ELSE\n                       MOVE \"X\" TO CEL(Y-COORD, X-COORD)\n                       CALL 'GET-WINNER' USING BOARD, WINNER\n                       IF WINNER = \" \"\n                           DISPLAY \" \"\n                           DISPLAY \"Computer is taking its turn...\"\n                           CALL 'DO-COMPUTERS-TURN' USING BOARD\n                           CALL 'GET-WINNER' USING BOARD, WINNER\n                       END-IF\n                   END-IF\n\n                   END-PERFORM\n               DISPLAY \" \"\n               IF WINNER = \"Z\"\n                   DISPLAY \"The game was a draw!\"\n               ELSE IF WINNER = \"X\"\n                   DISPLAY \"You're the winner!\"\n               ELSE\n                   DISPLAY \"The computer is the winner!\"\n               END-IF   \n               DISPLAY \"Here's the final board:\"\n               DISPLAY \" \" \n               PERFORM PRINT-BOARD\n               DISPLAY \" \"\n               DISPLAY \" \"\n               DISPLAY \"Press Enter to play again or x + Enter to exit.\"\n               ACCEPT CONTINUE-INPUT FROM CONSOLE\n           END-PERFORM.\n\n       END PROGRAM TICTACTOE.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-WINNER.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Combos are encoded as X1, Y1, X2, Y2, X3, Y3 (6 digits each)\n      * COBOL indices are one-based; compensate for that here \n       01 COMBOS VALUE \"111213212223313233112131122232132333112233312213\n      -    \"\".\n           05 COMBO OCCURS 8 TIMES INDEXED BY CBIDX.\n               10 CELL-COORDS OCCURS 3 TIMES INDEXED BY CLIDX.\n                   15 X-COORD PIC 9.\n                   15 Y-COORD PIC 9.\n      * We don't need to access individual available cells, just confirm\n      * that one exists after calling 'GET-AVAILABLE-CELLS'\n       01 AVAILABLE-CELLS PIC 9(18) VALUE 0.\n\n      * Look at the cells corresponding to a given combo\n       01 THIS-COMBO.\n           05 COMBO-ENTRY PIC X OCCURS 3 TIMES.\n       LINKAGE SECTION.\n       01 BOARD.\n            05 COLUM OCCURS 3 TIMES.\n                10 CEL PIC X OCCURS 3 TIMES.\n       01 WINNER PIC X.\n       PROCEDURE DIVISION USING BOARD, WINNER.\n           PERFORM CHECK-COMBO VARYING CBIDX FROM 1 BY 1 UNTIL CBIDX = 9\n           CALL 'GET-AVAILABLE-CELLS' USING BOARD, AVAILABLE-CELLS.\n           IF AVAILABLE-CELLS = 0\n               MOVE \"Z\" TO WINNER\n           ELSE\n               MOVE \" \" TO WINNER\n           END-IF\n           GOBACK.\n\n           CHECK-COMBO.\n               PERFORM VARYING CLIDX FROM 1 BY 1 UNTIL CLIDX = 4\n                   MOVE CEL(Y-COORD(CBIDX, CLIDX), X-COORD(CBIDX, CLIDX)\n      -            ) TO COMBO-ENTRY(CLIDX)\n               END-PERFORM\n               IF COMBO-ENTRY(1) IS NOT = \" \" AND COMBO-ENTRY(1) = COMBO\n      -        -ENTRY(2) AND COMBO-ENTRY(2) = COMBO-ENTRY(3)\n                   MOVE COMBO-ENTRY(1) TO WINNER\n                   GOBACK\n               END-IF.\n       END PROGRAM GET-WINNER.\n       \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-AVAILABLE-CELLS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Cell indices\n           01 X-COORD PIC 9.\n           01 Y-COORD PIC 9.\n       LOCAL-STORAGE SECTION.\n           01 AVIDX PIC 9 VALUE 1.\n       LINKAGE SECTION.\n           01 BOARD.\n               05 COLUM OCCURS 3 TIMES.\n                   10 CEL PIC X OCCURS 3 TIMES.\n           01 AVAILABLE-CELLS.\n               05 AVAILABLE-CELL OCCURS 9 TIMES.\n                   10 AVAILABLE-X PIC 9.\n                   10 AVAILABLE-Y PIC 9.\n       PROCEDURE DIVISION USING BOARD, AVAILABLE-CELLS.\n           PERFORM VARYING Y-COORD FROM 1 BY 1 UNTIL Y-COORD = 4\n               PERFORM VARYING X-COORD FROM 1 BY 1 UNTIL X-COORD = 4\n                   IF CEL(Y-COORD, X-COORD) = \" \"\n                       MOVE X-COORD TO AVAILABLE-X(AVIDX)\n                       MOVE Y-COORD TO AVAILABLE-Y(AVIDX)\n                       COMPUTE AVIDX = AVIDX + 1\n                   END-IF\n               END-PERFORM\n           END-PERFORM\n           GOBACK.\n       END PROGRAM GET-AVAILABLE-CELLS.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DO-COMPUTERS-TURN.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * The cell selected by the computer to play in\n           01 SELECTED-CELL.\n               05 SELECTED-X PIC 9.\n               05 SELECTED-Y PIC 9.\n      * Index used to count available cells\n           01 AVIDX PIC 9.\n      * Index of the selected cell\n           01 SELIDX PIC 9.\n      \n       LOCAL-STORAGE SECTION.\n      * List of available cells. Allocate enough memory to hold the maxi\n      * mum number of available cells.\n           01 AVAILABLE-CELLS VALUE ZEROES.\n               05 AVAILABLE-CELL OCCURS 9 TIMES.\n                   10 AVAILABLE-X PIC 9.\n                   10 AVAILABLE-Y PIC 9.\n      * The actual number of available cells.\n           01 AVCOUNT PIC 9 VALUE 0.\n       LINKAGE SECTION.\n           01 BOARD.\n               02 COLUM OCCURS 3 TIMES.\n                   03 CEL PIC X OCCURS 3 TIMES.\n       PROCEDURE DIVISION USING BOARD.\n           CALL 'GET-AVAILABLE-CELLS' USING BOARD, AVAILABLE-CELLS.\n           PERFORM COUNT-AVAILABLE-CELLS.\n           COMPUTE SELIDX = FUNCTION RANDOM * AVCOUNT + 1.\n           MOVE AVAILABLE-X(SELIDX) TO SELECTED-X.\n           MOVE AVAILABLE-Y(SELIDX) TO SELECTED-Y.\n           MOVE \"O\" TO CEL(SELECTED-Y, SELECTED-X).\n           GOBACK.\n\n           COUNT-AVAILABLE-CELLS.\n               PERFORM WITH TEST AFTER VARYING AVIDX \n               FROM 1 BY 1 UNTIL AVIDX = 9\n                   IF AVAILABLE-X(AVIDX) > 0\n                       COMPUTE AVCOUNT = AVCOUNT + 1\n                   END-IF\n               END-PERFORM.\n       END PROGRAM DO-COMPUTERS-TURN."
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "A1 \n   \nB2 \n   \nC3 \n   \nA3 \n   \nB1 \n   \nC2 \n   \nA2 \n   \nx"
  }
}