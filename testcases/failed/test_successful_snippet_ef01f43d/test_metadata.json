{
  "cobol_file": {
    "file_name": "successful_snippet_ef01f43d.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. part1.\n\n       ENVIRONMENT DIVISION.\n           INPUT-OUTPUT SECTION.\n               FILE-CONTROL.\n               SELECT input-file ASSIGN TO 'input'\n               ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n           FILE SECTION.\n           FD input-file.\n           01 command.\n               05 command-name PIC A(3).\n               05 blank-space PIC X.\n               05 command-value PIC 9(5).\n\n           WORKING-STORAGE SECTION.\n           01 ws-command.\n               05 ws-command-name PIC A(3).\n               05 blank-space PIC X.\n               05 ws-command-value PIC 9(5).\n           01 state PIC 9.\n               88 done-reading value 1.\n               88 solved       value 2.\n           01 eof PIC 9.\n           01 row-count PIC 9(5) USAGE IS COMP.\n           01 instructions.\n               05 row OCCURS 1000 TIMES.\n                   10 row-name PIC A(3).\n                   10 row-value USAGE IS COMP-2.\n                   10 row-seen PIC 9.\n                   10 row-region PIC 9(5) USAGE IS COMP.\n           01 pc PIC 9(5) USAGE IS COMP.\n           01 acc PIC 9(5) USAGE IS COMP.\n\n           01 reg-count PIC 9(5) USAGE IS COMP.\n           01 regions.\n               05 region OCCURS 1000 TIMES.\n                   10 reg-lo PIC 9(5) USAGE IS COMP.\n                   10 reg-hi PIC 9(5) USAGE IS COMP.\n                   10 reg-seen PIC 9.\n                   10 reg-from PIC 9(5) USAGE IS COMP.\n                   10 reg-from-table OCCURS 100 TIMES.\n                       15 neighbor PIC 9(5) USAGE IS COMP.\n                       15 neighbor-bc PIC 9(5) USAGE IS COMP.\n\n           01 frontier-count PIC 9(5) USAGE IS COMP.\n           01 frontier-table.\n               05 frontier-row OCCURS 100 TIMES.\n                   10 frontier PIC 9(5) USAGE IS COMP.\n\n           01 seen-table.\n               05 seen-row OCCURS 1000 TIMES.\n                   10 seen PIC 9(5) USAGE IS COMP.\n\n           01 offset PIC 9(5) USAGE IS COMP.\n           01 target PIC 9(5) USAGE IS COMP.\n           01 change PIC 9(5) USAGE IS COMP.\n\n       PROCEDURE DIVISION.\n           OPEN INPUT input-file.\n           MOVE 0 TO row-count.\n           PERFORM UNTIL done-reading\n               ADD 1 TO row-count\n               READ input-file INTO ws-command\n                   AT END MOVE 1 TO state\n               END-READ\n               MOVE ws-command-name TO row-name(row-count)\n               COMPUTE row-value(row-count) =\n                   FUNCTION NUMVAL(ws-command-value)\n               MOVE 0 to row-seen(row-count)\n           END-PERFORM.\n           CLOSE input-file.\n\n           MOVE 1 TO pc.\n           MOVE 0 TO acc.\n           PERFORM RUN-STEP UNTIL row-seen(pc) IS EQUAL TO 1.\n\n           PERFORM INIT-REGIONS.\n           MOVE 1 TO pc.\n           MOVE 1 TO frontier-count.\n           MOVE reg-count TO frontier(frontier-count).\n           PERFORM CHECK-FRONTIER UNTIL change IS NOT EQUAL TO 0\n               OR frontier-count IS EQUAL TO 0.\n\n           IF change IS NOT EQUAL TO 0 THEN\n               DISPLAY \"Instruction to change: \" change\n           ELSE\n               STOP RUN\n           END-IF.\n\n           IF row-name(change) IS EQUAL TO 'jmp'\n               MOVE 'nop' TO row-name(change)\n           ELSE\n               MOVE 'jmp' TO row-name(change)\n           END-IF.\n\n           MOVE 1 TO pc.\n           MOVE 0 TO acc.\n           PERFORM RUN-STEP UNTIL pc IS GREATER THAN row-count.\n           DISPLAY acc.\n           STOP RUN.\n\n           RUN-STEP.\n           MOVE 1 TO row-seen(pc).\n           IF row-name(pc) IS EQUAL TO 'acc' THEN\n               ADD row-value(pc) TO acc\n           END-IF.\n           IF row-name(pc) IS EQUAL TO 'jmp' THEN\n               COMPUTE pc = row-value(pc) + pc\n           ELSE\n               ADD 1 TO pc\n           END-IF.\n\n           INIT-REGIONS.\n           MOVE 1 TO pc.\n           MOVE 1 TO reg-count.\n           MOVE 1 TO reg-lo(reg-count).\n      * Partition the program up into \"regions\" to JMP into\n           PERFORM UNTIL pc IS GREATER THAN row-count\n               MOVE reg-count TO row-region(pc)\n               IF row-seen(pc) IS EQUAL TO 1 THEN\n                   MOVE 1 TO reg-seen(reg-count)\n               END-IF\n               IF row-name(pc) IS EQUAL TO 'jmp' THEN\n                   MOVE pc TO reg-hi(reg-count)\n                   ADD 1 TO reg-count\n                   COMPUTE reg-lo(reg-count) = pc + 1\n               END-IF\n               ADD 1 TO pc\n           END-PERFORM.\n           SUBTRACT 2 FROM reg-count.\n           MOVE 1 TO pc.\n           PERFORM UNTIL pc IS GREATER THAN row-count\n               IF row-name(pc) IS NOT EQUAL TO 'acc' THEN\n                   COMPUTE offset = pc + row-value(pc)\n                   MOVE row-region(offset) TO target\n                   IF neighbor(target, reg-from(target))\n                              IS NOT EQUAL TO row-region(pc) THEN\n                       ADD 1 TO reg-from(target)\n                       MOVE row-region(pc)\n                           TO neighbor(target, reg-from(target))\n                       MOVE pc TO neighbor-bc(target, reg-from(target))\n                   END-IF\n               END-IF\n               ADD 1 TO pc\n           END-PERFORM.\n\n           CHECK-FRONTIER.\n           MOVE frontier(frontier-count) TO target.\n           SUBTRACT 1 FROM frontier-count.\n           IF reg-seen(target - 1) IS EQUAL TO 1 THEN\n      * We visited the region before this, so change its ending JMP \n               COMPUTE change = reg-lo(target) - 1\n           ELSE\n               MOVE 1 TO pc\n      * Add everything that could JMP here to the frontier\n               PERFORM UNTIL pc IS GREATER THAN reg-from(target)\n      * If we visited one of the instructions that COULD JMP here,\n      * it must be a NOP which we can switch to a JMP.\n                   IF row-seen(neighbor-bc(target, pc))\n                           IS NOT EQUAL TO 0 THEN\n                       MOVE neighbor-bc(target, pc) TO change\n                   END-IF\n                   IF seen(neighbor(target, pc)) IS EQUAL TO 0 THEN\n                       ADD 1 TO frontier-count\n                       MOVE neighbor(target, pc)\n                           TO frontier(frontier-count)\n                       MOVE 1 TO seen(neighbor(target, pc))\n                   END-IF\n                   ADD 1 TO pc\n               END-PERFORM\n           END-IF.\n"
  },
  "input_files": [
    {
      "file_name": "input",
      "content": "CMD X 00001\nCMD Y 00002\nCMD Z 00003\nCMD A 00004\nCMD B 00005\nCMD C 00006\nCMD D 00007\nCMD E 00008\nCMD F 00009\nCMD G 00010"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}