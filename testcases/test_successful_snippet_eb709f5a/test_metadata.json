{
  "cobol_file": {
    "file_name": "successful_snippet_eb709f5a.cob",
    "content": "identification division.\nprogram-id. subleq-program.\ndata division.\nworking-storage section.\n01  subleq-source-code.\n    05 source-string                      pic x(2000).\n01  subleq-virtual-machine.\n    05 memory-table.\n        10 memory                         pic s9999\n            occurs 500 times.\n    05 a                                  pic s9999.\n    05 b                                  pic s9999.\n    05 c                                  pic s9999.\n    05 instruction-pointer                pic s9999.\n    05 input-output-character             pic x.\n01  working-variables.\n    05 loop-counter                       pic 9999.\n    05 instruction-counter                pic 9999.\n    05 string-pointer                     pic 9999.\n    05 adjusted-index-a                   pic 9999.\n    05 adjusted-index-b                   pic 9999.\n    05 output-character-code              pic 9999.\nprocedure division.\nread-source-paragraph.\n    accept source-string from console.\n    display 'READING SUBLEQ PROGRAM... ' with no advancing.\n    move 1 to string-pointer.\n    move 0 to instruction-counter.\n    perform split-source-paragraph varying loop-counter from 1 by 1\n        until loop-counter is greater than 500\n        or string-pointer is greater than 2000.\n    display instruction-counter with no advancing.\n    display ' WORDS READ.'.\nexecute-paragraph.\n    move 1 to instruction-pointer.\n    move 0 to instruction-counter.\n    display 'BEGINNING RUN... '.\n    display ''.\n    perform execute-instruction-paragraph\n        until instruction-pointer is negative.\n    display ''.\n    display 'HALTED AFTER ' instruction-counter ' INSTRUCTIONS.'.\n    stop run.\nexecute-instruction-paragraph.\n    add 1 to instruction-counter.\n    move memory(instruction-pointer) to a.\n    add 1 to instruction-pointer.\n    move memory(instruction-pointer) to b.\n    add 1 to instruction-pointer.\n    move memory(instruction-pointer) to c.\n    add 1 to instruction-pointer.\n    if a is equal to -1 then perform input-paragraph.\n    if b is equal to -1 then perform output-paragraph.\n    if a is not equal to -1 and b is not equal to -1\n        then perform subtraction-paragraph.\nsplit-source-paragraph.\n    unstring source-string delimited by all spaces\n        into memory(loop-counter)\n        with pointer string-pointer.\n    add 1 to instruction-counter.\ninput-paragraph.\n    display '> ' with no advancing.\n    accept input-output-character from console.\n    add 1 to b giving adjusted-index-b.\n    move function ord(input-output-character)\n        to memory(adjusted-index-b).\n    subtract 1 from memory(adjusted-index-b).\noutput-paragraph.\n    add 1 to a giving adjusted-index-a.\n    add 1 to memory(adjusted-index-a) giving output-character-code.\n    move function char(output-character-code)\n        to input-output-character.\n    display input-output-character with no advancing.\nsubtraction-paragraph.\n    add 1 to c.\n    add 1 to a giving adjusted-index-a.\n    add 1 to b giving adjusted-index-b.\n    subtract memory(adjusted-index-a) from memory(adjusted-index-b).\n    if memory(adjusted-index-b) is equal to zero\n        or memory(adjusted-index-b) is negative\n        then move c to instruction-pointer.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "23 23 -1 0 0 100 110 110 46 7 7 100 110 110 46 0 0 100 110 110 46 -1 102 102 16 101 101 102 -1 101 101 21 103 103 110 103 103 110 -1 109 109 29 103 103 110 101 101 102 0 0 100 110 110 46 -1 109 109 40 103 103 110 101 101 102 0 0 100 110 110 46 -1 104 104 53 110 110 110 1 1 104 -1 104 104 59 110 110 110 -1 -1 104 0 0 100 103 103 110 105 105 110 106 106 110 0 0 100 110 110 110 72 0 101 0 102 0 103 0 104 0 105 10 106 32 107 33 108 126 109 0 110 0\nH\ne\nl\nl\no\n \nW\no\nr\nl\nd\n!"
  }
}