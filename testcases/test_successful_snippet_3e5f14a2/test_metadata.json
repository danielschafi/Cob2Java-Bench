{
  "cobol_file": {
    "file_name": "successful_snippet_3e5f14a2.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AOC-2020-14-2.\n       AUTHOR ANNA KOSIERADZKA.\n      \n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT INPUTFILE ASSIGN TO \"d14.input\"\n           ORGANIZATION IS LINE SEQUENTIAL.\n           \n       DATA DIVISION.\n       FILE SECTION.\n         FD INPUTFILE\n         RECORD IS VARYING IN SIZE FROM 1 to 99\n         DEPENDING ON REC-LEN.\n         01 INPUTRECORD PIC X(99).\n         \n       WORKING-STORAGE SECTION.\n         01 FILE-STATUS PIC 9 VALUE 0.\n         01 REC-LEN PIC 9(2) COMP.\n         01 WS-MASK PIC X(36).\n         01 WS-ADDR PIC 9(11).\n         01 WS-VAL PIC 9(11).\n         01 WS-ADDR-DEC PIC 9(11) VALUE 0.\n         01 WS-ADDR-FLOAT PIC X(36) VALUE SPACE.\n         01 WS-ADDR-TMP PIC X(36) VALUE SPACE.\n         01 WS-ADDR-BIN PIC X(36) VALUE SPACE.\n         01 WS-MEM-SIZE PIC 9(6) VALUE 0.\n         01 WS-MEM OCCURS 512000 TIMES.\n           05 WS-MEM-ADDR PIC 9(11) VALUE 0.\n           05 WS-MEM-VAL PIC 9(11) VALUE 0.\n         01 RESULT PIC 9(16) VALUE 0.\n         77 WS-D PIC 9.\n        \n       LOCAL-STORAGE SECTION.\n         01 I UNSIGNED-INT VALUE 0.\n         01 J UNSIGNED-INT VALUE 0.\n         01 IDX UNSIGNED-INT VALUE 1.\n\n       PROCEDURE DIVISION.\n       001-MAIN.\n           OPEN INPUT INPUTFILE.\n           PERFORM 002-READ UNTIL FILE-STATUS = 1.\n           CLOSE INPUTFILE.\n           PERFORM SUM-MEMORY.\n           DISPLAY RESULT.\n           STOP RUN.\n\n       002-READ.\n            READ INPUTFILE\n                AT END MOVE 1 TO FILE-STATUS\n                NOT AT END PERFORM 003-PROCESS-RECORD\n            END-READ.\n       \n       003-PROCESS-RECORD.\n           IF INPUTRECORD(1:4) = \"mask\" THEN \n              MOVE INPUTRECORD(8:36) TO WS-MASK\n           ELSE \n              UNSTRING INPUTRECORD(5:36) DELIMITED BY \"=\" INTO \n                 WS-ADDR WS-VAL\n               MOVE WS-ADDR TO WS-ADDR-DEC\n               PERFORM DEC-TO-BIN\n               PERFORM APPLY-MASK\n               PERFORM WRITE-TO-ADDR\n           END-IF.\n\n       APPLY-MASK.\n           MOVE WS-ADDR-BIN TO WS-ADDR-FLOAT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > 36\n      * If the bitmask bit is 1, the corresponding memory address bit \n      * is overwritten with 1.\n      * If the bitmask bit is X, the corresponding memory address bit \n      * is floating.\n              IF NOT WS-MASK(I:1) = 0 THEN \n                 MOVE WS-MASK(I:1) TO WS-ADDR-FLOAT(I:1)\n              END-IF\n           END-PERFORM.\n\n       DEC-TO-BIN.\n           MOVE SPACE TO WS-ADDR-BIN.\n           PERFORM VARYING I FROM 36 BY -1 UNTIL I = 0\n              DIVIDE WS-ADDR-DEC BY 2 GIVING WS-ADDR-DEC REMAINDER WS-D\n              MOVE WS-D TO WS-ADDR-BIN(I:1)\n           END-PERFORM.\n\n       BIN-TO-DEC.\n           MOVE 0 TO WS-ADDR-DEC.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > 36\n              COMPUTE WS-ADDR-DEC = WS-ADDR-DEC * 2\n              IF WS-ADDR-BIN(I:1) = 1 THEN \n                 COMPUTE WS-ADDR-DEC = WS-ADDR-DEC + 1\n              END-IF\n           END-PERFORM.\n\n       WRITE-TO-ADDR.\n           MOVE 1 TO IDX.\n           MOVE WS-ADDR-FLOAT TO WS-ADDR-TMP.\n           PERFORM WRITE-TO-ADDR-RECURSIVE.\n\n       WRITE-TO-ADDR-RECURSIVE.\n           IF IDX < 37 THEN\n              IF WS-ADDR-FLOAT(IDX:1) = 'X' THEN\n                 MOVE 0 TO WS-ADDR-TMP(IDX:1)\n                 ADD 1 TO IDX \n                 PERFORM WRITE-TO-ADDR-RECURSIVE\n                 SUBTRACT 1 FROM IDX\n                 MOVE 1 TO WS-ADDR-TMP(IDX:1)\n                 ADD 1 TO IDX \n                 PERFORM WRITE-TO-ADDR-RECURSIVE\n                 SUBTRACT 1 FROM IDX\n              ELSE\n                 ADD 1 TO IDX \n                 PERFORM WRITE-TO-ADDR-RECURSIVE\n                 SUBTRACT 1 FROM IDX\n              END-IF\n           ELSE\n              MOVE WS-ADDR-TMP TO WS-ADDR-BIN\n              PERFORM BIN-TO-DEC\n              PERFORM WRITE-TO-MEM\n           END-IF.\n\n       WRITE-TO-MEM.\n      *     MOVE WS-VAL TO WS-MEM(WS-ADDR-DEC).\n           PERFORM VARYING J FROM 1 BY 1 UNTIL J > WS-MEM-SIZE\n              IF WS-MEM-ADDR(J) = WS-ADDR-DEC THEN\n                 MOVE WS-VAL TO WS-MEM-VAL(J)\n                 EXIT PERFORM \n              END-IF\n           END-PERFORM.\n           IF J > WS-MEM-SIZE THEN\n              ADD 1 TO WS-MEM-SIZE\n              MOVE WS-ADDR-DEC TO WS-MEM-ADDR(J)\n              MOVE WS-VAL TO WS-MEM-VAL(J)\n           END-IF.\n\n       SUM-MEMORY.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > 512000\n              ADD WS-MEM-VAL(I) TO RESULT\n           END-PERFORM.\n"
  },
  "input_files": [
    {
      "file_name": "d14.input",
      "content": "mask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\nmem[8] = 11\nmem[7] = 101\nmem[8] = 0\nmask = X1XX0X01X0X000X10X0X0X000X0000XX1101\nmem[26] = 1\nmem[17] = 496\nmem[18] = 98237\nmask = 00X1XXX1X011XX001X0X0X1XX1X01X011001\nmem[5436] = 30899\nmem[3293] = 231\nmem[54] = 100663\nmask = 1XX10X01X0X1XX0X1X0XXX1X00001X001100\nmem[42] = 7\nmem[39] = 58\nmem[13664] = 1031"
    }
  ],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}