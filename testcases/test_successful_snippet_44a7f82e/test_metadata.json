{
  "cobol_file": {
    "file_name": "successful_snippet_44a7f82e.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AdventOfCode2019-10b.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n       SELECT InputFile ASSIGN TO InputPath\n       ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n       FD InputFile RECORD IS VARYING IN SIZE FROM 1 TO 9999 CHARACTERS\n           DEPENDING ON InputLen.\n       01 InputRec.\n        02 Cell PIC X(1) OCCURS 1 TO 9999 TIMES DEPENDING ON InputLen.\n\n       WORKING-STORAGE SECTION.\n       01 InputPath PIC X(50).\n       01 InputLen PIC 9(4).\n       01 InputPos PIC 9(4).\n\n       01 Roids OCCURS 1 TO 9999 TIMES DEPENDING ON RoidsLen.\n        02 Abs PIC 9(2).\n        02 Ord PIC 9(2).\n        02 Dist USAGE FLOAT-LONG.\n        02 Ang USAGE FLOAT-LONG.\n       01 RoidsLen PIC 9(4).\n\n       01 Idx PIC 9(4).\n       01 Jdx PIC 9(4).\n       01 Kdx PIC 9(4).\n       01 N PIC 9(4).\n\n       01 cX USAGE FLOAT-LONG.\n       01 cY USAGE FLOAT-LONG.\n       01 cR USAGE FLOAT-LONG.\n       01 cP USAGE FLOAT-LONG.\n\n       PROCEDURE DIVISION.\n       Begin.\n           ACCEPT InputPath FROM ARGUMENT-VALUE.\n           ACCEPT InputPos FROM ARGUMENT-VALUE.\n           OPEN INPUT InputFile.\n\n           READ InputFile.\n           MOVE 1 TO Idx.\n           MOVE 0 TO RoidsLen.\n           PERFORM FOREVER\n            PERFORM VARYING Jdx FROM 1 UNTIL Jdx > InputLen\n             IF Cell(Jdx) IS NOT EQUAL TO \"#\" \n              EXIT PERFORM CYCLE\n             END-IF\n             ADD 1 TO RoidsLen\n             COMPUTE Abs(RoidsLen) = Jdx - 1\n             COMPUTE Ord(RoidsLen) = Idx - 1\n            END-PERFORM\n\n            ADD 1 TO Idx\n            READ InputFile AT END EXIT PERFORM\n           END-PERFORM.\n\n           CLOSE InputFile.\n\n           PERFORM VARYING Idx FROM 1 UNTIL Idx > RoidsLen\n            COMPUTE cX = Abs(Idx) - Abs(InputPos)\n            COMPUTE cY = Ord(Idx) - Ord(InputPos)\n            COMPUTE cR = FUNCTION SQRT(cX**2 + cY**2)\n            COMPUTE cP = (180 * FUNCTION ACOS(\n              cX / FUNCTION SQRT(cX**2 + cY**2)\n             )) / FUNCTION PI()\n            IF cY IS LESS THAN 0\n             COMPUTE cP = FUNCTION MOD(360 - cP, 360)\n            END-IF\n            COMPUTE cP = FUNCTION MOD(360 + cP - 270, 360)\n            MOVE cP TO Ang(Idx)\n            MOVE cR TO Dist(Idx)\n           END-PERFORM.\n\n           SORT Roids ON \n            ASCENDING KEY Ang\n            ASCENDING KEY Dist.\n\n           MOVE Ang(1) TO cP\n           PERFORM VARYING Idx FROM 2 UNTIL Idx > RoidsLen\n            IF Ang(Idx) IS EQUAL TO cP\n             DISPLAY \"Offsetting\" \" \" Idx\n             COMPUTE Ang(Idx) = Ang(Idx - 1) + 360\n             EXIT PERFORM CYCLE\n            END-IF\n            MOVE Ang(Idx) TO cP\n           END-PERFORM.\n           SORT Roids ON \n            ASCENDING KEY Ang\n            ASCENDING KEY Dist.\n\n           PERFORM VARYING Idx FROM 1 UNTIL Idx > RoidsLen\n            DISPLAY Idx \" \" Abs(Idx) \",\" Ord(Idx) \" \" Ang(Idx) \",\"\n            Dist(Idx)\n           END-PERFORM.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "/data/input/customer_records.dat                0001\n/data/input/transaction_log.txt                   0150\n/home/batch/sales_data.seq                        0001\n/usr/local/data/inventory.dat                     0500\n/opt/cobol/files/payroll.txt                      0001"
  }
}