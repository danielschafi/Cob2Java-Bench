{
  "cobol_file": {
    "file_name": "successful_snippet_e087bf9d.cob",
    "content": "      * Author: Dennis Decker Jensen\n      * Date: 9 July 2015\n      * Purpose: Number of Sundays the 1st every month\n      *          from 1 Jan 1900 to 31 Dec 2000 inclusive.\n      * Tectonics: cobc -x euler019.cob\n      * Method:\n      *  This was fun. I inspected some really old BASIC programs I did\n      *  when in puperty, where this sort of thing was a classic,\n      *  and I also got to inspect some of the history of calendars\n      *  once more.\n      *\n      *  This is a lot more complicated than people think. I suspect\n      *  most people would use astronomical time calculations, when\n      *  a few machine code instructions is all that it takes.\n      *\n      *  You can still find old publications with this stuff,\n      *  e.g. find the old magazines of Astronomical Computing,\n      *  Sky & Telescope, in the mid eighties. They published BASIC\n      *  programs right up until 1998 inclusive. It is a shame they\n      *  don't do that anymore. It was very educational for a whole\n      *  generation. You can find the algorithms on the net.\n      *  Wikipedia is reliable in a few instances, and in this instance\n      *  provides a good enough overview:\n      *http://en.wikipedia.org/wiki/Determination_of_the_day_of_the_week\n      *\n      *  Pope Gregor of Rome changed the calendar system annum 1582\n      *  from the Julian calendar to the Gregorian calendar.\n      *\n      *  Different countries modified their calendars at different times\n      *  and in different ways. Some days and weeks were taken out of\n      *  the calendar in the transition, different for each country.\n      *  For example, Denmark did this in 1700, United Kingdom in 1752,\n      *  and Sweden in 1755.\n      *  If we needed to go further back in time, we could use\n      *  the proleptic Gregorian calendar beginning at 01 Jan 0001.\n      *\n      *  The Gregorian calendar introduced spring days and years.\n      *\n      *  Since we need to calculate this for the 20th century only,\n      *  and do not need astronomical time calculations, but strictly\n      *  calendrical calculations, we use the Rata Die (Latin ablative:\n      *  \"with fixed date\") of IBM, instead of Julian days.\n      *  This is based on Base = 7N + K, where Base it in days,\n      *  N is weeks, and K is the day of the week.\n      *  COBOL (and Rexx) has built-in functions for doing this.\n      *  OpenCobol/GnuCOBOL has a rata die of 01 Jan 1601 as day 1.\n      *  The functions are really simple and easy to do yourself, if\n      *  your programming language doesn't provide them.\n       identification division.\n       program-id. euler019.\n       environment division.\n       configuration section.\n       input-output section.\n      ******************************************************************\n       data division.\n       file section.\n       working-storage section.\n\n       01  the-date                pic 9(8) usage is display.\n      *    05  the-year            pic 9999 usage is display.\n      *    05  the-month           pic 99   usage display.\n      *    05  the-day             pic 99   usage display.\n       01  date-num.\n           05  day-num                 pic 9(6).\n           05  week-num                pic 9(6).\n           05  day-of-week-num         pic 9.\n               88  is-sunday           value zero.\n               88  is-monday           value 1.\n               88  is-tuesday          value 2.\n               88  is-wednesday        value 3.\n               88  is-thursday         value 4.\n               88  is-friday           value 5.\n               88  is-saturday         value 6.\n       01  count-of-sundays        pic 999  value is zero.\n       01  start-date.\n           05  start-year          pic 9999 usage display value 1901.\n           05  start-month         pic 99   usage display value 01.\n           05  start-day           pic 99   usage display value 01.\n       01  end-date.\n           05  end-year            pic 9999 usage display value 2000.\n           05  end-month           pic 99   usage display value 12.\n           05  end-day             pic 99   usage display value 31.\n       01  date-counters.\n           05  year-num            pic 9999.\n           05  month-num           pic 99.\n      ******************************************************************\n       procedure division.\n       main-procedure.\n           perform varying year-num from start-year by 1\n                   until year-num > end-year\n               perform varying month-num from 1 by 1\n                       until month-num > 12\n                   string year-num month-num \"01\" into the-date\n                   compute day-num = function integer-of-date(the-date)\n                   divide day-num by 7\n                       giving week-num remainder day-of-week-num\n                   display the-date \": \"\n                       week-num \" * 7 + \" day-of-week-num \" = \" day-num\n                   if is-sunday\n                       add 1 to count-of-sundays\n               end-perform\n           end-perform\n           display \"No Sundays the 1st every month: \" count-of-sundays.\n           stop run.\n       end program euler019.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}