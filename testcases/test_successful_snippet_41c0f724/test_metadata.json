{
  "cobol_file": {
    "file_name": "successful_snippet_41c0f724.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RPN.\n       AUTHOR.  Bill Gunshannon.\n       INSTALLATION.\n       DATE-WRITTEN.  9 Feb 2020.\n      ************************************************************\n      ** Program Abstract:\n      **   Create a stack-based evaluator for an expression in\n      **   reverse Polish notation (RPN)   that also shows the\n      **   changes in the stack as each individual token is\n      **   processed as a table.\n      ************************************************************\n\n       DATA DIVISION.\n\n\n       WORKING-STORAGE SECTION.\n\n       01  LineIn               PIC X(25).\n       01  IP                   PIC 99\n                  VALUE 1.\n       01  CInNum               PIC XXXX.\n\n       01  Stack                PIC S999999V9999999\n               OCCURS  50 times.\n       01  SP                   PIC 99\n                  VALUE 1.\n       01  Operator             PIC X.\n       01  Value1               PIC S999999V9999999.\n       01  Value2               PIC S999999V9999999.\n       01  Result               PIC S999999V9999999.\n       01  Idx                  PIC 99.\n       01  FormatNum            PIC ZZZZZZ9.9999999.\n       01  Zip                  PIC X.\n\n       PROCEDURE DIVISION.\n\n       Main-Program.\n            DISPLAY \"Enter the RPN Equation: \"\n                     WITH NO ADVANCING.\n            ACCEPT LineIn.\n\n            PERFORM UNTIL IP GREATER THAN\n                          FUNCTION STORED-CHAR-LENGTH(LineIn)\n\n\n            UNSTRING LineIn DELIMITED BY SPACE INTO CInNum\n                    WITH POINTER IP\n\n            MOVE CInNum TO Operator\n\n            PERFORM Do-Operation\n\n            PERFORM Show-Stack\n\n            END-PERFORM.\n\n            DISPLAY \"End Result: \" FormatNum\n\n           STOP RUN.\n\n       Do-Operation.\n\n          EVALUATE Operator\n          WHEN \"+\"\n                        PERFORM Pop\n                        Compute Result = Value2 + Value1\n                        PERFORM Push\n\n          WHEN \"-\"\n                        PERFORM Pop\n                        Compute Result = Value2 - Value1\n                        PERFORM Push\n\n          WHEN \"*\"\n                        PERFORM Pop\n                        Compute Result = Value2 * Value1\n                        PERFORM Push\n\n          WHEN \"/\"\n                        PERFORM Pop\n                        Compute Result = Value2 / Value1\n                        PERFORM Push\n\n          WHEN \"^\"\n                        PERFORM Pop\n                        Compute Result = Value2 ** Value1\n                        PERFORM Push\n\n          WHEN NUMERIC\n                       MOVE Operator TO Result\n                       PERFORM Push\n          END-EVALUATE.\n\n\n       Show-Stack.\n\n              DISPLAY \"STACK: \" WITH NO ADVANCING.\n              MOVE 1 TO Idx.\n              PERFORM UNTIL (Idx = SP)\n                      MOVE Stack(Idx) TO FormatNum\n                      IF Stack(Idx) IS NEGATIVE\n                         THEN\n                              DISPLAY \"    -\" FUNCTION TRIM(FormatNum)\n                                             WITH NO ADVANCING\n                         ELSE\n                              DISPLAY FormatNum WITH NO ADVANCING\n                     END-IF\n                      ADD 1 to Idx\n              END-PERFORM.\n                      DISPLAY \" \".\n\n       Push.\n\n             MOVE Result TO Stack(SP)\n             ADD 1 TO SP.\n\n       Pop.\n\n            SUBTRACT 1 FROM SP\n            MOVE Stack(SP) TO Value1\n            SUBTRACT 1 FROM SP\n            MOVE Stack(SP) TO Value2.\n\n\n       END-PROGRAM.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "3 4 + 2 * 7 /            \n15 7 1 1 + - / 3 * 2 1 1 + + -\n5 1 2 + 4 * + 3 -        \n2 3 ^ 4 5 * +            \n10 2 / 3 4 + *           \n100 50 25 - /            \n7 3 2 * - 4 +            \n9 5 + 2 3 ^ /"
  }
}