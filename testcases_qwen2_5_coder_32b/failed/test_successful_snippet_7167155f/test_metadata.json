{
  "cobol_file": {
    "file_name": "successful_snippet_7167155f.cob",
    "content": "identification division.\nprogram-id. evolutionary-program.\ndata division.\nworking-storage section.\n01  evolving-strings.\n    05 target                pic a(28)\n        value 'METHINKS IT IS LIKE A WEASEL'.\n    05 parent                pic a(28).\n    05 offspring-table.\n        10 offspring         pic a(28)\n            occurs 50 times.\n01  fitness-calculations.\n    05 fitness               pic 99.\n    05 highest-fitness       pic 99.\n    05 fittest               pic 99.\n01  parameters.\n    05 character-set         pic a(27)\n        value 'ABCDEFGHIJKLMNOPQRSTUVWXYZ '.\n    05 size-of-generation    pic 99\n        value 50.\n    05 mutation-rate         pic 99\n        value 5.\n01  counters-and-working-variables.\n    05 character-position    pic 99.\n    05 randomization.\n        10 random-seed       pic 9(8).\n        10 random-number     pic 99.\n        10 random-letter     pic 99.\n    05 generation            pic 999.\n    05 child                 pic 99.\n    05 temporary-string      pic a(28).\nprocedure division.\ncontrol-paragraph.\n    accept random-seed from time.\n    move function random(random-seed) to random-number.\n    perform random-letter-paragraph,\n    varying character-position from 1 by 1\n    until character-position is greater than 28.\n    move temporary-string to parent.\n    move zero to generation.\n    perform output-paragraph.\n    perform evolution-paragraph,\n    varying generation from 1 by 1\n    until parent is equal to target.\n    stop run.\nevolution-paragraph.\n    perform mutation-paragraph varying child from 1 by 1\n    until child is greater than size-of-generation.\n    move zero to highest-fitness.\n    move 1 to fittest.\n    perform check-fitness-paragraph varying child from 1 by 1\n    until child is greater than size-of-generation.\n    move offspring(fittest) to parent.\n    perform output-paragraph.\noutput-paragraph.\n    display generation ': ' parent.\nrandom-letter-paragraph.\n    move function random to random-number.\n    divide random-number by 3.80769 giving random-letter.\n    add 1 to random-letter.\n    move character-set(random-letter:1)\n    to temporary-string(character-position:1).\nmutation-paragraph.\n    move parent to temporary-string.\n    perform character-mutation-paragraph,\n    varying character-position from 1 by 1\n    until character-position is greater than 28.\n    move temporary-string to offspring(child).\ncharacter-mutation-paragraph.\n    move function random to random-number.\n    if random-number is less than mutation-rate\n    then perform random-letter-paragraph.\ncheck-fitness-paragraph.\n    move offspring(child) to temporary-string.\n    perform fitness-paragraph.\nfitness-paragraph.\n    move zero to fitness.\n    perform character-fitness-paragraph,\n    varying character-position from 1 by 1\n    until character-position is greater than 28.\n    if fitness is greater than highest-fitness\n    then perform fittest-paragraph.\ncharacter-fitness-paragraph.\n    if temporary-string(character-position:1) is equal to\n    target(character-position:1) then add 1 to fitness.\nfittest-paragraph.\n    move fitness to highest-fitness.\n    move child to fittest.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "00001234\n00005678\n00009101\n00012345\n00015678\n00019101\n00022345\n00025678"
  }
}