{
  "cobol_file": {
    "file_name": "successful_snippet_fbbab019.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AdventOfCode2019-7a.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n       SELECT InputFile ASSIGN TO InputPath\n       ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n       FD InputFile RECORD IS VARYING IN SIZE FROM 1 TO 9999 CHARACTERS.\n       01 InputRec  PIC X(9999).\n\n       WORKING-STORAGE SECTION.\n       01 InputPath PIC X(50).\n       01 Seps      PIC 9(5).\n       01 Str       PIC X(15).\n       01 Ptr       PIC 9(5).\n\n       01 Asm.\n          02 Src           PIC S9(15) OCCURS 9999 TIMES.\n          02 SrcLen        PIC 9(5).\n          02 FILLER        OCCURS 9999 TIMES.\n             03 Op         PIC S9(15).\n             03 FILLER     REDEFINES Op.\n                04 OpParam PIC 9(1) OCCURS 13 TIMES.\n                04 OpCode  PIC 9(2).\n          02 OpPtr         PIC 9(5).\n          02 Inputs        PIC S9(15) OCCURS 99 TIMES.\n          02 InputPtr      PIC 9(2).\n          02 Outputs       PIC S9(15) OCCURS 99 TIMES.\n          02 OutputPtr     PIC 9(2).\n          02 RA            PIC S9(15).\n          02 RB            PIC S9(15).\n          02 RX            PIC S9(15).\n          02 RY            PIC S9(15).\n          02 RZ            PIC S9(15).\n\n       01 Seq              PIC 9(5).\n       01 FILLER           REDEFINES Seq.\n          02 Setting       PIC 9(1) OCCURS 5 TIMES.\n       01 ValidSeq         PIC 9(1).\n       01 Idx              PIC 9(5).\n       01 Jdx              PIC 9(5).\n\n       01 MaxSignal        PIC 9(15).\n       01 BestSeq          PIC 9(5).\n\n       PROCEDURE DIVISION.\n       Begin.\n           ACCEPT InputPath FROM ARGUMENT-VALUE.\n           OPEN INPUT InputFile.\n           READ InputFile.\n           CLOSE InputFile.\n\n           PERFORM ReadAsm.\n\n           MOVE 0 TO MaxSignal.\n\n           PERFORM VARYING Seq FROM 01234 UNTIL Seq GREATER THAN 43210\n            MOVE 1 TO ValidSeq\n            PERFORM VARYING Idx FROM 1 UNTIL Idx IS GREATER THAN 5\n             IF Setting(Idx) IS GREATER THAN 4\n              MOVE 0 TO ValidSeq\n              EXIT PERFORM\n             END-IF\n             PERFORM VARYING Jdx FROM Idx UNTIL Jdx IS GREATER THAN 5\n              IF Idx IS NOT EQUAL TO Jdx \n               AND Setting(Idx) IS EQUAL TO Setting(Jdx)\n               MOVE 0 TO ValidSeq\n               EXIT PERFORM\n              END-IF\n             END-PERFORM\n             IF ValidSeq IS EQUAL TO 0\n              EXIT PERFORM\n             END-IF\n            END-PERFORM\n            IF ValidSeq IS EQUAL TO 0\n             EXIT PERFORM CYCLE\n            END-IF\n\n            MOVE 0 TO Outputs(1)\n            PERFORM VARYING Idx FROM 1 UNTIL Idx IS GREATER THAN 5\n             MOVE Setting(Idx) TO Inputs(1)\n             MOVE Outputs(1) TO Inputs(2)\n             PERFORM ExecuteAsm\n            END-PERFORM\n            IF Outputs(1) IS GREATER THAN MaxSignal\n             MOVE Outputs(1) TO MaxSignal\n             MOVE Seq TO BestSeq\n            END-IF\n           END-PERFORM.\n\n           DISPLAY BestSeq.\n           DISPLAY MaxSignal.\n\n           STOP RUN.\n\n       ReadAsm SECTION.\n           INSPECT InputRec TALLYING Seps FOR ALL \",\".\n           IF Seps < 9999\n            ADD 1 TO Seps\n           ELSE\n            MOVE 9999 TO Seps\n           END-IF.\n\n           MOVE 1 TO Ptr.\n           MOVE 0 TO SrcLen.\n           PERFORM Seps TIMES\n            UNSTRING InputRec DELIMITED BY \",\" INTO Str\n             WITH POINTER Ptr\n            END-UNSTRING\n            ADD 1 TO SrcLen\n            COMPUTE Src(SrcLen) = FUNCTION NUMVAL(Str)\n           END-PERFORM.\n\n       ExecuteAsm SECTION.\n           MOVE 1 TO OpPtr.\n           MOVE 1 TO InputPtr.\n           MOVE 1 TO OutputPtr.\n\n           PERFORM VARYING Ptr FROM 1 UNTIL Ptr IS GREATER THAN SrcLen\n            MOVE Src(Ptr) TO Op(Ptr)\n           END-PERFORM.\n\n           PERFORM UNTIL OpPtr IS GREATER THAN SrcLen\n      *     DISPLAY \"Instruction \" OpPtr \" \" OpCode(OpPtr)\n            COMPUTE RX = OpPtr + 1\n            MOVE 13 TO RY\n            EVALUATE OpCode(OpPtr)\n             WHEN 1  PERFORM AddInstruction\n             WHEN 2  PERFORM MultiplyInstruction\n             WHEN 3  PERFORM InputInstruction\n             WHEN 4  PERFORM OutputInstruction\n             WHEN 5  PERFORM JumpIfTrueInstruction\n             WHEN 6  PERFORM JumpIfFalseInstruction\n             WHEN 7  PERFORM LessThanInstruction\n             WHEN 8  PERFORM EqualsInstruction\n             WHEN 99 EXIT PERFORM\n             WHEN OTHER DISPLAY \"ERROR\" STOP RUN\n            END-EVALUATE\n           END-PERFORM.\n\n       AddInstruction SECTION.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO RB.\n           PERFORM ReadParam.\n           ADD Op(RZ) TO RB.\n           PERFORM ReadParam.\n           MOVE RB TO Op(RZ).\n           ADD 4 TO OpPtr.\n\n       MultiplyInstruction SECTION.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO RB.\n           PERFORM ReadParam.\n           MULTIPLY Op(RZ) BY RB.\n           PERFORM ReadParam.\n           MOVE RB TO Op(RZ).\n           ADD 4 TO OpPtr.\n\n       InputInstruction SECTION.\n           PERFORM ReadParam.\n           MOVE Inputs(InputPtr) TO Op(RZ).\n           ADD 1 TO InputPtr.\n           ADD 2 TO OpPtr.\n\n       OutputInstruction SECTION.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO Outputs(OutputPtr)\n           ADD 1 TO OutputPtr.\n           ADD 2 TO OpPtr.\n\n       JumpIfTrueInstruction SECTION.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO RB.\n           PERFORM ReadParam.\n           IF RB IS NOT EQUAL TO 0\n            COMPUTE OpPtr = Op(RZ) + 1\n           ELSE\n            ADD 3 TO OpPtr\n           END-IF.\n\n       JumpIfFalseInstruction SECTION.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO RB.\n           PERFORM ReadParam.\n           IF RB IS EQUAL TO 0\n            COMPUTE OpPtr = Op(RZ) + 1\n           ELSE\n            ADD 3 TO OpPtr\n           END-IF.\n\n       LessThanInstruction SECTION.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO RA.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO RB.\n           PERFORM ReadParam.\n           IF RA IS LESS THAN RB\n            MOVE 1 TO Op(RZ)\n           ELSE\n            MOVE 0 TO Op(RZ)\n           END-IF.\n           ADD 4 TO OpPtr.\n\n       EqualsInstruction SECTION.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO RA.\n           PERFORM ReadParam.\n           MOVE Op(RZ) TO RB.\n           PERFORM ReadParam.\n           IF RA IS EQUAL TO RB\n            MOVE 1 TO Op(RZ)\n           ELSE\n            MOVE 0 TO Op(RZ)\n           END-IF.\n           ADD 4 TO OpPtr.\n\n       ReadParam SECTION.\n           IF OpParam(OpPtr, RY) IS EQUAL TO 0\n            COMPUTE RZ = Op(RX) + 1\n           ELSE \n            MOVE RX TO RZ\n           END-IF.\n           ADD 1 TO RX.\n           SUBTRACT 1 FROM RY.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "/data/input/file1.txt                                        \n/data/input/file2.txt                                        \n/data/input/file3.txt                                        \n/data/input/file4.txt                                        \n/data/input/file5.txt                                        \n/data/input/file6.txt                                        \n/data/input/file7.txt                                        \n/data/input/file8.txt"
  }
}