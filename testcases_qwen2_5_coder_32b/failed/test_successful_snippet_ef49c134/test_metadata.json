{
  "cobol_file": {
    "file_name": "successful_snippet_ef49c134.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AdventOfCode2019-4b.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n       SELECT InputFile ASSIGN USING InputPath\n       ORGANIZATION IS LINE SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n       FD InputFile RECORD IS VARYING IN SIZE FROM 1 TO 13 CHARACTERS.\n       01 InputRec.\n          02 LowBoundStr  PIC X(6).\n          02 FILLER       PIC X(1).\n          02 HighBoundStr PIC X(6).\n\n       WORKING-STORAGE SECTION.\n       01 InputPath           PIC X(50).\n       01 LowBound            PIC 9(6).\n       01 HighBound           PIC 9(6).\n       01 VInt                PIC 9(6).\n       01 FILLER              REDEFINES VInt.\n          02 VArr             PIC 9(1) OCCURS 6 TIMES.\n       01 C                   PIC 9(6).\n       01 Groups              PIC 9(1) OCCURS 6 TIMES.\n       01 Idx                 PIC 9(1).\n       01 PrevIdx             PIC 9(1).\n       01 CounterUpper PIC 9(1).\n\n\n       PROCEDURE DIVISION.\n       Begin SECTION.\n           ACCEPT InputPath FROM ARGUMENT-VALUE.\n           OPEN INPUT InputFile.\n           READ InputFile.\n\n           COMPUTE LowBound = FUNCTION NUMVAL(LowBoundStr).\n           COMPUTE HighBound = FUNCTION NUMVAL(HighBoundStr).\n           MOVE 0 TO C.\n\n           PERFORM VARYING VInt FROM LowBound \n            UNTIL VInt IS GREATER THAN HighBound\n            IF VArr(1) IS GREATER THAN VArr(2)\n             OR VArr(2) IS GREATER THAN VArr(3)\n             OR VArr(3) IS GREATER THAN VArr(4)\n             OR VArr(4) IS GREATER THAN VArr(5)\n             OR VArr(5) IS GREATER THAN VArr(6)\n             EXIT PERFORM CYCLE\n            END-IF\n\n            IF VArr(1) IS NOT EQUAL TO VArr(2)\n             AND VArr(2) IS NOT EQUAL TO VArr(3)\n             AND VArr(3) IS NOT EQUAL TO VArr(4)\n             AND VArr(4) IS NOT EQUAL TO VArr(5)\n             AND VArr(5) IS NOT EQUAL TO VArr(6)\n             EXIT PERFORM CYCLE\n            END-IF\n\n            PERFORM VARYING Idx FROM 1 UNTIL Idx IS GREATER THAN 6\n             MOVE 0 TO Groups(Idx)\n            END-PERFORM\n            MOVE 1 TO PrevIdx\n            MOVE 1 TO CounterUpper\n            PERFORM VARYING Idx FROM 2 UNTIL Idx IS GREATER THAN 6\n             IF VArr(PrevIdx) IS EQUAL TO VArr(Idx)\n              ADD 1 TO CounterUpper\n             ELSE\n              ADD 1 TO Groups(CounterUpper)\n              MOVE 1 TO CounterUpper\n             END-IF\n             MOVE Idx TO PrevIdx\n            END-PERFORM\n            ADD 1 TO Groups(CounterUpper)\n            IF Groups(2) IS EQUAL TO 0\n             EXIT PERFORM CYCLE\n            END-IF\n\n            ADD 1 TO C\n           END-PERFORM.\n\n           DISPLAY C.\n\n           CLOSE InputFile.\n           STOP RUN.\n\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content": "/data/input/file1.txt                                        \n/data/input/file2.txt                                        \n/data/input/file3.txt                                        \n/data/input/file4.txt                                        \n/data/input/file5.txt                                        \n/data/input/file6.txt                                        \n/data/input/file7.txt                                        \n/data/input/file8.txt"
  }
}