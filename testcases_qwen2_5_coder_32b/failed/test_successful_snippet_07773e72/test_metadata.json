{
  "cobol_file": {
    "file_name": "successful_snippet_07773e72.cob",
    "content": "       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n      * As far as I got on day 16.  I understand how to parse the\n      * packets, and I can do it by hand, but don't see an automatable\n      * pattern for dealing with the type 4 literals.\n      *\n       Function-ID. srl.\n       Environment Division.\n       Configuration Section.\n       Repository.\n           FUNCTION ALL INTRINSIC.\n       Data Division.\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  myname             PIC X(008)         VALUE 'sll'.\n\n       Local-Storage Section.\n       01  WORK-AREAS.\n           05  divisor            PIC 9(009) COMP-5  Value 0.\n\n       Linkage Section.\n       01  in-4-byte-int          PIC 9(009) COMP-5.\n       01  in-nb-bits             PIC 9(009) COMP-5.\n       01  out-4-byte-int         PIC 9(009) COMP-5.\n\n       Procedure Division Using\n           in-4-byte-int\n           in-nb-bits\n         Returning\n           out-4-byte-int\n           .\n\n           Compute out-4-byte-int = in-4-byte-int / (2 ** in-nb-bits)\n             On Size Error\n               Display\n                 myname ' size error '\n                 in-4-byte-int ' ' in-nb-bits\n           End-Compute\n\n           Goback.\n\n       END FUNCTION srl.\n\n       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n       Function-ID. sll.\n       Environment Division.\n       Configuration Section.\n       Repository.\n           FUNCTION ALL INTRINSIC.\n       Data Division.\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  myname             PIC X(008)         VALUE 'srl'.\n\n       Local-Storage Section.\n       01  WORK-AREAS.\n           05  divisor            PIC 9(009) COMP-5  Value 0.\n\n       Linkage Section.\n       01  in-4-byte-int          PIC 9(009) COMP-5.\n       01  in-nb-bits             PIC 9(009) COMP-5.\n       01  out-4-byte-int         PIC 9(009) COMP-5.\n\n       Procedure Division Using\n           in-4-byte-int\n           in-nb-bits\n         Returning\n           out-4-byte-int\n           .\n\n           Compute out-4-byte-int = in-4-byte-int * (2 ** in-nb-bits)\n             On Size Error\n               Display\n                 myname ' size error '\n                 in-4-byte-int ' ' in-nb-bits\n           End-Compute\n\n           Goback.\n\n       END FUNCTION sll.\n\n       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n       Function-ID. bittest.\n       Environment Division.\n       Configuration Section.\n       Repository.\n           FUNCTION ALL INTRINSIC.\n       Data Division.\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  myname             PIC X(008)         VALUE 'bittest'.\n\n       Local-Storage Section.\n       01  WORK-AREAS.\n           05  eight-byte-int1    PIC 9(018) COMP-5  Value 0.\n           05  eight-byte-int2    PIC 9(018) COMP-5  Value 0.\n\n       Linkage Section.\n       01  in-4-byte-int          PIC 9(009) COMP-5.\n       01  in-bit-to-test         PIC 9(009) COMP-5.\n       01  out-4-byte-int         PIC 9(009) COMP-5.\n\n       Procedure Division Using\n           in-4-byte-int\n           in-bit-to-test\n         Returning\n           out-4-byte-int\n           .\n\n           Move in-4-byte-int To eight-byte-int2\n           Compute eight-byte-int1 = 2 ** in-bit-to-test\n             On Size Error\n               Display\n                 myname ' size error '\n                 in-bit-to-test\n           End-Compute\n\n           Call 'CBL_AND' Using\n               eight-byte-int1\n               eight-byte-int2\n               By Value 1\n           End-Call\n\n           If eight-byte-int1 = eight-byte-int2\n               Move 1 To out-4-byte-int\n           Else\n               Move 0 To out-4-byte-int\n           End-If\n\n           Goback.\n\n       END FUNCTION bittest.\n\n       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n       Program-ID. cs16a.\n       Environment Division.\n       Configuration Section.\n       Repository.\n           Function srl\n           Function sll\n           FUNCTION ALL INTRINSIC.\n       Input-Output Section.\n       File-Control.\n           Select INPT-DATA            Assign Keyboard.\n       Data Division.\n       File Section.\n       FD  INPT-DATA.\n       01  INPT-DATA-REC-MAX PIC X(2048).\n\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  myname             PIC X(008)         VALUE 'cs16a'.\n\n       01  WORK-AREAS.\n           05  ws-rec-count       PIC 9(009) COMP    VALUE 0.\n           05  inst-ptr           Pic 9(009) Comp    Value 1.\n           05  vrsn-tot           Pic 9(009) Comp    Value 0.\n           05  cli-args           PIC X(080)         VALUE LOW-VALUES.\n           05  process-type       PIC X(004)         VALUE LOW-VALUES.\n\n       01  WS-INPT-DATA.\n           05  ws-inpt            PIC X(2048)        VALUE SPACES.\n\n       01  SWITCHES.\n           05  INPT-DATA-EOF-SW   PIC X(001)         VALUE 'N'.\n               88  INPT-DATA-EOF                     VALUE 'Y'.\n           05  PROCESS-SW         PIC X(004)         VALUE LOW-VALUES.\n               88  process-test                      VALUE 'TEST'.\n\n       01  Instruction-Table.\n           05  inst-tbl occurs 1000.\n               10  inst-vrsn      Pic 9(009) Comp-5.\n               10  inst-type      Pic 9(009) comp-5.\n\n       Procedure Division.\n           Display myname Space Current-Date\n\n           Accept cli-args From Command-Line\n           Unstring cli-args Delimited Space Or Low-Value\n             Into process-type\n           End-UnstrinG\n\n           Move Upper-Case(process-type)\n             To process-sw\n\n           Open Input inpt-data\n\n           Perform 8010-Read-Inpt-Data\n\n           Close inpt-data\n\n           Perform 1000-Parse-Input\n             Until ws-inpt(inst-ptr:1) = Space\n\n           Display myname ' records read    ' WS-REC-COUNT\n\n           Display myname Space CURRENT-DATE\n\n           GOBACK.\n\n       1000-Parse-Input.\n           Call 'parseit' Using\n               WS-INPT\n               inst-ptr\n               vrsn-tot\n           End-Call\n           .\n\n       8010-READ-INPT-DATA.\n           Initialize ws-inpt-data\n           Read Inpt-Data Into ws-inpt-data\n             At End Set inpt-data-eof To True\n             Not At End\n               Add 1 To ws-rec-count\n           End-Read\n\n           .\n\n\n       END PROGRAM cs16a.\n\n       ID Division.\n       Program-ID. parseit Recursive.\n       Environment Division.\n       Configuration Section.\n       Repository.\n           FUNCTION srl\n           FUNCTION sll\n           Function bittest\n           FUNCTION ALL INTRINSIC.\n       Data Division.\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  myname             PIC X(008)         VALUE 'cs16a'.\n           05  zero-bit           Pic 9(009) Comp-5  Value 1.\n           05  four-bit           Pic 9(009) Comp-5  Value 4.\n           05  bits-2-3-4         Pic 9(018) Comp-5  Value 28.\n           05  bit-tbl-val.\n               10  .\n                   15             Pic X(001)         Value '0'.\n                   15             Pic 9(009) Comp-5  Value 0.\n               10  .\n                   15             Pic X(001)         Value '1'.\n                   15             Pic 9(009) Comp-5  Value 1.\n               10  .\n                   15             Pic X(001)         Value '2'.\n                   15             Pic 9(009) Comp-5  Value 2.\n               10  .\n                   15             Pic X(001)         Value '3'.\n                   15             Pic 9(009) Comp-5  Value 3.\n               10  .\n                   15             Pic X(001)         Value '4'.\n                   15             Pic 9(009) Comp-5  Value 4.\n               10  .\n                   15             Pic X(001)         Value '5'.\n                   15             Pic 9(009) Comp-5  Value 5.\n               10  .\n                   15             Pic X(001)         Value '6'.\n                   15             Pic 9(009) Comp-5  Value 6.\n               10  .\n                   15             Pic X(001)         Value '7'.\n                   15             Pic 9(009) Comp-5  Value 7.\n               10  .\n                   15             Pic X(001)         Value '8'.\n                   15             Pic 9(009) Comp-5  Value 8.\n               10  .\n                   15             Pic X(001)         Value '9'.\n                   15             Pic 9(009) Comp-5  Value 9.\n               10  .\n                   15             Pic X(001)         Value 'A'.\n                   15             Pic 9(009) Comp-5  Value 10.\n               10  .\n                   15             Pic X(001)         Value 'B'.\n                   15             Pic 9(009) Comp-5  Value 11.\n               10  .\n                   15             Pic X(001)         Value 'C'.\n                   15             Pic 9(009) Comp-5  Value 12.\n               10  .\n                   15             Pic X(001)         Value 'D'.\n                   15             Pic 9(009) Comp-5  Value 13.\n               10  .\n                   15             Pic X(001)         Value 'E'.\n                   15             Pic 9(009) Comp-5  Value 14.\n               10  .\n                   15             Pic X(001)         Value 'F'.\n                   15             Pic 9(009) Comp-5  Value 15.\n           05  bit-tbl\n               Redefines bit-tbl-val\n               Occurs 16\n               Ascending Key hex-digit\n               Indexed bit-tbl-idx.\n               10  hex-digit      Pic X(001).\n               10  hex-bit-val    Pic 9(009) Comp-5.\n\n\n       Local-Storage Section.\n       01  work-areas.\n           05  nb-bits            Pic 9(009) Comp-5.\n           05  first-four-bits    Pic 9(009) Comp-5.\n           05  second-four-bits   Pic 9(009) Comp-5.\n           05  bit-string1        Pic 9(009) Comp-5.\n           05  bit-string2        Pic 9(009) Comp-5.\n           05  bit-string3        Pic 9(009) Comp-5.\n           05  bit-string4        Pic 9(009) Comp-5.\n           05  bit-string5        Pic 9(018) Comp-5.\n           05  bit-string6        Pic 9(018) Comp-5.\n           05  inst-vers          Pic 9(018) Comp-5.\n\n       01  switches.\n           05  continue-sw        Pic 9(009)         Value 9.\n               88  we-must-continue                  Value 1.\n               88  we-are-done                       Value 0.\n\n       Linkage Section.\n       01  inst-string            Pic X(2048).\n       01  inst-ptr               Pic 9(009).\n       01  vrsn-tot               Pic 9(009).\n\n       Procedure Division Using\n           inst-string\n           inst-ptr\n           vrsn-tot\n           .\n\n           Search All bit-tbl\n             When inst-string(inst-ptr:1) = hex-digit(bit-tbl-idx)\n                  Move hex-bit-val(bit-tbl-idx)\n                    To bit-string1 first-four-bits\n           End-Search\n\n           Move 1 To nb-bits\n           Move srl(bit-string1,nb-bits) to bit-string2\n           Add  bit-string2 to vrsn-tot\n\n           Add 1 to inst-ptr\n           Search All bit-tbl\n             When inst-string(inst-ptr:1) = hex-digit(bit-tbl-idx)\n                  Move hex-bit-val(bit-tbl-idx)\n                    To bit-string6 second-four-bits\n           End-Search\n\n           Move 4 To nb-bits\n           Move sll(first-four-bits,nb-bits) To bit-string5\n           Add bit-string5 To bit-string6\n\n           Call 'CBL_AND' Using\n               bits-2-3-4\n               bit-string6\n               By Value 1\n           End-Call\n\n           Move bit-string6 To bit-string1\n           Move 1 To nb-bits\n           Move srl(bit-string1,nb-bits) To bit-string2\n\n           If bit-string2 = four-bit\n               Move bittest(zero-bit,second-four-bits) To continue-sw\n               Perform 2000-Literal\n                 Until we-are-done\n           End-If\n\n           If inst-string(inst-ptr:1) Not = Space\n               Call 'parseit' Using\n                   inst-string\n                   inst-ptr\n                   vrsn-tot\n               End-Call\n           End-If\n\n           Goback\n           .\n\n       2000-Literal.\n           Add 1 to inst-ptr\n           Search All bit-tbl\n             When inst-string(inst-ptr:1) = hex-digit(bit-tbl-idx)\n                  Move hex-bit-val(bit-tbl-idx)\n                    To bit-string1\n           End-Search\n\n           Add 1 to inst-ptr\n           Search All bit-tbl\n             When inst-string(inst-ptr:1) = hex-digit(bit-tbl-idx)\n                  Move hex-bit-val(bit-tbl-idx)\n                    To bit-string2\n           End-Search\n\n           Move 4 to nb-bits\n           Move bit-string6 to bit-string2\n           Move sll(bit-string2,nb-bits) To bit-string3\n\n           Move bittest(zero-bit,second-four-bits) To continue-sw\n           .\n\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": {
    "file_name": "sysin.txt",
    "content
  }
}