{
  "cobol_file": {
    "file_name": "successful_snippet_76717ef8.cob",
    "content": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID.                      MERGESORT.\n       AUTHOR.                          DAVE STRATFORD.\n       DATE-WRITTEN.                    APRIL 2010.\n       INSTALLATION.                    HEXAGON SYSTEMS LIMITED.\n      ******************************************************************\n      *                            MERGE SORT                          *\n      *  The Merge sort uses a completely different paradigm, one of   *\n      * divide and conquer, to many of the other sorts. The data set   *\n      * is split into smaller sub sets upon which are sorted and then  *\n      * merged together to form the final sorted data set.             *\n      *  This version uses the recursive method. Split the data set in *\n      * half and perform a merge sort on each half. This in turn splits*\n      * each half again and again until each set is just one or 2 items*\n      * long. A set of one item is already sorted so is ignored, a set *\n      * of two is compared and swapped as necessary. The smaller data  *\n      * sets are then repeatedly merged together to eventually form the*\n      * full, sorted, set.                                             *\n      *  Since cobol cannot do recursion this module only simulates it *\n      * so is not as fast as a normal recursive version would be.      *\n      *  Scales very well to larger data sets, its relative complexity *\n      * means it is not suited to sorting smaller data sets: use an    *\n      * Insertion sort instead as the Merge sort is a stable sort.     *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SOURCE-COMPUTER.                 ICL VME.\n       OBJECT-COMPUTER.                 ICL VME.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT FA-INPUT-FILE  ASSIGN FL01.\n           SELECT FB-OUTPUT-FILE ASSIGN FL02.\n\n       DATA DIVISION.\n       FILE SECTION.\n       FD  FA-INPUT-FILE.\n       01  FA-INPUT-REC.\n         03  FA-DATA                    PIC 9(6).\n\n       FD  FB-OUTPUT-FILE.\n       01  FB-OUTPUT-REC                PIC 9(6).\n\n       WORKING-STORAGE SECTION.\n       01  WA-IDENTITY.\n         03  WA-PROGNAME                PIC X(10) VALUE \"MERGESORT\".\n         03  WA-VERSION                 PIC X(6) VALUE \"000001\".\n\n       01  WB-TABLE.\n         03  WB-ENTRY                   PIC 9(8) COMP SYNC OCCURS 100000\n                                                 INDEXED BY WB-IX-1\n                                                            WB-IX-2.\n\n       01  WC-VARS.\n         03  WC-SIZE                    PIC S9(8) COMP SYNC.\n         03  WC-TEMP                    PIC S9(8) COMP SYNC.\n         03  WC-START                   PIC S9(8) COMP SYNC.\n         03  WC-MIDDLE                  PIC S9(8) COMP SYNC.\n         03  WC-END                     PIC S9(8) COMP SYNC.\n\n       01  WD-FIRST-HALF.\n         03  WD-FH-MAX                  PIC S9(8) COMP SYNC.\n         03  WD-ENTRY                   PIC 9(8) COMP SYNC OCCURS 50000\n                                                 INDEXED BY WD-IX.\n\n       01  WF-CONDITION-FLAGS.\n         03  WF-EOF-FLAG                PIC X.\n           88  END-OF-FILE              VALUE \"Y\".\n         03  WF-EMPTY-FILE-FLAG         PIC X.\n           88  EMPTY-FILE               VALUE \"Y\".\n\n       01  WS-STACK.\n      * This stack is big enough to sort a list of 1million items.\n         03  WS-STACK-ENTRY OCCURS 20 INDEXED BY WS-STACK-TOP.\n           05  WS-START                 PIC S9(8) COMP SYNC.\n           05  WS-MIDDLE                PIC S9(8) COMP SYNC.\n           05  WS-END                   PIC S9(8) COMP SYNC.\n           05  WS-FS-FLAG               PIC X.\n             88  FIRST-HALF             VALUE \"F\".\n             88  SECOND-HALF            VALUE \"S\".\n             88  WS-ALL                 VALUE \"A\".\n           05  WS-IO-FLAG               PIC X.\n             88  WS-IN                  VALUE \"I\".\n             88  WS-OUT                 VALUE \"O\".\n\n       PROCEDURE DIVISION.\n       A-MAIN SECTION.\n       A-000.\n           PERFORM B-INITIALISE.\n\n           IF NOT EMPTY-FILE\n              PERFORM C-PROCESS.\n\n           PERFORM D-FINISH.\n\n       A-999.\n           STOP RUN.\n\n       B-INITIALISE SECTION.\n       B-000.\n           DISPLAY \"*** \" WA-PROGNAME \" VERSION \"\n                          WA-VERSION \" STARTING ***\".\n\n           MOVE ALL \"N\" TO WF-CONDITION-FLAGS.\n           OPEN INPUT FA-INPUT-FILE.\n           SET WB-IX-1 TO 0.\n\n           READ FA-INPUT-FILE AT END MOVE \"Y\" TO WF-EOF-FLAG\n                                                 WF-EMPTY-FILE-FLAG.\n\n           PERFORM BA-READ-INPUT UNTIL END-OF-FILE.\n\n           CLOSE FA-INPUT-FILE.\n\n           SET WC-SIZE TO WB-IX-1.\n\n       B-999.\n           EXIT.\n\n       BA-READ-INPUT SECTION.\n       BA-000.\n           SET WB-IX-1 UP BY 1.\n           MOVE FA-DATA TO WB-ENTRY(WB-IX-1).\n\n           READ FA-INPUT-FILE AT END MOVE \"Y\" TO WF-EOF-FLAG.\n\n       BA-999.\n           EXIT.\n\n       C-PROCESS SECTION.\n       C-000.\n           DISPLAY \"SORT STARTING\".\n\n           MOVE 1           TO WS-START(1).\n           MOVE WC-SIZE     TO WS-END(1).\n           MOVE \"F\"         TO WS-FS-FLAG(1).\n           MOVE \"I\"         TO WS-IO-FLAG(1).\n           SET WS-STACK-TOP TO 2.\n\n           PERFORM E-MERGE-SORT UNTIL WS-OUT(1).\n\n           DISPLAY \"SORT FINISHED\".\n\n       C-999.\n           EXIT.\n\n       D-FINISH SECTION.\n       D-000.\n           OPEN OUTPUT FB-OUTPUT-FILE.\n           SET WB-IX-1 TO 1.\n\n           PERFORM DA-WRITE-OUTPUT UNTIL WB-IX-1 > WC-SIZE.\n\n           CLOSE FB-OUTPUT-FILE.\n\n           DISPLAY \"*** \" WA-PROGNAME \" FINISHED ***\".\n\n       D-999.\n           EXIT.\n\n       DA-WRITE-OUTPUT SECTION.\n       DA-000.\n           WRITE FB-OUTPUT-REC FROM WB-ENTRY(WB-IX-1).\n           SET WB-IX-1 UP BY 1.\n\n       DA-999.\n           EXIT.\n\n      ******************************************************************\n       E-MERGE-SORT SECTION.\n      *=====================                                           *\n      * This section controls the simulated recursion.                 *\n      ******************************************************************\n       E-000.\n           IF WS-OUT(WS-STACK-TOP - 1)\n              GO TO E-010. \n\n           MOVE WS-START(WS-STACK-TOP - 1) TO WC-START.\n           MOVE WS-END(WS-STACK-TOP - 1)   TO WC-END.\n\n      * First check size of part we are dealing with.\n           IF WC-END - WC-START = 0\n      * Only 1 number in range, so simply set for output, and move on\n              MOVE \"O\" TO WS-IO-FLAG(WS-STACK-TOP - 1)\n              GO TO E-010.\n\n           IF WC-END - WC-START = 1\n      * 2 numbers, so compare and swap as necessary. Set for output\n              MOVE \"O\" TO WS-IO-FLAG(WS-STACK-TOP - 1)\n              IF WB-ENTRY(WC-START) > WB-ENTRY(WC-END)\n                 MOVE WB-ENTRY(WC-START) TO WC-TEMP\n                 MOVE WB-ENTRY(WC-END) TO WB-ENTRY(WC-START)\n                 MOVE WC-TEMP TO WB-ENTRY(WC-END)\n                 GO TO E-010\n              ELSE\n                 GO TO E-010.\n\n      * More than 2, so split and carry on down\n           COMPUTE WC-MIDDLE = ( WC-START + WC-END ) / 2.\n\n           MOVE WC-START  TO WS-START(WS-STACK-TOP).\n           MOVE WC-MIDDLE TO WS-END(WS-STACK-TOP).\n           MOVE \"F\"       TO WS-FS-FLAG(WS-STACK-TOP).\n           MOVE \"I\"       TO WS-IO-FLAG(WS-STACK-TOP).\n           SET WS-STACK-TOP UP BY 1.\n\n           GO TO E-999.\n\n       E-010.\n           SET WS-STACK-TOP DOWN BY 1.\n\n           IF SECOND-HALF(WS-STACK-TOP)\n              GO TO E-020.\n\n           MOVE WS-START(WS-STACK-TOP - 1) TO WC-START.\n           MOVE WS-END(WS-STACK-TOP - 1)   TO WC-END.\n           COMPUTE WC-MIDDLE = ( WC-START + WC-END ) / 2 + 1.\n\n           MOVE WC-MIDDLE TO WS-START(WS-STACK-TOP).\n           MOVE WC-END    TO WS-END(WS-STACK-TOP).\n           MOVE \"S\"       TO WS-FS-FLAG(WS-STACK-TOP).\n           MOVE \"I\"       TO WS-IO-FLAG(WS-STACK-TOP).\n           SET WS-STACK-TOP UP BY 1.\n\n           GO TO E-999.\n\n       E-020.\n           MOVE WS-START(WS-STACK-TOP - 1) TO WC-START.\n           MOVE WS-END(WS-STACK-TOP - 1)   TO WC-END.\n           COMPUTE WC-MIDDLE = ( WC-START + WC-END ) / 2.\n           PERFORM H-PROCESS-MERGE.\n           MOVE \"O\" TO WS-IO-FLAG(WS-STACK-TOP - 1).\n\n       E-999.\n           EXIT.\n\n      ******************************************************************\n       H-PROCESS-MERGE SECTION.\n      *========================                                        *\n      * This section identifies which data is to be merged, and then   *\n      * merges the two data streams into a single larger data stream.  *\n      ******************************************************************\n       H-000.\n           INITIALISE WD-FIRST-HALF.\n           COMPUTE WD-FH-MAX = WC-MIDDLE - WC-START + 1.\n           SET WD-IX                        TO 1.\n\n           PERFORM HA-COPY-OUT VARYING WB-IX-1 FROM WC-START BY 1\n                               UNTIL WB-IX-1 > WC-MIDDLE.\n\n           SET WB-IX-1 TO WC-START.\n           SET WB-IX-2 TO WC-MIDDLE.\n           SET WB-IX-2 UP BY 1.\n           SET WD-IX   TO 1.\n          \n           PERFORM HB-MERGE UNTIL WD-IX > WD-FH-MAX OR WB-IX-2 > WC-END.\n\n           PERFORM HC-COPY-BACK UNTIL WD-IX > WD-FH-MAX.\n\n       H-999.\n           EXIT.\n\n       HA-COPY-OUT SECTION.\n       HA-000.\n           MOVE WB-ENTRY(WB-IX-1) TO WD-ENTRY(WD-IX).\n           SET WD-IX UP BY 1.\n\n       HA-999.\n           EXIT.\n\n       HB-MERGE SECTION.\n       HB-000.\n           IF WB-ENTRY(WB-IX-2) < WD-ENTRY(WD-IX)\n              MOVE WB-ENTRY(WB-IX-2) TO WB-ENTRY(WB-IX-1)\n              SET WB-IX-2            UP BY 1\n           ELSE\n              MOVE WD-ENTRY(WD-IX) TO WB-ENTRY(WB-IX-1)\n              SET WD-IX            UP BY 1.\n\n           SET WB-IX-1 UP BY 1.\n\n       HB-999.\n           EXIT.\n\n       HC-COPY-BACK SECTION.\n       HC-000.\n           MOVE WD-ENTRY(WD-IX) TO WB-ENTRY(WB-IX-1).\n           SET WD-IX            UP BY 1.\n           SET WB-IX-1          UP BY 1.\n\n       HC-999.\n           EXIT.\n"
  },
  "input_files": [],
  "output_files": [],
  "input_output_files": [],
  "sysin_file": null
}