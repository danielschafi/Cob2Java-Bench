{
    "cobol_file": {
        "file_name": "successful_snippet_998699aa.cob",
        "content": " Identification division.                                        \n Program-id. rc-1d-cell.                                         \n \n Data division.                                                  \n Working-storage section.                                        \n \n\n 01 max-gens            pic  999  value   9.                     \n 01 state-width         pic   99  value  20.                     \n 01 state-table-init    pic x(20) value \".@@@.@@.@.@.@.@..@..\".  \n 01 alive               pic    x  value \"@\".                     \n 01 dead                pic    x  value \".\".                     \n \n\n 01 state-gen           pic  999  value   0.                     \n 01 state-row.                                                  \n    05 state-row-gen   pic zz9.                                \n    05 filler          pic  xx   value \": \".                   \n    05 state-table.                                            \n        10 state-cells pic   x   occurs 20 times.              \n \n\n 01 new-state-table.                                            \n    05 new-state-cells pic   x   occurs 20 times.              \n \n\n 01 cell-index          pic   99.                               \n    88 at-beginning    value  1.                               \n    88 is-inside       values 2 thru 19.                       \n    88 at-end          value 20.                               \n \n\n 01 neighbor-count-def.                          \n   03 neighbor-count      pic   9.\n     88 is-comfy        value 1.                    \n     88 is-ripe         value 2.                    \n \n Procedure division.                                \n     Perform Init-state-table.                      \n     Perform max-gens times                         \n         perform Display-row                        \n         perform Next-state                         \n     end-perform.                                   \n     Perform Display-row.                           \n     Stop run.                                      \n \n Display-row.                                       \n     Move state-gen to state-row-gen.     \n     Display state-row.                   \n \n\n Next-state.                              \n     Add 1 to state-gen.                  \n     Move state-table to new-state-table. \n \n     Perform with test after              \n         varying cell-index from 1 by 1   \n         until at-end                     \n         perform Count-neighbors          \n         perform Die-off                             \n         perform New-births                          \n     end-perform                                     \n \n     move new-state-table to state-table.            \n \n\n Die-off.                                            \n     if state-cells(cell-index) =                    \n     alive and not is-comfy    \n         then move dead to new-state-cells(cell-index)           \n     end-if                                                      \n     .                                                           \n \n\n New-births.                                                     \n     if state-cells(cell-index) = dead and is-ripe\n         then move alive to new-state-cells(cell-index)          \n     end-if                                                      \n    .                                                           \n\n Count-neighbors.                                                \n     Move 0 to neighbor-count                        \n     if at-beginning or at-end then                              \n         add 1 to neighbor-count                      \n     else                                                        \n       if is-inside and state-cells(cell-index - 1) = alive        \n       then                                                        \n           add 1 to neighbor-count                     \n       end-if                                                      \n       if is-inside and state-cells(cell-index + 1) = alive        \n       then                                                        \n           add 1 to neighbor-count                     \n       end-if                                                       \n     end-if                                                        \n     .                                                             \n \n\n\n\n \n Init-state-table.                                                 \n     Perform with test after                    \n         varying cell-index from 1 by 1         \n         until at-end                           \n         move state-table-init(cell-index:1)    \n           to state-cells(cell-index)           \n      end-perform\n      .\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": null,
    "code_file": "successful_snippet_998699aa.cob",
    "compiled_file": "successful_snippet_998699aa",
    "expected_output": "  0: .@@@.@@.@.@.@.@..@..\n  1: .@.@@@@@.@.@.@......\n  2: ..@@...@@.@.@.......\n  3: ..@@...@@@.@........\n  4: ..@@...@.@@.........\n  5: ..@@....@@@.........\n  6: ..@@....@.@.........\n  7: ..@@.....@..........\n  8: ..@@................\n  9: ..@@................\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}