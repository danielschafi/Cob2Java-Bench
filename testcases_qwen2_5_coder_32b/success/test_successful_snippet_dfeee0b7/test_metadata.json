{
    "cobol_file": {
        "file_name": "successful_snippet_dfeee0b7.cob",
        "content": "      ******************************************************************\n      * author: Erik Eriksen\n      * date: 2022-04-16\n      * purpose: Examples of using various forms of the ACCEPT verb.\n      * tectonics: cobc\n      ******************************************************************\n       identification division.\n       program-id. accept-example.\n       data division.\n       file section.\n       working-storage section.\n\n       01  ws-input                     pic x(16).\n\n       procedure division.\n       main-procedure.\n\n      *> Basic accept syntax. Entered value is stored in the variable\n      *> provided.\n           display \"Simple accept. Enter a value: \" with no advancing\n           accept ws-input\n           display \"You entered: \" ws-input\n\n      *> Accept omitted waits for user input but does not store it\n           display \"Press any key to enter screen mode.\"\n           accept omitted\n\n      *> From here out, the accept command examples use parameters.\n      *> Once this happens, the program enteres screen mode which requires\n      *> the inclusion of the line and column numbers to be specified\n      *> to each input/output statement when not using the\n      *> screen section. Here I am using \"at yyxx\" to do this.\n\n      *> Timeout specifies how long to wait for the user to enter a\n      *> value before continuing. The scale of this can be controlled\n      *> using the environment setting:\n      *>\n      *> set environment \"COB_TIMEOUT_SCALE\" to '1000'.\n      *>\n      *> default value is 1000 (1 second). Can be any value between\n      *> zero and 1000.\n           display \"Enter value or wait 3 seconds: \" at 0101\n           accept ws-input timeout 3 at 0132\n           display \"You entered: \" at 0201 ws-input at 0214\n\n      *> auto-skip automatically enteres the user's input once it reaches\n      *> the end width of the variable size. In this case, it's 16\n      *> characters as we declared ws-input as PIC X(16). The user\n      *> can still enter less characters and submit using the enter\n      *> key.\n           display \"Enter 16 chars to auto skip: \" at 0301\n           accept ws-input auto-skip at 0330\n           display \"You entered: \" at 0401 ws-input at 0414\n\n      *> No-echo is similar to secure (see accept-secure.cbl) where the\n      *> text entered by the user is not displayed on the screen during\n      *> entry. The difference is that secure will show '*' for characters\n      *> where no-echo will not show anything.\n           display \"Enter a value (no echo): \" at 0501\n           accept ws-input no-echo at 0526\n           display \"You entered: \" at 0601 ws-input at 0614\n\n\n      *> 'upper' converts any input from the user to uppercase. This is\n      *> helpful when comparing user input to some string constant.\n      *> Example: \"Enter y/n: \" the user can enter in either case and\n      *> when you check the value, you only need to check if the uppercase\n      *> values match.\n           display \"Enter a value: \" at 0701\n           accept ws-input upper at 0716\n           display \"You entered: \" at 0801 ws-input at 0814\n\n\n           goback.\n       end program accept-example.\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": {
        "file_name": "sysin.txt",
        "content": "Here is the raw input data for the COBOL SYSIN based on the provided requirements:\n\n```\nSampleInput1\nSampleInput2\nSampleInput3\nSampleInput4\nSampleInput5\nSampleInput6\nSampleInput7\nSampleInput8"
    },
    "code_file": "successful_snippet_dfeee0b7.cob",
    "compiled_file": "successful_snippet_dfeee0b7",
    "expected_output": "Simple accept. Enter a value: You entered: Here is the raw \nPress any key to enter screen mode.\n\u001b[?1049h\u001b[22;0;0t\u001b[1;24r\u001b(B\u001b[m\u001b[4l\u001b[?7h\u001b[?1h\u001b=\u001b[39;49m\u001b[?12;25h\u001b[?1006;1000h\u001b[39;49m\u001b[37m\u001b[40m\u001b[H\u001b[2JEnter value or wait 3 seconds: \u001b[1;48H\n\u001b[2dYou entered: \u001b[2;30H\n\u001b[3dEnter 16 chars to auto skip: \u001b[3;46H\n\u001b[4dYou entered: \u001b[4;30H\n\u001b[5dEnter a value (no echo): \u001b[5;42H\n\u001b[6dYou entered: \u001b[6;30H\n\u001b[7dEnter a value: \u001b[7;32H\n\u001b[8dYou entered: \u001b[8;30H\n\u001b[9dend of program, please press a key to exit \u001b[?1006;1000l\u001b[39;49m\n\u001b[24d\u001b[K\u001b[24;1H\u001b[?12l\u001b[?25h\u001b[?1049l\u001b[23;0;0t\n\u001b[?1l\u001b>",
    "expected_output_files": [],
    "expected_input_output_files": []
}