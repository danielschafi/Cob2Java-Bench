{
    "cobol_file": {
        "file_name": "successful_snippet_3f9775d5.cob",
        "content": "       identification division.\n       program-id. arbitrary-precision-integers.\n       remarks. Uses opaque libgmp internals that are built into libcob.\n\n       data division.\n       working-storage section.\n       01 gmp-number.\n          05 mp-alloc          usage binary-long.\n          05 mp-size           usage binary-long.\n          05 mp-limb           usage pointer.\n       01 gmp-build.\n          05 mp-alloc          usage binary-long.\n          05 mp-size           usage binary-long.\n          05 mp-limb           usage pointer.\n\n       01 the-int              usage binary-c-long unsigned.\n       01 the-exponent         usage binary-c-long unsigned.\n       01 valid-exponent       usage binary-long value 1.\n          88 cant-use          value 0 when set to false 1.\n\n       01 number-string        usage pointer.\n       01 number-length        usage binary-long.\n\n       01 window-width         constant as 20.\n       01 limit-width          usage binary-long.       \n       01 number-buffer        pic x(window-width) based.\n       \n       procedure division.\n       arbitrary-main.\n\n      \n       perform initialize-integers.\n       display \"10 ** 19       \u00a0: \" with no advancing\n       move 10 to the-int\n       move 19 to the-exponent\n       perform raise-pow-accrete-exponent\n       perform show-all-or-portion\n       perform clean-up\n\n      \n       perform initialize-integers.\n       display \"12345 ** 9     \u00a0: \" with no advancing\n       move 12345 to the-int\n       move 9 to the-exponent\n       perform raise-pow-accrete-exponent\n       perform show-all-or-portion\n       perform clean-up\n\n      \n       perform initialize-integers.\n       display \"5 ** 4 ** 3 ** 2: \" with no advancing\n       move 3 to the-int\n       move 2 to the-exponent\n       perform raise-pow-accrete-exponent\n       move 4 to the-int\n       perform raise-pow-accrete-exponent\n       move 5 to the-int\n       perform raise-pow-accrete-exponent\n       perform show-all-or-portion\n       perform clean-up\n       goback.\n      \n\n       initialize-integers.\n       call \"__gmpz_init\" using gmp-number returning omitted\n       call \"__gmpz_init\" using gmp-build returning omitted\n       .\n\n       raise-pow-accrete-exponent.\n      \n       if cant-use then\n           display \"Error: intermediate overflow occured at \"\n                   the-exponent upon syserr\n           goback\n       end-if\n       call \"__gmpz_set_ui\" using gmp-number by value 0\n           returning omitted\n       call \"__gmpz_set_ui\" using gmp-build by value the-int\n           returning omitted\n       call \"__gmpz_pow_ui\" using gmp-number gmp-build\n           by value the-exponent\n           returning omitted\n       call \"__gmpz_set_ui\" using gmp-build by value 0\n           returning omitted\n       call \"__gmpz_get_ui\" using gmp-number returning the-exponent\n       call \"__gmpz_fits_ulong_p\" using gmp-number\n           returning valid-exponent\n       .\n\n      \n       show-all-or-portion.\n       call \"__gmpz_sizeinbase\" using gmp-number\n           by value 10\n           returning number-length\n       display \"GMP length: \" number-length \", \" with no advancing\n\n       call \"__gmpz_get_str\" using null by value 10\n           by reference gmp-number\n           returning number-string\n       call \"strlen\" using by value number-string\n           returning number-length\n       display \"strlen: \" number-length\n\n      \n       move window-width to limit-width\n       set address of number-buffer to number-string\n       if number-length <= window-width then\n           move number-length to limit-width\n           display number-buffer(1:limit-width)\n       else\n           display number-buffer with no advancing\n           subtract window-width from number-length\n           move function max(0, number-length) to number-length\n           if number-length <= window-width then\n               move number-length to limit-width\n           else\n               display \"...\" with no advancing\n           end-if\n           set address of number-buffer up by\n               function max(window-width, number-length)\n           display number-buffer(1:limit-width)\n       end-if\n       .\n\n       clean-up.\n       call \"free\" using by value number-string returning omitted\n       call \"__gmpz_clear\" using gmp-number returning omitted\n       call \"__gmpz_clear\" using gmp-build returning omitted\n       set address of number-buffer to null\n       set cant-use to false\n       .\n\n       end program arbitrary-precision-integers.\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": null,
    "code_file": "successful_snippet_3f9775d5.cob",
    "compiled_file": "successful_snippet_3f9775d5",
    "expected_output": "10 ** 19       \u00a0: GMP length: +0000000020, strlen: +0000000020\n10000000000000000000\n12345 ** 9     \u00a0: GMP length: +0000000038, strlen: +0000000037\n6659166111488656281486807152009765625\n5 ** 4 ** 3 ** 2: GMP length: +0000183231, strlen: +0000183231\n62060698786608744707...92256259918212890625\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}