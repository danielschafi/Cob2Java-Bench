{
    "cobol_file": {
        "file_name": "successful_snippet_6ac57b97.cob",
        "content": "       identification division.\n       program-id. maze.\n       author. Joe Wingbermuehle.\n       date-written. 2010-09-26.\n\n       environment division.\n\n       data division.\n       working-storage section.\n\n       01  width        pic 99999 value 39.\n       01  height       pic 99999 value 23.\n       01  maze-array.\n           05  maze-row occurs 39 times.\n               10  maze-col occurs 23 times pic 9.\n\n       01  seed         pic 9999999.\n       01  x            pic 99999.\n       01  y            pic 99999.\n       01  lx           pic 99999.\n       01  ly           pic 99999.\n       01  x1           pic S99999.\n       01  y1           pic S99999.\n       01  x2           pic S99999.\n       01  y2           pic S99999.\n       01  dx           pic S9.\n       01  dy           pic S9.\n       01  dir          pic 9.\n       01  cnt          pic 9.\n\n       procedure division.\n\n      * Generate and display a random maze.\n       perform 100-initialize-maze\n       perform 200-generate-maze\n       perform 300-show-maze\n       stop run.\n\n      * Initialze the maze matrix.\n       100-initialize-maze.\n           perform varying y from 1 by 1 until y > height\n              perform varying x from 1 by 1 until x > width\n                 move 1 to maze-col(x, y)\n              end-perform\n           end-perform.\n\n      * Generate a random maze.\n       200-generate-maze.\n           move function seconds-past-midnight to seed\n           move function random(seed) to seed\n           move 0 to maze-col(2, 2)\n           perform varying y from 2 by 2 until y >= height\n              perform varying x from 2 by 2 until x >= width\n                  move x to lx\n                  move y to ly\n                  perform 400-carve-maze\n              end-perform\n           end-perform\n           move 0 to maze-col(2, 1)\n           move 0 to maze-col(width - 1, height).\n\n      * Display the maze.\n       300-show-maze.\n           perform varying y from 1 by 1 until y > height\n              perform varying x from 1 by 1 until x > width\n                 if maze-col(x, y) = 0 then\n                     display '  ' with no advancing\n                 else\n                     display '[]' with no advancing\n                 end-if\n              end-perform\n              display ''\n           end-perform.\n\n      * Carve the maze starting at lx, ly\n       400-carve-maze.\n           compute dir = function random * 4.0\n           move 0 to cnt\n           perform until cnt > 3\n               move 0 to dx\n               move 0 to dy\n               evaluate dir\n                   when 0 move 1 to dx\n                   when 1 move 1 to dy\n                   when 2 move -1 to dx\n                   when 3 move -1 to dy\n               end-evaluate\n               add lx to dx giving x1\n               add ly to dy giving y1\n               add x1 to dx giving x2\n               add y1 to dy giving y2\n               if      x2 > 1 and x2 < width\n                   and y2 > 1 and y2 < height\n                   and maze-col(x1, y1) = 1\n                   and maze-col(x2, y2) = 1 then\n                   move 0 to maze-col(x1, y1)\n                   move 0 to maze-col(x2, y2)\n                   move x2 to lx\n                   move y2 to ly\n                   compute dir = function random * 4.0\n                   move 0 to cnt\n               else\n                   add 1 to cnt\n                   add 1 to dir\n                   if dir = 4 then move 0 to dir\n               end-if\n           end-perform.\n\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": null,
    "code_file": "successful_snippet_6ac57b97.cob",
    "compiled_file": "successful_snippet_6ac57b97",
    "expected_output": "[]  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][] \n[]                          []      []          []          []              [] \n[][][]  [][][]  [][][][][]  [][][]  []  []  []  []  []  []  []  [][][][][]  [] \n[]  []      []          []      []  []  []  []      []  []  []  []      []  [] \n[]  [][][]  []  [][][]  [][][]  []  [][][]  [][][]  []  []  []  [][][]  []  [] \n[]          []      []      []  []      []      []  []  []  []      []  []  [] \n[]  [][][][][][][][][][][]  []  [][][]  [][][]  []  []  []  [][][]  []  []  [] \n[]      []                  []      []      []  []  []  []          []  []  [] \n[][][]  []  [][][][][][][][][][][]  [][][]  []  [][][]  [][][][][][][]  []  [] \n[]      []                      []          []      []                  []  [] \n[][][][][]  [][][][][]  [][][]  [][][][][][][][][]  []  [][][][][][][][][]  [] \n[]      []          []      []                      []      []          []  [] \n[]  []  [][][][][]  []  []  [][][][][][][][][][][][][][][][][]  [][][]  []  [] \n[]  []      []      []  []              []                      []      []  [] \n[]  [][][]  []  [][][][][][][][][][][]  []  []  [][][][][][][][][]  [][][]  [] \n[]  []  []  []  []                  []      []      []      []      []      [] \n[]  []  []  []  []  [][][][][][][]  []  [][][][][]  []  []  [][][][][]  [][][] \n[]  []      []  []  []      []      []  []      []  []  []          []      [] \n[]  [][][][][]  []  []  []  []  [][][][][]  []  []  []  []  [][][]  [][][]  [] \n[]          []  []      []  []  []          []  []  []  []      []      []  [] \n[]  [][][]  [][][][][][][]  []  []  []  [][][]  [][][]  [][][]  []  []  []  [] \n[]      []                  []      []      []          []      []  []      [] \n[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]  [] \n",
    "expected_output_files": [],
    "expected_input_output_files": []
}