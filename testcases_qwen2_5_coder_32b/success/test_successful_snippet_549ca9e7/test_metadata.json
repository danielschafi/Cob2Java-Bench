{
    "cobol_file": {
        "file_name": "successful_snippet_549ca9e7.cob",
        "content": "       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n      * This program serves as the solution to both parts 1 and 2\n      * for day 13.\n      *\n       Program-ID. cs13a.\n       Environment Division.\n       Configuration Section.\n       Repository.\n           FUNCTION ALL INTRINSIC.\n       Input-Output Section.\n       File-Control.\n           Select INPT-DATA            Assign Keyboard.\n       Data Division.\n       File Section.\n       FD  INPT-DATA.\n       01  INPT-DATA-REC-MAX PIC X(080).\n\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  MYNAME             PIC X(008)         VALUE 'cs13a'.\n\n       01  WORK-AREAS.\n           05  WS-REC-COUNT       PIC 9(009) COMP    VALUE 0.\n           05  DOT-COUNT          PIC 9(009) COMP    VALUE 0.\n           05  NB-FOLDS           PIC 9(009) COMP    VALUE 0.\n           05  FOLD-MAX           PIC 9(009) COMP    VALUE 0.\n           05  Y-MAX              PIC 9(009) COMP    VALUE 0.\n           05  X-MAX              PIC 9(009) COMP    VALUE 0.\n           05  FOLD-IDX           PIC 9(009) COMP    VALUE 0.\n           05  FOLD-START         PIC 9(009) COMP    VALUE 0.\n           05  Y-IDX              PIC 9(009) COMP    VALUE 0.\n           05  X-IDX              PIC 9(009) COMP    VALUE 0.\n           05  T-IDX              PIC 9(009) COMP    VALUE 0.\n           05  CLI-ARGS           PIC X(080)         VALUE LOW-VALUES.\n           05  PROCESS-TYPE       PIC X(004)         VALUE LOW-VALUES.\n           05  FOLD-HDR           PIC X(012)         VALUE SPACES.\n           05  FOLD-LINE-X        PIC X(004)         VALUE SPACES.\n           05  X-X                PIC X(004)         VALUE SPACES.\n           05  Y-X                PIC X(004)         VALUE SPACES.\n           05  NB-FOLDS-X         PIC X(004)         VALUE SPACES.\n\n       01  WS-INPT-DATA.\n           05  WS-INPT            PIC X(080)        VALUE SPACES.\n\n       01  SWITCHES.\n           05  INPT-DATA-EOF-SW   PIC X(001)         VALUE 'N'.\n               88  INPT-DATA-EOF                     VALUE 'Y'.\n           05  PROCESS-SW         PIC X(004)         VALUE LOW-VALUES.\n               88  PROCESS-TEST                      VALUE 'TEST'.\n           05  FOLDING-NOW-SW     PIC X(001)         VALUE 'N'.\n               88  FOLDING-NOW                       VALUE 'Y'.\n\n       01  POINT-TABLE EXTERNAL.\n           05  POINT-Y OCCURS 2000.\n               10  POINT-X OCCURS 2000.\n                   15  POINT      PIC X(001).\n\n       01  POINT-TRANSFORM-TABLE.\n           05  POINT-Y-T OCCURS 2000.\n               10  POINT-X-T OCCURS 2000.\n                   15  POINT-T    PIC X(001).\n\n       01  FOLD-LIST.\n           05  FOLDS OCCURS 20.\n               10  FOLD-AXIS      PIC X(001).\n               10  FOLD-LINE      PIC 9(009) COMP.\n\n       Procedure Division.\n           DISPLAY MYNAME SPACE CURRENT-DATE\n\n           ACCEPT CLI-ARGS FROM COMMAND-LINE\n           UNSTRING CLI-ARGS DELIMITED SPACE OR LOW-VALUE\n             INTO PROCESS-TYPE NB-FOLDS-X\n           END-UNSTRING\n\n           MOVE UPPER-CASE(PROCESS-TYPE)\n             TO PROCESS-SW\n           MOVE NUMVAL(NB-FOLDS-X) TO NB-FOLDS\n\n           DISPLAY MYNAME ' nb folds  ' NB-FOLDS\n\n           INITIALIZE\n             POINT-TRANSFORM-TABLE\n             FOLD-LIST\n\n           MOVE ALL '.' TO POINT-TABLE\n\n           OPEN INPUT INPT-DATA\n\n           PERFORM 8010-READ-INPT-DATA\n\n           PERFORM 1000-LOAD-INPUT UNTIL INPT-DATA-EOF\n\n           CLOSE INPT-DATA\n\n           DISPLAY MYNAME ' initial x max ' X-MAX\n           DISPLAY MYNAME ' initial y max ' Y-MAX\n\n           IF NB-FOLDS > 0\n               PERFORM 2000-PROCESS-INPUT\n                 VARYING FOLD-IDX FROM 1 BY 1\n                 UNTIL FOLD-IDX > FOLD-MAX\n                 OR FOLD-IDX > NB-FOLDS\n           ELSE\n               PERFORM 2000-PROCESS-INPUT\n                 VARYING FOLD-IDX FROM 1 BY 1\n                 UNTIL FOLD-IDX > FOLD-MAX\n               CALL 'pointdmp' USING\n                   Y-MAX\n                   X-MAX\n               END-CALL\n           END-IF\n\n           PERFORM VARYING Y-IDX FROM 1 BY 1\n           UNTIL Y-IDX > Y-MAX\n           AFTER X-IDX FROM 1 BY 1\n           UNTIL X-IDX > X-MAX\n             IF POINT(Y-IDX,X-IDX) = '#'\n                 ADD 1 TO DOT-COUNT\n             END-IF\n           END-PERFORM\n\n           DISPLAY MYNAME ' dot count       ' DOT-COUNT\n           DISPLAY MYNAME ' records read    ' WS-REC-COUNT\n\n           DISPLAY MYNAME SPACE FUNCTION CURRENT-DATE\n\n           GOBACK.\n\n       1000-LOAD-INPUT.\n           EVALUATE TRUE\n             WHEN FOLDING-NOW\n                  UNSTRING WS-INPT DELIMITED '='\n                    INTO FOLD-HDR FOLD-LINE-X\n                  END-UNSTRING\n                  ADD 1 TO FOLD-MAX\n                  MOVE FOLD-HDR(12:1) TO FOLD-AXIS(FOLD-MAX)\n                  COMPUTE FOLD-LINE(FOLD-MAX) = NUMVAL(FOLD-LINE-X) + 1\n                  IF FOLD-AXIS(FOLD-MAX) = 'x'\n                      IF FOLD-LINE(FOLD-MAX) * 2 > X-MAX\n                          COMPUTE X-MAX = FOLD-LINE(FOLD-MAX) * 2\n                      END-IF\n                  END-IF\n             WHEN WS-INPT = SPACES\n                  SET FOLDING-NOW TO TRUE\n             WHEN OTHER\n                  UNSTRING WS-INPT DELIMITED ','\n                    INTO X-X Y-X\n                  END-UNSTRING\n                  COMPUTE X-IDX = NUMVAL(X-X) + 1\n                  COMPUTE Y-IDX = NUMVAL(Y-X) + 1\n                  IF PROCESS-TEST\n                      DISPLAY MYNAME ' ' X-IDX ',' Y-IDX\n                  END-IF\n                  MOVE '#' TO POINT(Y-IDX,X-IDX)\n                  IF Y-IDX > Y-MAX\n                      MOVE Y-IDX TO Y-MAX\n                  END-IF\n                  IF X-IDX > X-MAX\n                      MOVE X-IDX TO X-MAX\n                  END-IF\n           END-EVALUATE\n\n           INITIALIZE WS-INPT\n           PERFORM 8010-READ-INPT-DATA\n           .\n\n       2000-PROCESS-INPUT.\n           IF PROCESS-TEST\n               DISPLAY MYNAME ' before'\n               CALL 'pointdmp' USING\n                   Y-MAX\n                   X-MAX\n               END-CALL\n           END-IF\n\n           IF PROCESS-TEST OR NB-FOLDS > 0\n               DISPLAY\n                 MYNAME\n                 SPACE FOLD-AXIS(FOLD-IDX)\n                 SPACE FOLD-LINE(FOLD-IDX)\n           END-IF\n\n           MOVE ALL '.' TO POINT-TRANSFORM-TABLE\n           COMPUTE FOLD-START = FOLD-LINE(FOLD-IDX) + 1\n           IF FOLD-AXIS(FOLD-IDX) = 'x'\n               PERFORM 2100-FOLD-X\n                 VARYING Y-IDX FROM 1 BY 1\n                 UNTIL Y-IDX > Y-MAX\n                 AFTER X-IDX FROM FOLD-START BY 1\n                 UNTIL X-IDX > X-MAX\n               COMPUTE X-MAX = FOLD-LINE(FOLD-IDX) - 1\n               IF PROCESS-TEST\n                   DISPLAY MYNAME ' x max ' X-MAX\n               END-IF\n           ELSE\n               PERFORM 2200-FOLD-Y\n                 VARYING Y-IDX FROM FOLD-START BY 1\n                 UNTIL Y-IDX > Y-MAX\n                 AFTER X-IDX FROM 1 BY 1\n                 UNTIL X-IDX > X-MAX\n               COMPUTE Y-MAX = FOLD-LINE(FOLD-IDX) - 1\n               IF PROCESS-TEST\n                   DISPLAY MYNAME ' y max ' Y-MAX\n               END-IF\n           END-IF\n\n           MOVE POINT-TRANSFORM-TABLE TO POINT-TABLE\n\n           IF PROCESS-TEST\n               DISPLAY MYNAME ' after'\n               CALL 'pointdmp' USING\n                   Y-MAX\n                   X-MAX\n               END-CALL\n           END-IF\n           .\n\n       2100-FOLD-X.\n           COMPUTE T-IDX = \n             FOLD-LINE(FOLD-IDX) - (X-IDX - FOLD-LINE(FOLD-IDX))\n           EVALUATE POINT(Y-IDX,T-IDX) ALSO POINT(Y-IDX,X-IDX)\n             WHEN   '.'                ALSO '#'\n             WHEN   '#'                ALSO '.'\n             WHEN   '#'                ALSO '#'\n                    MOVE '#' TO POINT-T(Y-IDX,T-IDX)\n             WHEN   OTHER\n                    CONTINUE\n           END-EVALUATE\n           .\n\n       2200-FOLD-Y.\n           COMPUTE T-IDX = \n             FOLD-LINE(FOLD-IDX) - (Y-IDX - FOLD-LINE(FOLD-IDX))\n           EVALUATE POINT(T-IDX,X-IDX) ALSO POINT(Y-IDX,X-IDX)\n             WHEN   '.'                ALSO '#'\n             WHEN   '#'                ALSO '.'\n             WHEN   '#'                ALSO '#'\n                    MOVE '#' TO POINT-T(T-IDX,X-IDX)\n             WHEN   OTHER\n                    CONTINUE\n           END-EVALUATE\n           .\n\n       8010-READ-INPT-DATA.\n           INITIALIZE WS-INPT-DATA\n           READ INPT-DATA INTO WS-INPT-DATA\n             AT END SET INPT-DATA-EOF TO TRUE\n             NOT AT END\n               ADD 1 TO WS-REC-COUNT\n           END-READ\n\n           .\n\n       END PROGRAM cs13a.\n\n       ID Division.\n       Program-ID. pointdmp.\n       Data Division.\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  MYNAME             PIC X(008) VALUE 'pointdmp'.\n\n       01  WORK-AREAS.\n           05  Y-IDX              PIC S9(009) COMP   VALUE 0.\n           05  X-IDX              PIC S9(009) COMP   VALUE 0.\n\n       01  POINT-TABLE EXTERNAL.\n           05  POINT-Y OCCURS 2000.\n               10  POINT-X OCCURS 2000.\n                   15  POINT      PIC X(001).\n\n       Linkage Section.\n       01  Y-MAX                  PIC S9(009) COMP.\n       01  X-MAX                  PIC S9(009) COMP.\n       Procedure Division Using\n           Y-MAX X-MAX\n         .\n           PERFORM VARYING Y-IDX FROM 1 BY 1\n           UNTIL Y-IDX > Y-MAX\n             DISPLAY MYNAME SPACE WITH NO ADVANCING\n             PERFORM VARYING X-IDX FROM 1 BY 1\n             UNTIL X-IDX > X-MAX\n               DISPLAY POINT(Y-IDX,X-IDX)\n                 WITH NO ADVANCING\n             END-PERFORM\n             DISPLAY SPACE\n           END-PERFORM\n           .\n\n       END PROGRAM pointdmp.\n\n"
    },
    "input_files": [],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": {
        "file_name": "sysin.txt",
        "content": "PROCESS-TYPE1 NB-FOLDS-X1                                                                             \nPROCESS-TYPE2 NB-FOLDS-X2                                                                             \nPROCESS-TYPE3 NB-FOLDS-X3                                                                             \nPROCESS-TYPE4 NB-FOLDS-X4                                                                             \nPROCESS-TYPE5 NB-FOLDS-X5                                                                             \nPROCESS-TYPE6 NB-FOLDS-X6                                                                             \nPROCESS-TYPE7 NB-FOLDS-X7                                                                             \nPROCESS-TYPE8 NB-FOLDS-X8"
    },
    "code_file": "successful_snippet_549ca9e7.cob",
    "compiled_file": "successful_snippet_549ca9e7",
    "expected_output": "cs13a    2025100900103779+0200\ncs13a    nb folds  000000000\ncs13a    initial x max 000000001\ncs13a    initial y max 000000001\ncs13a    dot count       000000000\ncs13a    records read    000000015\ncs13a    2025100900103780+0200\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}