{
    "cobol_file": {
        "file_name": "successful_snippet_821d83d2.cob",
        "content": "       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n      * Base64 encoding in the COBOL language\n      * \n      * The nested program does the encoding, this parent program\n      * provides the data to be encoded.  The separation of duties\n      * allows the nested program to be coded in a manner which is\n      * likely to be more portable between compilers.\n      *\n      * This parent program accepts one of two command-line\n      * parameters:\n      * test - initiates tests using strings listed on the Base64  \n      *        encoding page\n      *        https://en.wikipedia.org/wiki/Base64#Output_padding\n      * file - initiates encoding of a file named favicon.ico\n      *        located in the current directory, which is presumed\n      *        to contain the result of retrieving data from\n      *        http://rosettacode.org/favicon.ico\n      *\n      * Be advised that output from this parent program includes a\n      * trailing x'0a' line feed.\n      *\n       Program-ID. b64demo1.\n       Environment Division.\n       Input-Output Section.\n       File-Control.\n           Select INPUT01 Assign To 'favicon.ico'\n             Organization Record Binary Sequential.\n       Data Division.\n       File Section.\n       FD  INPUT01.\n       01  INPUT01-REC PIC X(3638).\n\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  MYNAME             PIC X(008) VALUE 'b64demo1'.\n\n       77  PROCESS-TYPE           PIC X(004)         VALUE SPACES.\n       77  PROCESS-SW             PIC X(004)         VALUE SPACES.\n           88  PROCESS-FILE                          VALUE 'FILE'.\n           88  PROCESS-TEST                          VALUE 'TEST'.\n       77  IN-BUFFER-LEN          PIC 9(008)   COMP  VALUE 0.\n       77  IN-BUFFER              PIC X(32768)       VALUE LOW-VALUES.\n       77  OUT-BUFFER-LEN         PIC 9(008)   COMP  VALUE 0.\n       77  OUT-BUFFER             PIC X(65536)       VALUE LOW-VALUES.\n\n       Procedure Division.\n\n           ACCEPT PROCESS-TYPE FROM COMMAND-LINE\n           MOVE FUNCTION UPPER-CASE(PROCESS-TYPE)\n             TO PROCESS-SW\n\n           EVALUATE TRUE\n              WHEN PROCESS-FILE PERFORM 1000-PROCESS-FAVICON\n              WHEN PROCESS-TEST PERFORM 2000-PROCESS-WIKIPEDIA-TESTS\n              WHEN OTHER\n                   DISPLAY MYNAME\n                           ' requires a command line argument'\n                           ' of FILE or TEST'\n           END-EVALUATE\n\n           GOBACK\n           .\n\n       1000-PROCESS-FAVICON.\n           OPEN INPUT INPUT01\n\n           READ INPUT01 INTO IN-BUFFER\n\n           CLOSE INPUT01\n\n           MOVE LENGTH OF INPUT01-REC TO IN-BUFFER-LEN\n\n           CALL 'B64ENCOD' USING\n               IN-BUFFER-LEN\n               IN-BUFFER\n               OUT-BUFFER-LEN\n               OUT-BUFFER\n           END-CALL\n\n           DISPLAY OUT-BUFFER(1:OUT-BUFFER-LEN)\n           .\n\n       2000-PROCESS-WIKIPEDIA-TESTS.\n           MOVE 1 TO IN-BUFFER-LEN\n           STRING 'light work.' INTO IN-BUFFER POINTER IN-BUFFER-LEN\n           SUBTRACT 1 FROM IN-BUFFER-LEN\n\n           CALL 'B64ENCOD' USING\n               IN-BUFFER-LEN\n               IN-BUFFER\n               OUT-BUFFER-LEN\n               OUT-BUFFER\n           END-CALL\n\n           DISPLAY MYNAME ' IN-BUFFER-LEN = ' IN-BUFFER-LEN\n           DISPLAY MYNAME ' IN-BUFFER = ' IN-BUFFER(1:IN-BUFFER-LEN)\n           DISPLAY MYNAME ' OUT-BUFFER-LEN = ' OUT-BUFFER-LEN\n           DISPLAY MYNAME ' OUT-BUFFER = ' OUT-BUFFER(1:OUT-BUFFER-LEN)\n\n           MOVE 1 TO IN-BUFFER-LEN\n           STRING 'light work' INTO IN-BUFFER POINTER IN-BUFFER-LEN\n           SUBTRACT 1 FROM IN-BUFFER-LEN\n\n           CALL 'B64ENCOD' USING\n               IN-BUFFER-LEN\n               IN-BUFFER\n               OUT-BUFFER-LEN\n               OUT-BUFFER\n           END-CALL\n\n           DISPLAY MYNAME ' IN-BUFFER-LEN = ' IN-BUFFER-LEN\n           DISPLAY MYNAME ' IN-BUFFER = ' IN-BUFFER(1:IN-BUFFER-LEN)\n           DISPLAY MYNAME ' OUT-BUFFER-LEN = ' OUT-BUFFER-LEN\n           DISPLAY MYNAME ' OUT-BUFFER = ' OUT-BUFFER(1:OUT-BUFFER-LEN)\n\n           MOVE 1 TO IN-BUFFER-LEN\n           STRING 'light wor' INTO IN-BUFFER POINTER IN-BUFFER-LEN\n           SUBTRACT 1 FROM IN-BUFFER-LEN\n\n           CALL 'B64ENCOD' USING\n               IN-BUFFER-LEN\n               IN-BUFFER\n               OUT-BUFFER-LEN\n               OUT-BUFFER\n           END-CALL\n\n           DISPLAY MYNAME ' IN-BUFFER-LEN = ' IN-BUFFER-LEN\n           DISPLAY MYNAME ' IN-BUFFER = ' IN-BUFFER(1:IN-BUFFER-LEN)\n           DISPLAY MYNAME ' OUT-BUFFER-LEN = ' OUT-BUFFER-LEN\n           DISPLAY MYNAME ' OUT-BUFFER = ' OUT-BUFFER(1:OUT-BUFFER-LEN)\n\n           MOVE 1 TO IN-BUFFER-LEN\n           STRING 'light wo' INTO IN-BUFFER POINTER IN-BUFFER-LEN\n           SUBTRACT 1 FROM IN-BUFFER-LEN\n\n           CALL 'B64ENCOD' USING\n               IN-BUFFER-LEN\n               IN-BUFFER\n               OUT-BUFFER-LEN\n               OUT-BUFFER\n           END-CALL\n\n           DISPLAY MYNAME ' IN-BUFFER-LEN = ' IN-BUFFER-LEN\n           DISPLAY MYNAME ' IN-BUFFER = ' IN-BUFFER(1:IN-BUFFER-LEN)\n           DISPLAY MYNAME ' OUT-BUFFER-LEN = ' OUT-BUFFER-LEN\n           DISPLAY MYNAME ' OUT-BUFFER = ' OUT-BUFFER(1:OUT-BUFFER-LEN)\n\n           MOVE 1 TO IN-BUFFER-LEN\n           STRING 'light w' INTO IN-BUFFER POINTER IN-BUFFER-LEN\n           SUBTRACT 1 FROM IN-BUFFER-LEN\n\n           CALL 'B64ENCOD' USING\n               IN-BUFFER-LEN\n               IN-BUFFER\n               OUT-BUFFER-LEN\n               OUT-BUFFER\n           END-CALL\n\n           DISPLAY MYNAME ' IN-BUFFER-LEN = ' IN-BUFFER-LEN\n           DISPLAY MYNAME ' IN-BUFFER = ' IN-BUFFER(1:IN-BUFFER-LEN)\n           DISPLAY MYNAME ' OUT-BUFFER-LEN = ' OUT-BUFFER-LEN\n           DISPLAY MYNAME ' OUT-BUFFER = ' OUT-BUFFER(1:OUT-BUFFER-LEN)\n           .\n\n       ID Division.\n      * \n      * Copyright (C) 2021 Craig Schneiderwent.  All rights reserved.\n      * \n      * I accept no liability for damages of any kind resulting \n      * from the use of this software.  Use at your own risk.\n      *\n      * This software may be modified and distributed under the terms\n      * of the MIT license. See the LICENSE file for details.\n      *\n      * Base64 encode data passed via CALL parameters in the \n      * Linkage Section.\n      *\n      * This program presumes big-endian encoding for COMP\n      * data items, that PIC 9(008) COMP is four bytes long,\n      * and that a byte is eight bits, but otherwise should\n      * be compatible with any current COBOL compiler.\n      *\n      * The input buffer to be encoded is limited to 32K, but\n      * this is arbitrary and can be increased to the limits\n      * of your compiler.\n      *\n      * The output buffer containing the encoded data is limited\n      * to 64K, but this is arbitrary and can be increased \n      * subject only to the limits of your compiler.\n      *\n       Program-ID. B64ENCOD Is Initial.\n       Environment Division.\n       Input-Output Section.\n       Data Division.\n       Working-Storage Section.\n       01  CONSTANTS.\n           05  MYNAME             PIC X(008) VALUE 'B64ENCOD'.\n           05  SIX-BIT-CHARS.\n               10  PIC X(032) VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef'.\n               10  PIC X(032) VALUE 'ghijklmnopqrstuvwxyz0123456789+/'.\n\n       01  WORK-AREAS.\n           05  IN-BUFFER-PTR      PIC 9(008)  COMP VALUE 1.\n           05  OUT-BUFFER-PTR     PIC 9(008)  COMP VALUE 1.\n           05  FOUR-BYTE-INT      PIC 9(008)  COMP VALUE ZERO.\n           05  FOUR-BYTE-INT-BYTES1\n               REDEFINES FOUR-BYTE-INT.\n               10                     PIC X(003).\n               10  FOUR-BYTE-INT-LOW1 PIC X(001).\n           05  FOUR-BYTE-INT-BYTES2\n               REDEFINES FOUR-BYTE-INT.\n               10                     PIC X(001).\n               10  FOUR-BYTE-INT-LOW3 PIC X(003).\n           05  SIX-BIT-SUB            PIC 9(008) COMP VALUE ZERO.\n           05  SIX-BIT-SUB-X\n               REDEFINES SIX-BIT-SUB.\n               10                     PIC X(003).\n               10  SIX-BIT-SUB-LOW1     PIC X(001).\n           05  OUT-BLOCK-SUB          PIC 9(004) COMP VALUE 5.\n           05  OUT-BLOCK              PIC X(004)      VALUE SPACES.\n           05  NB-GROUPS-OF-THREE     PIC 9(004) COMP.\n           05  NB-GROUPS-OF-THREE-R   PIC 9(004) COMP.\n           05  NB-BYTES               PIC 9(004) COMP.\n           05  OUT-BLOCK-START        PIC 9(004) COMP.\n\n       Linkage Section.\n       77  IN-BUFFER-LEN       PIC 9(008)  COMP.\n       77  IN-BUFFER           PIC X(32768).\n       77  OUT-BUFFER-LEN      PIC 9(008)  COMP.\n       77  OUT-BUFFER          PIC X(65536).\n\n       Procedure Division Using\n           IN-BUFFER-LEN\n           IN-BUFFER\n           OUT-BUFFER-LEN\n           OUT-BUFFER\n           .\n\n           INITIALIZE OUT-BUFFER-LEN\n           PERFORM 1000-CONVERT\n\n           GOBACK.\n\n       1000-CONVERT.\n           DIVIDE IN-BUFFER-LEN BY 3\n             GIVING NB-GROUPS-OF-THREE\n             REMAINDER NB-GROUPS-OF-THREE-R\n\n           PERFORM 1100-CONVERT-GROUPS-OF-THREE\n             NB-GROUPS-OF-THREE TIMES\n\n           EVALUATE NB-GROUPS-OF-THREE-R\n             WHEN 2\n                  PERFORM 1200-CONVERT-JUST-TWO\n             WHEN 1\n                  PERFORM 1300-CONVERT-JUST-ONE\n           END-EVALUATE\n           .\n\n       1100-CONVERT-GROUPS-OF-THREE.\n           INITIALIZE FOUR-BYTE-INT\n           MOVE IN-BUFFER(IN-BUFFER-PTR:3) TO FOUR-BYTE-INT-LOW3\n\n      *    Expect 4 output bytes for 3 input bytes\n           MOVE 4 TO NB-BYTES\n           PERFORM 2000-CONVERT-ONE-BLOCK\n           ADD 3 TO IN-BUFFER-PTR\n           .\n\n       1200-CONVERT-JUST-TWO.\n           INITIALIZE FOUR-BYTE-INT\n           MOVE IN-BUFFER(IN-BUFFER-PTR:2)\n             TO FOUR-BYTE-INT-LOW3(2:2)\n      *    Shift Left Logical 2 bits because we only have\n      *    two bytes to convert, two bytes = 16 bits, but\n      *    we need 18 bits to comprise our 3 output bytes\n           MULTIPLY 4 BY FOUR-BYTE-INT\n\n      *    Expect 3 output bytes for 2 input bytes\n           MOVE 3 TO NB-BYTES\n           PERFORM 2000-CONVERT-ONE-BLOCK\n\n      *    Pad with '=' because some implementations require it\n           STRING '='\n             INTO OUT-BUFFER\n             POINTER OUT-BUFFER-PTR\n           END-STRING\n\n      *    Account for the padding\n           ADD 1 TO OUT-BUFFER-LEN\n           .\n\n       1300-CONVERT-JUST-ONE.\n           INITIALIZE FOUR-BYTE-INT\n           MOVE IN-BUFFER(IN-BUFFER-PTR:1)\n             TO FOUR-BYTE-INT-LOW3(3:1)\n      *    Shift Left Logical 4 bits because we only have\n      *    one byte to convert, one byte = 8 bits, but\n      *    we need 12 bits to comprise our 2 output bytes\n           MULTIPLY 16 BY FOUR-BYTE-INT\n\n      *    Expect 2 output bytes for 1 input byte\n           MOVE 2 TO NB-BYTES\n           PERFORM 2000-CONVERT-ONE-BLOCK\n\n      *    Pad with '==' because some implementations require it\n           STRING '=='\n             INTO OUT-BUFFER\n             POINTER OUT-BUFFER-PTR\n           END-STRING\n\n      *    Account for the padding\n           ADD 2 TO OUT-BUFFER-LEN\n           .\n\n       2000-CONVERT-ONE-BLOCK.\n           MOVE 5 TO OUT-BLOCK-SUB\n           MOVE SPACES TO OUT-BLOCK\n           PERFORM 2010-CONVERT-ONE-BYTE NB-BYTES TIMES\n           COMPUTE OUT-BLOCK-START = 4 - NB-BYTES + 1\n           STRING OUT-BLOCK(OUT-BLOCK-START:NB-BYTES)\n             INTO OUT-BUFFER\n             POINTER OUT-BUFFER-PTR\n           END-STRING\n           ADD NB-BYTES TO OUT-BUFFER-LEN\n           .\n\n       2010-CONVERT-ONE-BYTE.\n      *    Shift Left Logical 2 bits\n           MULTIPLY 4 BY FOUR-BYTE-INT\n\n      *    Initialize target storage subscript\n           INITIALIZE SIX-BIT-SUB\n\n      *    Copy bit-shifted byte to target storage\n           MOVE FOUR-BYTE-INT-LOW1 TO SIX-BIT-SUB-LOW1\n\n      *    Shift Right Logical 2 bits\n           COMPUTE SIX-BIT-SUB = SIX-BIT-SUB / 4\n\n      *    COBOL is 1-based not 0-based\n           ADD 1 TO SIX-BIT-SUB\n\n      *    Filling OUT-BLOCK from right to left\n           SUBTRACT 1 FROM OUT-BLOCK-SUB\n\n      *    Copy converted byte to OUT-BLOCK\n           MOVE SIX-BIT-CHARS(SIX-BIT-SUB:1)\n             TO OUT-BLOCK(OUT-BLOCK-SUB:1)\n\n      *    Initialize storage formerly occupied by converted byte\n           MOVE LOW-VALUES TO FOUR-BYTE-INT-LOW1\n\n      *    Shift Right Logical 8 bits, setup for next iteration\n           COMPUTE FOUR-BYTE-INT = FOUR-BYTE-INT / 256\n           .\n\n       END PROGRAM B64ENCOD.\n       END PROGRAM b64demo1.\n\n"
    },
    "input_files": [
        {
            "file_name": "favicon.ico",
            "content": "b64demo1\nb64ENCOD\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000\n0000000100000001000000000000000000000005    00000000000000000000000000000000000000000000000000000000"
        }
    ],
    "output_files": [],
    "input_output_files": [],
    "sysin_file": {
        "file_name": "sysin.txt",
        "content": "TEST    \nTEST    \nLOAD    \nLOAD    \nINIT    \nINIT    \nBACKUP  \nBACKUP  \nEOF"
    },
    "code_file": "successful_snippet_821d83d2.cob",
    "compiled_file": "successful_snippet_821d83d2",
    "expected_output": "b64demo1 requires a command line argument of FILE or TEST\n",
    "expected_output_files": [],
    "expected_input_output_files": []
}